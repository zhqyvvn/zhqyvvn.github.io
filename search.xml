<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Build a Game with Java - Breakout Ball</title>
    <url>/2020/01/13/Game-Breakout-Ball/</url>
    <content><![CDATA[<h4 id="🌟-Game-Video"><a href="#🌟-Game-Video" class="headerlink" title="🌟 Game Video"></a>🌟 Game Video</h4><iframe src="https://drive.google.com/file/d/1vJPSyKD83s_67LJ7Ohe6NiZ4XgdloM7z/preview" width="640" height="480">
</iframe>
<p style="text-align: center; border-bottom: 0px solid #ddd;"></p>   

<span id="more"></span>  

<h4 id="🌟-Components"><a href="#🌟-Components" class="headerlink" title="🌟 Components"></a>🌟 Components</h4><ul>
<li>Built GUI with JFrame &#x2F; JPanel  </li>
<li>Used KeyListener and ActionListener to detect keyboard inputs (right or left)</li>
</ul>
<h4 id="📌-Reference"><a href="#📌-Reference" class="headerlink" title="📌 Reference"></a>📌 Reference</h4><p><a href="https://www.youtube.com/watch?v=K9qMm3JbOH0&list=PLjLATQlrmaYcdV-YRWBj8NDPoAjDaKKri&index=2&t=0s">Reference Link</a>  </p>
]]></content>
      <categories>
        <category>Game</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Solutions (1): Algorithm - Greedy</title>
    <url>/2020/05/01/Leetcode-1-Algorithm-Greedy/</url>
    <content><![CDATA[<p>These Leetcode problems can be solved with <em>Greedy</em> algorithm: </p>
<h4 id="53-Maximum-Subarray"><a href="#53-Maximum-Subarray" class="headerlink" title="53. Maximum Subarray"></a><a href="https://leetcode.com/problems/maximum-subarray/">53. Maximum Subarray</a></h4><span id="more"></span> 
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxSubArray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> nums[<span class="number">0</span>], sum = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">//Ensure each number is greater than itself after plus &#x27;sum&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            sum += nums[i];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sum = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        max = Math.max(max, sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="122-Best-Time-to-Buy-and-Sell-Stock-II"><a href="#122-Best-Time-to-Buy-and-Sell-Stock-II" class="headerlink" title="122. Best Time to Buy and Sell Stock II"></a><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/">122. Best Time to Buy and Sell Stock II</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> prices.length, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="comment">//make profits for every possible earning</span></span><br><span class="line">        <span class="keyword">if</span> (prices[i] &gt; prices[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            sum += prices[i] - prices[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="135-Candy"><a href="#135-Candy" class="headerlink" title="135. Candy"></a><a href="https://leetcode.com/problems/candy/">135. Candy</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">candy</span><span class="params">(<span class="type">int</span>[] ratings)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> ratings.length;</span><br><span class="line">    <span class="type">int</span>[] candies = <span class="keyword">new</span> <span class="title class_">int</span>[len];</span><br><span class="line">    candies[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//Loop from left to right. Ensure right one with higher rating gets more candies than the left</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">        candies[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (ratings[i] &gt; ratings[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            candies[i] = candies[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> candies[len - <span class="number">1</span>];</span><br><span class="line">    <span class="comment">//Loop from right to left. Ensure left one with higher rating gets more candies than the right</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> len - <span class="number">2</span>; i &gt;= <span class="number">0</span> ; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ratings[i] &gt; ratings[i + <span class="number">1</span>] &amp;&amp; candies[i] &lt;= candies[i + <span class="number">1</span>]) &#123;</span><br><span class="line">            candies[i] = candies[i + <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sum += candies[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="392-Is-Subsequence"><a href="#392-Is-Subsequence" class="headerlink" title="392. Is Subsequence"></a><a href="https://leetcode.com/problems/is-subsequence/">392. Is Subsequence</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSubsequence</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; s.length() &amp;&amp; j &lt; t.length()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.charAt(i) == t.charAt(j)) &#123;</span><br><span class="line">            i += <span class="number">1</span>;</span><br><span class="line">            j += <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            j += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i == s.length();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="406-Queue-Reconstruction-by-Height"><a href="#406-Queue-Reconstruction-by-Height" class="headerlink" title="406. Queue Reconstruction by Height"></a><a href="https://leetcode.com/problems/queue-reconstruction-by-height/">406. Queue Reconstruction by Height</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[][] reconstructQueue(<span class="type">int</span>[][] people) &#123;</span><br><span class="line">    <span class="comment">// sort by decreasing height, and increasing k when heights are equal</span></span><br><span class="line">    Arrays.sort(people, <span class="keyword">new</span> <span class="title class_">Comparator</span> &lt;<span class="type">int</span>[]&gt; () &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span> <span class="params">(<span class="type">int</span>[] p1, <span class="type">int</span>[] p2)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (p1[<span class="number">0</span>] == p2[<span class="number">0</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> p1[<span class="number">1</span>] - p2[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> p2[<span class="number">0</span>] - p1[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    List &lt;<span class="type">int</span>[]&gt; q = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; people.length; i++) &#123;</span><br><span class="line">        q.add(people[i][<span class="number">1</span>], people[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// convert ArrayList of array to array</span></span><br><span class="line">    <span class="type">int</span>[][] ans = q.toArray(<span class="keyword">new</span> <span class="title class_">int</span>[][]&#123;&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="435-Non-overlapping-Intervals"><a href="#435-Non-overlapping-Intervals" class="headerlink" title="435. Non-overlapping Intervals"></a><a href="https://leetcode.com/problems/non-overlapping-intervals/">435. Non-overlapping Intervals</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">eraseOverlapIntervals</span><span class="params">(<span class="type">int</span>[][] intervals)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> intervals.length;</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    Arrays.sort(intervals, <span class="keyword">new</span> <span class="title class_">Comparator</span> &lt;<span class="type">int</span>[]&gt; () &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span> <span class="params">(<span class="type">int</span>[] interval1, <span class="type">int</span>[] interval2)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> interval1[<span class="number">1</span>] - interval2[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span>[] pre = intervals[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">// calculate the longest length of non-overlapping array, then get the difference</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pre[<span class="number">1</span>] &lt;= intervals[i][<span class="number">0</span>]) &#123;</span><br><span class="line">            sum += <span class="number">1</span>;</span><br><span class="line">            pre = intervals[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len - sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Or</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">eraseOverlapIntervals</span><span class="params">(<span class="type">int</span>[][] intervals)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> intervals.length;</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Arrays.sort(intervals, <span class="keyword">new</span> <span class="title class_">Comparator</span> &lt;<span class="type">int</span>[]&gt;()&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] interval1, <span class="type">int</span>[] interval2)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (interval1[<span class="number">1</span>] == interval2[<span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> interval1[<span class="number">0</span>] - interval2[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> interval1[<span class="number">1</span>] - interval2[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; );</span><br><span class="line">    <span class="type">int</span>[] pre = intervals[<span class="number">0</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// count the overlapping intervals directly</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (intervals[i][<span class="number">0</span>] &lt; pre[<span class="number">1</span>]) &#123;</span><br><span class="line">            sum += <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pre = intervals[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="452-Minimum-Number-of-Arrows-to-Burst-Balloons"><a href="#452-Minimum-Number-of-Arrows-to-Burst-Balloons" class="headerlink" title="452. Minimum Number of Arrows to Burst Balloons"></a><a href="https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/">452. Minimum Number of Arrows to Burst Balloons</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// exactly same as the 1st solution of No.435, and the only difference is returning sum rather than len - sum</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findMinArrowShots</span><span class="params">(<span class="type">int</span>[][] points)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> points.length;</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    Arrays.sort(points, <span class="keyword">new</span> <span class="title class_">Comparator</span> &lt;<span class="type">int</span>[]&gt; () &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span> <span class="params">(<span class="type">int</span>[] point1, <span class="type">int</span>[] point2)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> point1[<span class="number">1</span>] - point2[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span>[] pre = points[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pre[<span class="number">1</span>] &lt; points[i][<span class="number">0</span>]) &#123;</span><br><span class="line">            sum += <span class="number">1</span>;</span><br><span class="line">            pre = points[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="455-Assign-Cookies"><a href="#455-Assign-Cookies" class="headerlink" title="455. Assign Cookies"></a><a href="https://leetcode.com/problems/assign-cookies/">455. Assign Cookies</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findContentChildren</span><span class="params">(<span class="type">int</span>[] g, <span class="type">int</span>[] s)</span> &#123;</span><br><span class="line">    Arrays.sort(g); <span class="comment">//sort greed factor</span></span><br><span class="line">    Arrays.sort(s); <span class="comment">//sort cookie size</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">child</span> <span class="operator">=</span> <span class="number">0</span>, cookie = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (child &lt; g.length &amp;&amp; cookie &lt; s.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (g[child] &lt;= s[cookie]) &#123;</span><br><span class="line">            child += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cookie += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> child;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="605-Can-Place-Flowers"><a href="#605-Can-Place-Flowers" class="headerlink" title="605. Can Place Flowers"></a><a href="https://leetcode.com/problems/can-place-flowers/">605. Can Place Flowers</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canPlaceFlowers</span><span class="params">(<span class="type">int</span>[] flowerbed, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; flowerbed.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (flowerbed[i] == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">pre</span> <span class="operator">=</span> i == <span class="number">0</span>? <span class="number">0</span>: flowerbed[i - <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">last</span> <span class="operator">=</span> i == flowerbed.length - <span class="number">1</span>? <span class="number">0</span>: flowerbed[i + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (pre == <span class="number">0</span> &amp;&amp; last == <span class="number">0</span>) &#123;</span><br><span class="line">            flowerbed[i] = <span class="number">1</span>;</span><br><span class="line">            n -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n &lt;= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="665-Non-decreasing-Array"><a href="#665-Non-decreasing-Array" class="headerlink" title="665. Non-decreasing Array"></a><a href="https://leetcode.com/problems/non-decreasing-array/">665. Non-decreasing Array</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkPossibility</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i-<span class="number">1</span>] &lt;= nums[i]) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cnt += <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// nums[i-2] &lt; nums[i-1], nums[i-1] &gt; nums[i]:</span></span><br><span class="line">        <span class="keyword">if</span> (i-<span class="number">2</span>&gt;=<span class="number">0</span> &amp;&amp; nums[i-<span class="number">2</span>]&gt;nums[i]) &#123;</span><br><span class="line">            nums[i] = nums[i-<span class="number">1</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            nums[i-<span class="number">1</span>] = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt &lt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="763-Partition-Labels"><a href="#763-Partition-Labels" class="headerlink" title="763. Partition Labels"></a><a href="https://leetcode.com/problems/partition-labels/">763. Partition Labels</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">partitionLabels</span><span class="params">(String S)</span> &#123;</span><br><span class="line">    <span class="comment">// record the last index of every letter in the string</span></span><br><span class="line">    <span class="type">int</span>[] last_index = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; S.length(); i++) &#123;</span><br><span class="line">        last_index[S.charAt(i) - <span class="string">&#x27;a&#x27;</span>] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    List &lt;Integer&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// the index of partition point is the furthest last index of all letters in that part</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">first</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (first &lt; S.length()) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">last</span> <span class="operator">=</span> last_index[S.charAt(first) - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> first; i &lt; S.length() &amp;&amp; i &lt; last; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">next_last</span> <span class="operator">=</span> last_index[S.charAt(i) - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            <span class="keyword">if</span> (next_last &gt; last) &#123;</span><br><span class="line">                last = next_last;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans.add(last - first + <span class="number">1</span>);</span><br><span class="line">        first = last + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Solutions (10): Data Structure - Stack &amp; Queue</title>
    <url>/2021/06/19/Leetcode-10-Data-Structure-Stack-Queue/</url>
    <content><![CDATA[<p>These Leetcode problems are related with <em>Stack</em> and <em>Queue</em> :</p>
<h4 id="Stack-and-Queue"><a href="#Stack-and-Queue" class="headerlink" title="Stack and Queue"></a>Stack and Queue</h4><h5 id="20-Valid-Parentheses"><a href="#20-Valid-Parentheses" class="headerlink" title="20. Valid Parentheses"></a><a href="https://leetcode.com/problems/valid-parentheses/">20. Valid Parentheses</a></h5><span id="more"></span>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">    Deque &lt;Character&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;(&#x27;</span> || c == <span class="string">&#x27;[&#x27;</span> || c == <span class="string">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class="line">            stack.offerFirst(c);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stack.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((c == <span class="string">&#x27;)&#x27;</span> &amp;&amp; stack.peekFirst() == <span class="string">&#x27;(&#x27;</span>) ||</span><br><span class="line">            (c == <span class="string">&#x27;]&#x27;</span> &amp;&amp; stack.peekFirst() == <span class="string">&#x27;[&#x27;</span>) ||</span><br><span class="line">            (c == <span class="string">&#x27;&#125;&#x27;</span> &amp;&amp; stack.peekFirst() == <span class="string">&#x27;&#123;&#x27;</span>)) &#123;</span><br><span class="line">            stack.pollFirst();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="155-Min-Stack"><a href="#155-Min-Stack" class="headerlink" title="155. Min Stack"></a><a href="https://leetcode.com/problems/min-stack/">155. Min Stack</a></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MinStack</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="type">int</span> min;</span><br><span class="line">        <span class="type">int</span> val;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> min, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.min = min;</span><br><span class="line">            <span class="built_in">this</span>.val = val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    LinkedList&lt;Node&gt; list;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** initialize your data structure here. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MinStack</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.list = <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        Node n;</span><br><span class="line">        <span class="keyword">if</span> (list.isEmpty()) &#123;</span><br><span class="line">            n = <span class="keyword">new</span> <span class="title class_">Node</span>(x, x);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> Math.min(getMin(), x);</span><br><span class="line">            n = <span class="keyword">new</span> <span class="title class_">Node</span>(min, x);</span><br><span class="line">        &#125;</span><br><span class="line">        list.add(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        list.pollLast();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">top</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.getLast().val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMin</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.getLast().min;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MinStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MinStack obj = new MinStack();</span></span><br><span class="line"><span class="comment"> * obj.push(x);</span></span><br><span class="line"><span class="comment"> * obj.pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj.top();</span></span><br><span class="line"><span class="comment"> * int param_4 = obj.getMin();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h5 id="225-Implement-Stack-using-Queues"><a href="#225-Implement-Stack-using-Queues" class="headerlink" title="225. Implement Stack using Queues"></a><a href="https://leetcode.com/problems/implement-stack-using-queues/">225. Implement Stack using Queues</a></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyStack</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">    Queue&lt;Integer&gt; q = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Push element x onto stack. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        q.add(x);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; q.size(); i++) q.add(q.remove());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Removes the element on top of the stack and returns that element. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> q.remove();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Get the top element. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">top</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> q.peek();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns whether the stack is empty. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> q.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyStack obj = new MyStack();</span></span><br><span class="line"><span class="comment"> * obj.push(x);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj.pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj.top();</span></span><br><span class="line"><span class="comment"> * boolean param_4 = obj.empty();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h5 id="232-Implement-Queue-using-Stacks"><a href="#232-Implement-Queue-using-Stacks" class="headerlink" title="232. Implement Queue using Stacks"></a><a href="https://leetcode.com/problems/implement-queue-using-stacks/">232. Implement Queue using Stacks</a></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyQueue</span> &#123;</span><br><span class="line"></span><br><span class="line">    Stack &lt;Integer&gt; in;</span><br><span class="line">    Stack &lt;Integer&gt; out;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.in = <span class="keyword">new</span> <span class="title class_">Stack</span>();</span><br><span class="line">        <span class="built_in">this</span>.out = <span class="keyword">new</span> <span class="title class_">Stack</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Push element x to the back of queue. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        in.push(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Removes the element from in front of queue and returns that element. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        in2out();</span><br><span class="line">        <span class="keyword">return</span> out.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Get the front element. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">peek</span><span class="params">()</span> &#123;</span><br><span class="line">        in2out();</span><br><span class="line">        <span class="keyword">return</span> out.peek();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns whether the queue is empty. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> out.isEmpty() &amp;&amp; in.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">in2out</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (out.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!in.isEmpty()) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> in.pop();</span><br><span class="line">                out.push(x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyQueue object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyQueue obj = new MyQueue();</span></span><br><span class="line"><span class="comment"> * obj.push(x);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj.pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj.peek();</span></span><br><span class="line"><span class="comment"> * boolean param_4 = obj.empty();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h5 id="503-Next-Greater-Element-II"><a href="#503-Next-Greater-Element-II" class="headerlink" title="503. Next Greater Element II"></a><a href="https://leetcode.com/problems/next-greater-element-ii/">503. Next Greater Element II</a></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] nextGreaterElements(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">    <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">    Arrays.fill(res, -<span class="number">1</span>);</span><br><span class="line">    Stack &lt;Integer&gt; s = <span class="keyword">new</span> <span class="title class_">Stack</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length * <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> nums[i % nums.length];</span><br><span class="line">        <span class="keyword">while</span> (!s.isEmpty() &amp;&amp; num &gt; nums[s.peek()]) &#123;</span><br><span class="line">            res[s.pop()] = num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; nums.length) &#123;</span><br><span class="line">            s.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="739-Daily-Temperatures"><a href="#739-Daily-Temperatures" class="headerlink" title="739. Daily Temperatures"></a><a href="https://leetcode.com/problems/daily-temperatures/">739. Daily Temperatures</a></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] dailyTemperatures(<span class="type">int</span>[] T) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> T.length;</span><br><span class="line">    <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    Deque &lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; T[stack.peekFirst()] &lt; T[i]) &#123;</span><br><span class="line">            res[stack.peekFirst()] = i - stack.pollFirst();</span><br><span class="line">        &#125;</span><br><span class="line">        stack.offerFirst(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">        res[stack.pollFirst()] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Priority-Queue"><a href="#Priority-Queue" class="headerlink" title="Priority Queue"></a>Priority Queue</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MaxHeap</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List &lt;Integer&gt; heap;</span><br><span class="line"></span><br><span class="line">    MaxHeap() &#123;</span><br><span class="line">        <span class="built_in">this</span>.heap = <span class="keyword">new</span> <span class="title class_">ArrayList</span> &lt;Integer&gt; ();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//get max value</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">top</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> heap.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//insert new value</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        heap.add(val);</span><br><span class="line">        swim(heap.size() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//delete max value</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">last</span> <span class="operator">=</span> heap.size() - <span class="number">1</span>;</span><br><span class="line">        heap.set(<span class="number">0</span>, heap.get(last));</span><br><span class="line">        heap.remove(last);</span><br><span class="line">        sink(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//swim up</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swim</span> <span class="params">(<span class="type">int</span> pos)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (pos &gt;= <span class="number">1</span> &amp;&amp; heap.get(pos/<span class="number">2</span>) &lt; heap.get(pos)) &#123;</span><br><span class="line">            swap(pos/<span class="number">2</span>, pos);</span><br><span class="line">            pos /= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//sink down</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sink</span> <span class="params">(<span class="type">int</span> pos)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">2</span> * pos &lt; heap.size()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span> * pos;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; heap.size()-<span class="number">1</span> &amp;&amp; heap.get(i) &lt; heap.get(i+<span class="number">1</span>)) ++i;</span><br><span class="line">            <span class="keyword">if</span> (heap.get(pos) &gt;= heap.get(i)) <span class="keyword">break</span>;</span><br><span class="line">            swap(pos, i);</span><br><span class="line">            pos = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//swap</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span> <span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> heap.get(i);</span><br><span class="line">        heap.set(i, heap.get(j));</span><br><span class="line">        heap.set(j, temp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> heap.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="23-Merge-k-Sorted-Lists"><a href="#23-Merge-k-Sorted-Lists" class="headerlink" title="23. Merge k Sorted Lists"></a><a href="https://leetcode.com/problems/merge-k-sorted-lists/">23. Merge k Sorted Lists</a></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">mergeKLists</span><span class="params">(ListNode[] lists)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> lists.length;</span><br><span class="line">        <span class="keyword">if</span> (lists.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        PriorityQueue &lt;ListNode&gt; heap = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span> &lt;ListNode&gt; (n, (a, b) -&gt; a.val - b.val);</span><br><span class="line">        <span class="keyword">for</span> (ListNode list: lists) &#123;</span><br><span class="line">            <span class="keyword">if</span> (list != <span class="literal">null</span>) &#123;</span><br><span class="line">                heap.offer(list);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="keyword">while</span> (!heap.isEmpty()) &#123;</span><br><span class="line">            cur.next = heap.poll();</span><br><span class="line">            cur = cur.next;</span><br><span class="line">            <span class="keyword">if</span> (cur.next != <span class="literal">null</span>) &#123;</span><br><span class="line">                heap.offer(cur.next);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="218-The-Skyline-Problem💫"><a href="#218-The-Skyline-Problem💫" class="headerlink" title="218. The Skyline Problem💫"></a><a href="https://leetcode.com/problems/the-skyline-problem/">218. The Skyline Problem</a>💫</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">getSkyline</span><span class="params">(<span class="type">int</span>[][] buildings)</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    <span class="comment">// [height, right_pos] in pq. Descending order</span></span><br><span class="line">    PriorityQueue &lt;<span class="type">int</span>[]&gt; max_heap = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="keyword">new</span> <span class="title class_">Comparator</span> &lt;<span class="type">int</span>[]&gt; ()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] b1, <span class="type">int</span>[] b2)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (b1[<span class="number">0</span>] &gt; b2[<span class="number">0</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (b1[<span class="number">0</span>] &lt; b2[<span class="number">0</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> b2[<span class="number">0</span>] - b1[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, len = buildings.length;</span><br><span class="line">    <span class="type">int</span> cur_x, cur_h;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt; len || !max_heap.isEmpty()) &#123;</span><br><span class="line">        <span class="type">int</span>[] top = max_heap.peek();</span><br><span class="line">        <span class="keyword">if</span> (max_heap.isEmpty() || i &lt; len &amp;&amp; buildings[i][<span class="number">0</span>] &lt;= top[<span class="number">1</span>]) &#123;</span><br><span class="line">            cur_x = buildings[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">while</span> (i &lt; len &amp;&amp; cur_x == buildings[i][<span class="number">0</span>]) &#123;</span><br><span class="line">                max_heap.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;buildings[i][<span class="number">2</span>], buildings[i][<span class="number">1</span>]&#125;);</span><br><span class="line">                i += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            top = max_heap.peek();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cur_x = top[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">while</span> (!max_heap.isEmpty() &amp;&amp; cur_x &gt;= top[<span class="number">1</span>]) &#123;</span><br><span class="line">                max_heap.poll();</span><br><span class="line">                top = max_heap.peek();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cur_h = max_heap.isEmpty()? <span class="number">0</span>: top[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">cur_size</span> <span class="operator">=</span> ans.size();</span><br><span class="line">        <span class="keyword">if</span> (ans.isEmpty() || cur_h != ans.get(cur_size-<span class="number">1</span>).get(<span class="number">1</span>)) &#123;</span><br><span class="line">            List &lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">            list.add(cur_x); list.add(cur_h);</span><br><span class="line">            ans.add(list);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Deque"><a href="#Deque" class="headerlink" title="Deque"></a>Deque</h4><h5 id="239-Sliding-Window-Maximum💫"><a href="#239-Sliding-Window-Maximum💫" class="headerlink" title="239. Sliding Window Maximum💫"></a><a href="https://leetcode.com/problems/sliding-window-maximum/">239. Sliding Window Maximum</a>💫</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] maxSlidingWindow(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    Deque &lt;Integer&gt; dq = <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line">    <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[len-k+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!dq.isEmpty() &amp;&amp; dq.getFirst() == i-k) &#123;</span><br><span class="line">            dq.pollFirst();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!dq.isEmpty() &amp;&amp; nums[dq.getLast()] &lt; nums[i]) &#123;</span><br><span class="line">            dq.pollLast();</span><br><span class="line">        &#125;</span><br><span class="line">        dq.offerLast(i);</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= k-<span class="number">1</span>) &#123;</span><br><span class="line">            ans[i-k+<span class="number">1</span>] = nums[dq.getFirst()];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
        <category>Data Structure</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Solutions (11): Data Structure - Hashtable</title>
    <url>/2021/07/10/Leetcode-11-Data-Structure-HashTable/</url>
    <content><![CDATA[<p>These Leetcode problems are related with <em>Hashtable</em> :</p>
<h4 id="1-Two-Sum"><a href="#1-Two-Sum" class="headerlink" title="1. Two Sum"></a><a href="https://leetcode.com/problems/two-sum/">1. Two Sum</a></h4><span id="more"></span>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    HashMap &lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(target - nums[i])) &#123;</span><br><span class="line">            <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">            ans[<span class="number">0</span>] = map.get(target - nums[i]);</span><br><span class="line">            ans[<span class="number">1</span>] = i;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(nums[i], i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="128-Longest-Consecutive-Sequence"><a href="#128-Longest-Consecutive-Sequence" class="headerlink" title="128. Longest Consecutive Sequence"></a><a href="https://leetcode.com/problems/longest-consecutive-sequence/">128. Longest Consecutive Sequence</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestConsecutive</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    HashSet &lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num: nums) &#123;</span><br><span class="line">        set.add(num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!set.isEmpty()) &#123;</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">value</span> <span class="operator">=</span> set.iterator();</span><br><span class="line">        <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> (<span class="type">int</span>)value.next();</span><br><span class="line">        <span class="type">int</span> <span class="variable">next</span> <span class="operator">=</span> cur + <span class="number">1</span>, prev = cur - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (set.contains(next)) &#123;</span><br><span class="line">            set.remove(next);</span><br><span class="line">            next += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (set.contains(prev)) &#123;</span><br><span class="line">            set.remove(prev);</span><br><span class="line">            prev -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = Math.max(ans, next - prev - <span class="number">1</span>);</span><br><span class="line">        set.remove(cur);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="149-Max-Points-on-a-Line"><a href="#149-Max-Points-on-a-Line" class="headerlink" title="149. Max Points on a Line"></a><a href="https://leetcode.com/problems/max-points-on-a-line/">149. Max Points on a Line</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxPoints</span><span class="params">(<span class="type">int</span>[][] points)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">max_count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    HashMap &lt;String, Integer&gt; hash = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; points.length; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">same</span> <span class="operator">=</span> <span class="number">1</span>, same_y = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; points.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (points[i][<span class="number">1</span>] == points[j][<span class="number">1</span>]) &#123;</span><br><span class="line">                same_y += <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (points[i][<span class="number">0</span>] == points[j][<span class="number">0</span>]) &#123;</span><br><span class="line">                    same += <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">dx</span> <span class="operator">=</span> points[i][<span class="number">0</span>] - points[j][<span class="number">0</span>];</span><br><span class="line">                <span class="type">int</span> <span class="variable">dy</span> <span class="operator">=</span> points[i][<span class="number">1</span>] - points[j][<span class="number">1</span>];</span><br><span class="line">                <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> getArray(dx, dy);</span><br><span class="line">                hash.put(key, hash.getOrDefault(key, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        max_count = Math.max(max_count, same_y);</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry &lt;String, Integer&gt; entry: hash.entrySet()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">            max_count = Math.max(max_count, same + value);</span><br><span class="line">        &#125;</span><br><span class="line">        hash.clear();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max_count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> String <span class="title function_">getArray</span><span class="params">(<span class="type">int</span> dx, <span class="type">int</span> dy)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (dx == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;[&quot;</span>+ Integer.toString(<span class="number">0</span>) + <span class="string">&quot;,&quot;</span> + Integer.toString(<span class="number">1</span>) + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">gcd</span> <span class="operator">=</span> getGcd(dx, dy);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;[&quot;</span>+ Integer.toString(dx/gcd) + <span class="string">&quot;,&quot;</span> + Integer.toString(dy/gcd) + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getGcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> b == <span class="number">0</span>? a: getGcd(b, a%b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="217-Contains-Duplicate"><a href="#217-Contains-Duplicate" class="headerlink" title="217. Contains Duplicate"></a><a href="https://leetcode.com/problems/contains-duplicate/">217. Contains Duplicate</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HashSet O(n) O(n)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsDuplicate</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    HashSet &lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num: nums) &#123;</span><br><span class="line">        <span class="keyword">if</span> (set.contains(num)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        set.add(num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>OR</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Sort O(nlogn)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsDuplicate</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] == nums[i + <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>OR</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Basic O(n^2)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsDuplicate</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == nums[j]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="332-Reconstruct-Itinerary"><a href="#332-Reconstruct-Itinerary" class="headerlink" title="332. Reconstruct Itinerary"></a><a href="https://leetcode.com/problems/reconstruct-itinerary/">332. Reconstruct Itinerary</a></h4><p>@<a href="https://leetcode.com/problems/reconstruct-itinerary/discuss/78766/Share-my-solution">dietpepsi</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    LinkedList &lt;String&gt; path;</span><br><span class="line">    HashMap &lt;String, PriorityQueue&lt;String&gt;&gt; flights;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">findItinerary</span><span class="params">(List&lt;List&lt;String&gt;&gt; tickets)</span> &#123;</span><br><span class="line">        path = <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line">        flights = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (tickets.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> path;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (List&lt;String&gt; ticket: tickets) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">from</span> <span class="operator">=</span> ticket.get(<span class="number">0</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">to</span> <span class="operator">=</span> ticket.get(<span class="number">1</span>);</span><br><span class="line">            flights.putIfAbsent(from, <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>());</span><br><span class="line">            flights.get(from).offer(to);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        dfs(<span class="string">&quot;JFK&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> path;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(String from)</span> &#123;</span><br><span class="line">        PriorityQueue&lt;String&gt; toList = flights.get(from);</span><br><span class="line">        <span class="keyword">while</span> (toList != <span class="literal">null</span> &amp;&amp; !toList.isEmpty()) &#123;</span><br><span class="line">            dfs(toList.poll());</span><br><span class="line">        &#125;</span><br><span class="line">        path.addFirst(from);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="525-Contiguous-Array🌟"><a href="#525-Contiguous-Array🌟" class="headerlink" title="525. Contiguous Array🌟"></a><a href="https://leetcode.com/problems/contiguous-array/">525. Contiguous Array</a>🌟</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findMaxLength</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        HashMap &lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>, len = nums.length, max = <span class="number">0</span>;</span><br><span class="line">        map.put(<span class="number">0</span>, -<span class="number">1</span>); <span class="comment">// if we haven&#x27;t included any numbers in the given array, the number of 1s - the number of 0s equals to 0, and the index we can get this key is -1. @fredyzhang</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                sum += -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sum += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(sum)) &#123;</span><br><span class="line">                max = Math.max(i - map.get(sum), max);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                map.put(sum, i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="594-Longest-Harmonious-Subsequence"><a href="#594-Longest-Harmonious-Subsequence" class="headerlink" title="594. Longest Harmonious Subsequence"></a><a href="https://leetcode.com/problems/longest-harmonious-subsequence/">594. Longest Harmonious Subsequence</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findLHS</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    HashMap &lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num: nums) &#123;</span><br><span class="line">        map.put(num, map.getOrDefault(num, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> key: map.keySet()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(key + <span class="number">1</span>)) &#123;</span><br><span class="line">            res = Math.max(res, map.get(key) + map.get(key + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h4><p>An implementation of Hashtable:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HashTable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> LinkedList &lt;Object&gt; [] hash_table;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HashTable</span> <span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.hash_table = <span class="keyword">new</span> <span class="title class_">LinkedList</span> [size];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            hash_table[i] = <span class="keyword">new</span> <span class="title class_">LinkedList</span> &lt;Object&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">key</span> <span class="operator">=</span> obj.hashCode() % hash_table.length;</span><br><span class="line">        <span class="keyword">return</span> key &lt; <span class="number">0</span>? key + hash_table.length: key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">hash_value</span> <span class="operator">=</span> <span class="built_in">this</span>.hash(obj);</span><br><span class="line">        LinkedList &lt;Object&gt; slot = hash_table[hash_value];</span><br><span class="line">        <span class="keyword">for</span> (Object o: slot) &#123;</span><br><span class="line">            <span class="keyword">if</span> (o.equals(obj)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">insert</span> <span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (contains(obj)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">hash_value</span> <span class="operator">=</span> <span class="built_in">this</span>.hash(obj);</span><br><span class="line">        LinkedList &lt;Object&gt; slot = hash_table[hash_value];</span><br><span class="line">        slot.add(obj);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span> <span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">hash_value</span> <span class="operator">=</span> <span class="built_in">this</span>.hash(obj);</span><br><span class="line">        LinkedList &lt;Object&gt; slot = hash_table[hash_value];</span><br><span class="line">        <span class="keyword">for</span> (Object o: slot) &#123;</span><br><span class="line">            <span class="keyword">if</span> (o.equals(obj)) &#123;</span><br><span class="line">                slot.remove(o);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
        <category>Data Structure</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Solutions (12): String</title>
    <url>/2021/08/08/Leetcode-12-String/</url>
    <content><![CDATA[<p>These Leetcode problems are related with <em>String</em> :</p>
<h4 id="5-Longest-Palindromic-Substring"><a href="#5-Longest-Palindromic-Substring" class="headerlink" title="5. Longest Palindromic Substring"></a><a href="https://leetcode.com/problems/longest-palindromic-substring/">5. Longest Palindromic Substring</a></h4><span id="more"></span>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">longestPalindrome</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> validPalindrome(s, i, i);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> validPalindrome(s, i, i + <span class="number">1</span>);</span><br><span class="line">        res = s1.length() &gt; res.length()? s1: res;</span><br><span class="line">        res = s2.length() &gt; res.length()? s2: res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">validPalindrome</span><span class="params">(String s, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; j &lt; s.length() &amp;&amp; s.charAt(i) == s.charAt(j)) &#123;</span><br><span class="line">        i--; j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.substring(i + <span class="number">1</span>, j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="28-Implement-strStr-💫"><a href="#28-Implement-strStr-💫" class="headerlink" title="28. Implement strStr()💫"></a><a href="https://leetcode.com/problems/implement-strstr/">28. Implement strStr()</a>💫</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Knuth–Morris–Pratt(KMP) algorithm</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">strStr</span><span class="params">(String haystack, String needle)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> -<span class="number">1</span>, n = haystack.length(), p = needle.length();</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] next = <span class="keyword">new</span> <span class="title class_">int</span>[p];</span><br><span class="line">        Arrays.fill(next, -<span class="number">1</span>);</span><br><span class="line">        calNext(needle, next);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (k &gt; -<span class="number">1</span> &amp;&amp; needle.charAt(k+<span class="number">1</span>) != haystack.charAt(i)) &#123;</span><br><span class="line">                k = next[k];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (needle.charAt(k+<span class="number">1</span>) == haystack.charAt(i)) &#123;</span><br><span class="line">                k += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (k == p - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> i - p + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">calNext</span><span class="params">(String needle, <span class="type">int</span>[] next)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>, p = -<span class="number">1</span>; j &lt; needle.length(); j++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (p &gt; -<span class="number">1</span> &amp;&amp; needle.charAt(p+<span class="number">1</span>) != needle.charAt(j)) &#123;</span><br><span class="line">                p = next[p];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (needle.charAt(p+<span class="number">1</span>) == needle.charAt(j)) &#123;</span><br><span class="line">                p += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            next[j] = p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="205-Isomorphic-Strings"><a href="#205-Isomorphic-Strings" class="headerlink" title="205. Isomorphic Strings"></a><a href="https://leetcode.com/problems/isomorphic-strings/">205. Isomorphic Strings</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isIsomorphic</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> s.length(), n = t.length();</span><br><span class="line">    <span class="keyword">if</span> (m != n) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span>[] s_index = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">127</span>];</span><br><span class="line">    <span class="type">int</span>[] t_index = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">127</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">sc</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">        <span class="type">char</span> <span class="variable">tc</span> <span class="operator">=</span> t.charAt(i);</span><br><span class="line">        <span class="keyword">if</span> (s_index[sc] != t_index[tc]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        s_index[sc] = t_index[tc] = i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="227-Basic-Calculator-II💫"><a href="#227-Basic-Calculator-II💫" class="headerlink" title="227. Basic Calculator II💫"></a><a href="https://leetcode.com/problems/basic-calculator-ii/">227. Basic Calculator II</a>💫</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">calculate</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; <span class="type">char</span> <span class="variable">op</span> <span class="operator">=</span> <span class="string">&#x27;+&#x27;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; s.length()) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; s.length() &amp;&amp; Character.isDigit(s.charAt(i))) &#123;</span><br><span class="line">            n = <span class="number">10</span> * n + (s.charAt(i) - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            i += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">switch</span> (op) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>: left += right; right = n; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>: left += right; right = -n; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>: right *= n; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>: right /= n; <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; s.length() &amp;&amp; !Character.isDigit(s.charAt(i))) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) != <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">                op = s.charAt(i);</span><br><span class="line">            &#125;</span><br><span class="line">            i += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left + right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="242-Valid-Anagram"><a href="#242-Valid-Anagram" class="headerlink" title="242. Valid Anagram"></a><a href="https://leetcode.com/problems/valid-anagram/">242. Valid Anagram</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAnagram</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> s.length(), n = t.length();</span><br><span class="line">    <span class="keyword">if</span> (m != n) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span>[] letters = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">sc</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">        <span class="type">char</span> <span class="variable">tc</span> <span class="operator">=</span> t.charAt(i);</span><br><span class="line">        letters[sc - <span class="string">&#x27;a&#x27;</span>] += <span class="number">1</span>;</span><br><span class="line">        letters[tc - <span class="string">&#x27;a&#x27;</span>] -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (letters[i] != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="409-Longest-Palindrome"><a href="#409-Longest-Palindrome" class="headerlink" title="409. Longest Palindrome"></a><a href="https://leetcode.com/problems/longest-palindrome/">409. Longest Palindrome</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestPalindrome</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="type">boolean</span>[] used = <span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">52</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> <span class="number">0</span>, res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">        <span class="keyword">if</span> (c - <span class="string">&#x27;A&#x27;</span> &gt;= <span class="number">0</span> &amp;&amp; c - <span class="string">&#x27;Z&#x27;</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            pos = c - <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pos = c - <span class="string">&#x27;a&#x27;</span> + <span class="number">26</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (used[pos]) &#123;</span><br><span class="line">            res += <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        used[pos] = !used[pos];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">boolean</span> u: used) &#123;</span><br><span class="line">        <span class="keyword">if</span> (u) &#123; <span class="keyword">return</span> res + <span class="number">1</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="647-Palindromic-Substrings"><a href="#647-Palindromic-Substrings" class="headerlink" title="647. Palindromic Substrings"></a><a href="https://leetcode.com/problems/palindromic-substrings/">647. Palindromic Substrings</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countSubstrings</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>, len = s.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            cnt += extend(i, i, s); <span class="comment">//odd</span></span><br><span class="line">            cnt += extend(i, i+<span class="number">1</span>, s); <span class="comment">//even</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">extend</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (r &lt; s.length() &amp;&amp; l &gt;= <span class="number">0</span> &amp;&amp; s.charAt(r) == s.charAt(l)) &#123;</span><br><span class="line">            r += <span class="number">1</span>;</span><br><span class="line">            l -= <span class="number">1</span>;</span><br><span class="line">            cnt += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="696-Count-Binary-Substrings"><a href="#696-Count-Binary-Substrings" class="headerlink" title="696. Count Binary Substrings"></a><a href="https://leetcode.com/problems/count-binary-substrings/">696. Count Binary Substrings</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countBinarySubstrings</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> s.length(), cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="number">1</span>, pre = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.charAt(i) == s.charAt(i-<span class="number">1</span>)) &#123;</span><br><span class="line">            cur += <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pre &gt;= cur) &#123;</span><br><span class="line">            cnt += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
        <category>String</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Solutions (13): Data Structure - LinkedList</title>
    <url>/2021/09/05/Leetcode-13-Data-Structure-LinkedList/</url>
    <content><![CDATA[<p>These Leetcode problems are related with <em>LinkedList</em> :</p>
<h4 id="19-Remove-Nth-Node-From-End-of-List"><a href="#19-Remove-Nth-Node-From-End-of-List" class="headerlink" title="19. Remove Nth Node From End of List"></a><a href="https://leetcode.com/problems/remove-nth-node-from-end-of-list/">19. Remove Nth Node From End of List</a></h4><span id="more"></span>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">removeNthFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">    dummy.next = head;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head, slow = dummy;</span><br><span class="line">    <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        fast = fast.next;</span><br><span class="line">        n--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (fast != <span class="literal">null</span>) &#123;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        fast = fast.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">del</span> <span class="operator">=</span> slow.next;</span><br><span class="line">    slow.next = del.next;</span><br><span class="line">    del.next = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="21-Merge-Two-Sorted-Lists"><a href="#21-Merge-Two-Sorted-Lists" class="headerlink" title="21. Merge Two Sorted Lists"></a><a href="https://leetcode.com/problems/merge-two-sorted-lists/">21. Merge Two Sorted Lists</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> ListNode <span class="title function_">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>), node = dummy;        </span><br><span class="line">    <span class="keyword">while</span> (l1 != <span class="literal">null</span> &amp;&amp; l2 != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (l1.val &lt;= l2.val) &#123;</span><br><span class="line">            node.next = l1;</span><br><span class="line">            l1 = l1.next;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (l1. val &gt; l2.val) &#123;</span><br><span class="line">            node.next = l2;</span><br><span class="line">            l2 = l2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        node = node.next;</span><br><span class="line">    &#125;</span><br><span class="line">    node.next = l1 == <span class="literal">null</span>? l2: l1;</span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>OR</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (l1 == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> l2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (l2 == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> l1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (l1.val &lt;= l2.val) &#123;</span><br><span class="line">        l1.next = mergeTwoLists(l1.next, l2);</span><br><span class="line">        <span class="keyword">return</span> l1;</span><br><span class="line">    &#125;</span><br><span class="line">    l2.next = mergeTwoLists(l1, l2.next);</span><br><span class="line">    <span class="keyword">return</span> l2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="24-Swap-Nodes-in-Pairs"><a href="#24-Swap-Nodes-in-Pairs" class="headerlink" title="24. Swap Nodes in Pairs"></a><a href="https://leetcode.com/problems/swap-nodes-in-pairs/">24. Swap Nodes in Pairs</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">swapPairs</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">    dummy.next = head;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head, pre = dummy;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="literal">null</span> &amp;&amp; cur.next != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">then</span> <span class="operator">=</span> cur.next;</span><br><span class="line">        cur.next = then.next;</span><br><span class="line">        then.next = cur;</span><br><span class="line">        pre.next = then;</span><br><span class="line">        pre = cur;</span><br><span class="line">        cur = cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="83-Remove-Duplicates-from-Sorted-List"><a href="#83-Remove-Duplicates-from-Sorted-List" class="headerlink" title="83. Remove Duplicates from Sorted List"></a><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-list/">83. Remove Duplicates from Sorted List</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">deleteDuplicates</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">node</span> <span class="operator">=</span> head, pre = head;</span><br><span class="line">    <span class="keyword">while</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">        node = node.next;</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="literal">null</span> &amp;&amp; pre.val == node.val) &#123;</span><br><span class="line">            pre.next = node.next;</span><br><span class="line">            node.next = <span class="literal">null</span>;</span><br><span class="line">            node = pre;</span><br><span class="line">        &#125;</span><br><span class="line">        pre = node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="148-Sort-List"><a href="#148-Sort-List" class="headerlink" title="148. Sort List"></a><a href="https://leetcode.com/problems/sort-list/">148. Sort List</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">sortList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">null</span> || head.next == <span class="literal">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head, fast = head.next;</span><br><span class="line">    <span class="keyword">while</span> (fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>) &#123;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">    fast = slow.next;</span><br><span class="line">    slow.next = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> mergeSort(sortList(head), sortList(fast));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ListNode <span class="title function_">mergeSort</span><span class="params">(ListNode l1, ListNode l2)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>), p = dummy;</span><br><span class="line">    <span class="keyword">while</span> (l1 != <span class="literal">null</span> &amp;&amp; l2 != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (l2.val &lt;= l1.val) &#123;</span><br><span class="line">            p.next = l2;</span><br><span class="line">            l2 = l2.next;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (l1.val &lt; l2.val) &#123;</span><br><span class="line">            p.next = l1;</span><br><span class="line">            l1 = l1.next;</span><br><span class="line">        &#125;</span><br><span class="line">        p = p.next;</span><br><span class="line">    &#125;</span><br><span class="line">    p.next = l1 == <span class="literal">null</span>? l2: l1;</span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="160-Intersection-of-Two-Linked-Lists"><a href="#160-Intersection-of-Two-Linked-Lists" class="headerlink" title="160. Intersection of Two Linked Lists"></a><a href="https://leetcode.com/problems/intersection-of-two-linked-lists/">160. Intersection of Two Linked Lists</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">l1</span> <span class="operator">=</span> headA, l2 = headB;</span><br><span class="line">    <span class="keyword">while</span> (l1 != l2) &#123;</span><br><span class="line">        l1 = l1 == <span class="literal">null</span>? headB: l1.next;</span><br><span class="line">        l2 = l2 == <span class="literal">null</span>? headA: l2.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="206-Reverse-Linked-List"><a href="#206-Reverse-Linked-List" class="headerlink" title="206. Reverse Linked List"></a><a href="https://leetcode.com/problems/reverse-linked-list/">206. Reverse Linked List</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>, cur = head;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">next</span> <span class="operator">=</span> cur.next;</span><br><span class="line">        cur.next = pre;</span><br><span class="line">        pre = cur;</span><br><span class="line">        cur = next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pre;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>OR</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> reverse(head, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> ListNode <span class="title function_">reverse</span><span class="params">(ListNode cur, ListNode pre)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (cur == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">next</span> <span class="operator">=</span> cur.next;</span><br><span class="line">    cur.next = pre;</span><br><span class="line">    <span class="keyword">return</span> reverse(next, cur);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="234-Palindrome-Linked-List"><a href="#234-Palindrome-Linked-List" class="headerlink" title="234. Palindrome Linked List"></a><a href="https://leetcode.com/problems/palindrome-linked-list/">234. Palindrome Linked List</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">null</span> || head.next == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head, slow = head;</span><br><span class="line">    <span class="keyword">while</span> (fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>) &#123;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (fast != <span class="literal">null</span>) &#123;</span><br><span class="line">        slow.next = reverse(slow.next);</span><br><span class="line">        slow = slow.next;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        slow = reverse(slow);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (slow != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (head.val != slow.val) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        head = head.next;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> ListNode <span class="title function_">reverse</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">null</span> || head.next == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> head, cur = head.next;</span><br><span class="line">    pre.next = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">then</span> <span class="operator">=</span> cur.next;</span><br><span class="line">        cur.next = pre;</span><br><span class="line">        pre = cur;</span><br><span class="line">        cur = then;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pre;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="328-Odd-Even-Linked-List"><a href="#328-Odd-Even-Linked-List" class="headerlink" title="328. Odd Even Linked List"></a><a href="https://leetcode.com/problems/odd-even-linked-list/">328. Odd Even Linked List</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">oddEvenList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">null</span> || head.next == <span class="literal">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">odd</span> <span class="operator">=</span> head, even = head.next, node = head.next.next, evenhead = even;</span><br><span class="line">    <span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pos % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            even.next = node;</span><br><span class="line">            even = even.next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            odd.next = node;</span><br><span class="line">            odd = odd.next;</span><br><span class="line">        &#125;</span><br><span class="line">        node = node.next;</span><br><span class="line">        pos++;</span><br><span class="line">    &#125;</span><br><span class="line">    odd.next = evenhead;</span><br><span class="line">    even.next = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="445-Add-Two-Numbers-II"><a href="#445-Add-Two-Numbers-II" class="headerlink" title="445. Add Two Numbers II"></a><a href="https://leetcode.com/problems/add-two-numbers-ii/">445. Add Two Numbers II</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> &#123;</span><br><span class="line">    Stack &lt;Integer&gt; s1 = loadStack(l1);</span><br><span class="line">    Stack &lt;Integer&gt; s2 = loadStack(l2);</span><br><span class="line">    <span class="type">int</span> <span class="variable">carry</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">head</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span> (!s1.isEmpty() || !s2.isEmpty() || carry != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">v1</span> <span class="operator">=</span> s1.isEmpty()? <span class="number">0</span>: s1.pop();</span><br><span class="line">        <span class="type">int</span> <span class="variable">v2</span> <span class="operator">=</span> s2.isEmpty()? <span class="number">0</span>: s2.pop();</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> v1 + v2 + carry;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(num % <span class="number">10</span>);</span><br><span class="line">        carry = num / <span class="number">10</span>;</span><br><span class="line">        node.next = head.next;</span><br><span class="line">        head.next = node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> Stack <span class="title function_">loadStack</span><span class="params">(ListNode list)</span> &#123;</span><br><span class="line">    Stack &lt;Integer&gt; s = <span class="keyword">new</span> <span class="title class_">Stack</span>();</span><br><span class="line">    <span class="keyword">while</span> (list != <span class="literal">null</span>) &#123;</span><br><span class="line">        s.push(list.val);</span><br><span class="line">        list = list.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
        <category>Data Structure</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Solutions (14): Data Structure - Tree</title>
    <url>/2021/10/31/Leetcode-14-Data-Structure-Tree/</url>
    <content><![CDATA[<p>These Leetcode problems are related with <em>Tree</em> :</p>
<h4 id="99-Recover-Binary-Search-Tree"><a href="#99-Recover-Binary-Search-Tree" class="headerlink" title="99. Recover Binary Search Tree"></a><a href="https://leetcode.com/problems/recover-binary-search-tree/">99. Recover Binary Search Tree</a></h4><span id="more"></span>
<p>@<a href="https://leetcode.com/problems/recover-binary-search-tree/discuss/32562/Share-my-solutions-and-detailed-explanation-with-recursiveiterative-in-order-traversal-and-Morris-traversal">myfavcat123</a></p>
<blockquote>
<p>Morris-traversal is similar to recursive&#x2F;iterative traversal, but we need to modify the tree structure during the traversal. before we visiting the left tree of a root, we will build a back-edge between rightmost node in left tree and the root. So we can go back to the root node after we are done with the left tree. Then we locate the rightmost node in left subtree again, cut the back-edge, recover the tree structure and start visit right subtree. The detection of two incorrect TreeNodes is similar to iterative&#x2F;recursive in-order traversal. We don’t use extra data structure here, so the space complexity is reduced to O(1) and the time complexity will be O(n)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">recoverTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="comment">//Morris-traversal</span></span><br><span class="line"></span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">first</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">second</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">pred</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="comment">//rightmost node in left tree</span></span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">curr</span> <span class="operator">=</span> root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(curr != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="comment">//for each node, we compare it with prev node as we did in in-order-traversal</span></span><br><span class="line">        <span class="keyword">if</span>(prev != <span class="literal">null</span> &amp;&amp; curr.val &lt;= prev.val)&#123;</span><br><span class="line">            <span class="keyword">if</span>(first == <span class="literal">null</span>) first = prev;</span><br><span class="line">            second = curr;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(curr.left != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//got left tree, then let&#x27;s locate its rightmost node in left tree</span></span><br><span class="line">            pred = curr.left;</span><br><span class="line">            <span class="comment">//we may have visited the left tree before, and connect the rightmost node with curr node (root node)</span></span><br><span class="line">            <span class="keyword">while</span>(pred.right != <span class="literal">null</span> &amp;&amp; pred.right != curr)&#123;</span><br><span class="line">                pred = pred.right;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(pred.right == curr)&#123;</span><br><span class="line">                <span class="comment">//if this left tree has been visited before, then we are done with it</span></span><br><span class="line">                <span class="comment">//cut the connection with currNode and start visit curr&#x27;s right tree</span></span><br><span class="line">                pred.right = <span class="literal">null</span>;</span><br><span class="line">                prev = curr;</span><br><span class="line">                curr = curr.right;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//if this left tree has not been visited before, then we create a back edge from rightmost node</span></span><br><span class="line">                <span class="comment">// to curr node, so we can return to the start point after done the left tree</span></span><br><span class="line">                pred.right = curr;</span><br><span class="line">                curr = curr.left;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//no left tree, then just visit its right tree</span></span><br><span class="line">            prev = curr;</span><br><span class="line">            curr = curr.right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> first.val;</span><br><span class="line">    first.val = second.val;</span><br><span class="line">    second.val = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="94-Binary-Tree-Inorder-Traversal"><a href="#94-Binary-Tree-Inorder-Traversal" class="headerlink" title="94. Binary Tree Inorder Traversal"></a><a href="https://leetcode.com/problems/binary-tree-inorder-traversal/">94. Binary Tree Inorder Traversal</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    List &lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> list;</span><br><span class="line">    getInorder(root, list);</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">getInorder</span><span class="params">(TreeNode node, List &lt;Integer&gt; list)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    getInorder(node.left, list);</span><br><span class="line">    list.add(node.val);</span><br><span class="line">    getInorder(node.right, list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>OR</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    Stack &lt;TreeNode&gt; s = <span class="keyword">new</span> <span class="title class_">Stack</span>();</span><br><span class="line">    List &lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    <span class="keyword">while</span> (root != <span class="literal">null</span> || !s.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">while</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">            s.push(root);</span><br><span class="line">            root = root.left;</span><br><span class="line">        &#125;</span><br><span class="line">        root = s.pop();</span><br><span class="line">        list.add(root.val);</span><br><span class="line">        root = root.right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="101-Symmetric-Tree"><a href="#101-Symmetric-Tree" class="headerlink" title="101. Symmetric Tree"></a><a href="https://leetcode.com/problems/symmetric-tree/">101. Symmetric Tree</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSymmetric</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> root == <span class="literal">null</span>? <span class="literal">true</span>: isSymmetric(root.left, root.right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isSymmetric</span><span class="params">(TreeNode left, TreeNode right)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (left == <span class="literal">null</span> &amp;&amp; right == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (left == <span class="literal">null</span> || right == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (left.val != right.val) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> isSymmetric(left.left, right.right) &amp;&amp; isSymmetric(left.right, right.left);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="104-Maximum-Depth-of-Binary-Tree"><a href="#104-Maximum-Depth-of-Binary-Tree" class="headerlink" title="104. Maximum Depth of Binary Tree"></a><a href="https://leetcode.com/problems/maximum-depth-of-binary-tree/">104. Maximum Depth of Binary Tree</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + Math.max(maxDepth(root.right), maxDepth(root.left));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="105-Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal💫"><a href="#105-Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal💫" class="headerlink" title="105. Construct Binary Tree from Preorder and Inorder Traversal💫"></a><a href="https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/">105. Construct Binary Tree from Preorder and Inorder Traversal</a>💫</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">buildTree</span><span class="params">(<span class="type">int</span>[] preorder, <span class="type">int</span>[] inorder)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (preorder.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    HashMap &lt;Integer, Integer&gt; inorder_hash = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; inorder.length; i++) &#123;</span><br><span class="line">        inorder_hash.put(inorder[i], i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> buildTreeHelper(inorder_hash, preorder, <span class="number">0</span>, preorder.length - <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> TreeNode <span class="title function_">buildTreeHelper</span><span class="params">(HashMap &lt;Integer, Integer&gt; inorder_hash, <span class="type">int</span>[] preorder, <span class="type">int</span> left_in_start, <span class="type">int</span> left_in_end, <span class="type">int</span> root_pre)</span> &#123;</span><br><span class="line">    <span class="comment">//left_in_start: start index of left subtree in inorder, left_in_end: end index of left subtree in inorder, root_pre: root index in preorder</span></span><br><span class="line">    <span class="keyword">if</span> (left_in_start &gt; left_in_end) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> preorder[root_pre], root_in = inorder_hash.get(val), leftLen = root_in - left_in_start;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line">    node.left = buildTreeHelper(inorder_hash, preorder, left_in_start, root_in - <span class="number">1</span>, root_pre + <span class="number">1</span>);</span><br><span class="line">    node.right = buildTreeHelper(inorder_hash, preorder, root_in + <span class="number">1</span>, left_in_end, root_pre + leftLen + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="108-Convert-Sorted-Array-to-Binary-Search-Tree"><a href="#108-Convert-Sorted-Array-to-Binary-Search-Tree" class="headerlink" title="108. Convert Sorted Array to Binary Search Tree"></a><a href="https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/">108. Convert Sorted Array to Binary Search Tree</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">sortedArrayToBST</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> createTree(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> TreeNode <span class="title function_">createTree</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (start &gt; end) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> end - (end - start) / <span class="number">2</span>;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">node</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(nums[mid]);</span><br><span class="line">    node.left = createTree(nums, start, mid - <span class="number">1</span>);</span><br><span class="line">    node.right = createTree(nums, mid + <span class="number">1</span>, end);</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="109-Convert-Sorted-List-to-Binary-Search-Tree"><a href="#109-Convert-Sorted-List-to-Binary-Search-Tree" class="headerlink" title="109. Convert Sorted List to Binary Search Tree"></a><a href="https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree/">109. Convert Sorted List to Binary Search Tree</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">sortedListToBST</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getBST(head, <span class="literal">null</span>);        </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> TreeNode <span class="title function_">getBST</span><span class="params">(ListNode start, ListNode end)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (start == end) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> start, fast = start;</span><br><span class="line">    <span class="keyword">while</span> (fast != end &amp;&amp; fast.next != end) &#123;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(slow.val);</span><br><span class="line">    node.left = getBST(start, slow);</span><br><span class="line">    node.right = getBST(slow.next, end);</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="110-Balanced-Binary-Tree"><a href="#110-Balanced-Binary-Tree" class="headerlink" title="110. Balanced Binary Tree"></a><a href="https://leetcode.com/problems/balanced-binary-tree/">110. Balanced Binary Tree</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isBalanced</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> MaxDepth(root) == -<span class="number">1</span>? <span class="literal">false</span>: <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">MaxDepth</span><span class="params">(TreeNode node)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> MaxDepth(node.left);</span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> MaxDepth(node.right);</span><br><span class="line">    <span class="keyword">if</span> (left == -<span class="number">1</span> || right == -<span class="number">1</span> || Math.abs(left - right) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + Math.max(left, right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="111-Minimum-Depth-of-Binary-Tree"><a href="#111-Minimum-Depth-of-Binary-Tree" class="headerlink" title="111. Minimum Depth of Binary Tree"></a><a href="https://leetcode.com/problems/minimum-depth-of-binary-tree/">111. Minimum Depth of Binary Tree</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (root.left == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + minDepth(root.right);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root.right == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + minDepth(root.left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + Math.min(minDepth(root.left), minDepth(root.right));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="112-Path-Sum"><a href="#112-Path-Sum" class="headerlink" title="112. Path Sum"></a><a href="https://leetcode.com/problems/path-sum/">112. Path Sum</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasPathSum</span><span class="params">(TreeNode root, <span class="type">int</span> targetSum)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    targetSum -= root.val;</span><br><span class="line">    <span class="keyword">if</span> (targetSum == <span class="number">0</span> &amp;&amp; root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hasPathSum(root.left, targetSum) || hasPathSum(root.right, targetSum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="144-Binary-Tree-Preorder-Traversal"><a href="#144-Binary-Tree-Preorder-Traversal" class="headerlink" title="144. Binary Tree Preorder Traversal"></a><a href="https://leetcode.com/problems/binary-tree-preorder-traversal/">144. Binary Tree Preorder Traversal</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">preorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    Stack &lt;TreeNode&gt; s = <span class="keyword">new</span> <span class="title class_">Stack</span>();</span><br><span class="line">    s.push(root);</span><br><span class="line">    <span class="keyword">while</span> (!s.isEmpty()) &#123;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> s.pop();</span><br><span class="line">        ans.add(node.val);</span><br><span class="line">        <span class="keyword">if</span> (node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            s.push(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            s.push(node.left);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="145-Binary-Tree-Postorder-Traversal"><a href="#145-Binary-Tree-Postorder-Traversal" class="headerlink" title="145. Binary Tree Postorder Traversal"></a><a href="https://leetcode.com/problems/binary-tree-postorder-traversal/">145. Binary Tree Postorder Traversal</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">postorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    List &lt;Integer&gt; arr = <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> arr;</span><br><span class="line">    Stack &lt;TreeNode&gt; s = <span class="keyword">new</span> <span class="title class_">Stack</span>();</span><br><span class="line">    s.push(root);</span><br><span class="line">    <span class="keyword">while</span> (!s.isEmpty()) &#123;</span><br><span class="line">        root = s.pop();</span><br><span class="line">        arr.add(<span class="number">0</span>, root.val);</span><br><span class="line">        <span class="keyword">if</span> (root.left != <span class="literal">null</span>) s.push(root.left);</span><br><span class="line">        <span class="keyword">if</span> (root.right != <span class="literal">null</span>) s.push(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="208-Implement-Trie-Prefix-Tree"><a href="#208-Implement-Trie-Prefix-Tree" class="headerlink" title="208. Implement Trie (Prefix Tree)"></a><a href="https://leetcode.com/problems/implement-trie-prefix-tree/">208. Implement Trie (Prefix Tree)</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">TrieNode</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> isEnd;</span><br><span class="line">        TrieNode[] children;</span><br><span class="line">        TrieNode() &#123;</span><br><span class="line">            <span class="built_in">this</span>.isEnd = <span class="literal">false</span>;</span><br><span class="line">            <span class="built_in">this</span>.children = <span class="keyword">new</span> <span class="title class_">TrieNode</span>[<span class="number">26</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TrieNode root;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Trie</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.root = <span class="keyword">new</span> <span class="title class_">TrieNode</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Inserts a word into the trie. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> word.length();</span><br><span class="line">        <span class="type">TrieNode</span> <span class="variable">node</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> word.charAt(i) - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (node.children[idx] == <span class="literal">null</span>) &#123;</span><br><span class="line">                node.children[idx] = <span class="keyword">new</span> <span class="title class_">TrieNode</span>();</span><br><span class="line">                node = node.children[idx];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node = node.children[idx];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        node.isEnd = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns if the word is in the trie. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">search</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="type">TrieNode</span> <span class="variable">node</span> <span class="operator">=</span> find(word);</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span> || node.isEnd == <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns if there is any word in the trie that starts with the given prefix. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">startsWith</span><span class="params">(String prefix)</span> &#123;</span><br><span class="line">        <span class="type">TrieNode</span> <span class="variable">node</span> <span class="operator">=</span> find(prefix);</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TrieNode <span class="title function_">find</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> word.length();</span><br><span class="line">        <span class="type">TrieNode</span> <span class="variable">node</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> word.charAt(i) - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (node.children[idx] == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node = node.children[idx];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your Trie object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * Trie obj = new Trie();</span></span><br><span class="line"><span class="comment"> * obj.insert(word);</span></span><br><span class="line"><span class="comment"> * boolean param_2 = obj.search(word);</span></span><br><span class="line"><span class="comment"> * boolean param_3 = obj.startsWith(prefix);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h4 id="226-Invert-Binary-Tree"><a href="#226-Invert-Binary-Tree" class="headerlink" title="226. Invert Binary Tree"></a><a href="https://leetcode.com/problems/invert-binary-tree/">226. Invert Binary Tree</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">invertTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">left</span> <span class="operator">=</span> root.left;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">right</span> <span class="operator">=</span> root.right;</span><br><span class="line">    root.left = right;</span><br><span class="line">    root.right = left;</span><br><span class="line">    invertTree(left);</span><br><span class="line">    invertTree(right);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="235-Lowest-Common-Ancestor-of-a-Binary-Search-Tree"><a href="#235-Lowest-Common-Ancestor-of-a-Binary-Search-Tree" class="headerlink" title="235. Lowest Common Ancestor of a Binary Search Tree"></a><a href="https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/">235. Lowest Common Ancestor of a Binary Search Tree</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> Math.min(p.val, q.val);</span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> Math.max(p.val, q.val);</span><br><span class="line">    <span class="keyword">return</span> getLCA(root, min, max);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> TreeNode <span class="title function_">getLCA</span><span class="params">(TreeNode node, <span class="type">int</span> min, <span class="type">int</span> max)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node.val &gt; max) <span class="keyword">return</span> getLCA(node.left, min, max);</span><br><span class="line">    <span class="keyword">if</span> (node.val &lt; min) <span class="keyword">return</span> getLCA(node.right, min, max);</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="236-Lowest-Common-Ancestor-of-a-Binary-Tree"><a href="#236-Lowest-Common-Ancestor-of-a-Binary-Tree" class="headerlink" title="236. Lowest Common Ancestor of a Binary Tree"></a><a href="https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/">236. Lowest Common Ancestor of a Binary Tree</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (root == p || root == q) <span class="keyword">return</span> root;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">left</span> <span class="operator">=</span> lowestCommonAncestor(root.left, p, q);</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">right</span> <span class="operator">=</span> lowestCommonAncestor(root.right, p, q);</span><br><span class="line">    <span class="keyword">if</span> (left != <span class="literal">null</span> &amp;&amp; right != <span class="literal">null</span>) <span class="keyword">return</span> root;</span><br><span class="line">    <span class="keyword">return</span> left == <span class="literal">null</span>? right: left;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="337-House-Robber-III"><a href="#337-House-Robber-III" class="headerlink" title="337. House Robber III"></a><a href="https://leetcode.com/problems/house-robber-iii/">337. House Robber III</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rob</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] rootSum = getSum(root);</span><br><span class="line">    <span class="keyword">return</span> rootSum[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span>[] getSum(TreeNode node) &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span>[] left = getSum(node.left);</span><br><span class="line">    <span class="type">int</span>[] right = getSum(node.right);</span><br><span class="line">    <span class="type">int</span> <span class="variable">childSum</span> <span class="operator">=</span> left[<span class="number">0</span>] + right[<span class="number">0</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">parentSum</span> <span class="operator">=</span> Math.max(childSum, left[<span class="number">1</span>] + right[<span class="number">1</span>] + node.val);</span><br><span class="line">    <span class="comment">// reuse the left array to save memory</span></span><br><span class="line">    left[<span class="number">0</span>] = parentSum;</span><br><span class="line">    left[<span class="number">1</span>] = childSum;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="404-Sum-of-Left-Leaves"><a href="#404-Sum-of-Left-Leaves" class="headerlink" title="404. Sum of Left Leaves"></a><a href="https://leetcode.com/problems/sum-of-left-leaves/">404. Sum of Left Leaves</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sumOfLeftLeaves</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (root.left == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> sumOfLeftLeaves(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (root.left.left == <span class="literal">null</span> &amp;&amp; root.left.right == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> root.left.val + sumOfLeftLeaves(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sumOfLeftLeaves(root.left) + sumOfLeftLeaves(root.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="437-Path-Sum-III💫"><a href="#437-Path-Sum-III💫" class="headerlink" title="437. Path Sum III💫"></a><a href="https://leetcode.com/problems/path-sum-iii/">437. Path Sum III</a>💫</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pathSum</span><span class="params">(TreeNode root, <span class="type">int</span> sum)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pathSumStartWithRoot(root, sum) + pathSum(root.right, sum) + pathSum(root.left, sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">pathSumStartWithRoot</span><span class="params">(TreeNode node, <span class="type">int</span> sum)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> node.val == sum? <span class="number">1</span>: <span class="number">0</span>;</span><br><span class="line">    cnt += pathSumStartWithRoot(node.left, sum - node.val);</span><br><span class="line">    cnt += pathSumStartWithRoot(node.right, sum - node.val);</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="450-Delete-Node-in-a-BST"><a href="#450-Delete-Node-in-a-BST" class="headerlink" title="450. Delete Node in a BST"></a><a href="https://leetcode.com/problems/delete-node-in-a-bst/">450. Delete Node in a BST</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">deleteNode</span><span class="params">(TreeNode root, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">0</span>), pre = dummy;</span><br><span class="line">    dummy.left = root;</span><br><span class="line">    <span class="keyword">while</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (root.val == key) &#123;</span><br><span class="line">            deleteInBST(root, pre);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pre = root;</span><br><span class="line">        <span class="keyword">if</span> (root.val &gt; key) root = root.left;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (root.val &lt; key) root = root.right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummy.left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">deleteInBST</span><span class="params">(TreeNode node, TreeNode pre)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node.left == <span class="literal">null</span> &amp;&amp; node.right == <span class="literal">null</span>) &#123;</span><br><span class="line">        deleteNoChild(node, pre);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.left == <span class="literal">null</span> || node.right == <span class="literal">null</span>) &#123;</span><br><span class="line">        deleteOneChild(node, pre);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        deleteTwoChild(node);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">deleteNoChild</span><span class="params">(TreeNode node, TreeNode pre)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (pre.left == node) pre.left = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">else</span> pre.right = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">deleteOneChild</span><span class="params">(TreeNode node, TreeNode pre)</span> &#123;</span><br><span class="line">    <span class="comment">// directly link parent with child</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isleft</span> <span class="operator">=</span> pre.left == node? <span class="literal">true</span>: <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (node.left == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isleft) pre.left = node.right;</span><br><span class="line">        <span class="keyword">else</span> pre.right = node.right;</span><br><span class="line">        node.right = <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isleft) pre.left = node.left;</span><br><span class="line">        <span class="keyword">else</span> pre.right = node.left;</span><br><span class="line">        node.left = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">deleteTwoChild</span><span class="params">(TreeNode node)</span> &#123;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">succ</span> <span class="operator">=</span> node.right, pre_succ = node;</span><br><span class="line">    <span class="keyword">while</span> (succ.left != <span class="literal">null</span>) &#123;</span><br><span class="line">        pre_succ = succ;</span><br><span class="line">        succ = succ.left;</span><br><span class="line">    &#125;</span><br><span class="line">    node.val = succ.val;</span><br><span class="line">    deleteInBST(succ, pre_succ);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="513-Find-Bottom-Left-Tree-Value"><a href="#513-Find-Bottom-Left-Tree-Value" class="headerlink" title="513. Find Bottom Left Tree Value"></a><a href="https://leetcode.com/problems/find-bottom-left-tree-value/">513. Find Bottom Left Tree Value</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findBottomLeftValue</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    Queue &lt;TreeNode&gt; q = <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line">    q.offer(root);</span><br><span class="line">    <span class="keyword">while</span> (!q.isEmpty()) &#123;</span><br><span class="line">        root = q.poll();</span><br><span class="line">        <span class="keyword">if</span> (root.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            q.offer(root.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            q.offer(root.left);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root.val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>OR</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">maxLayer</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">valLeft</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findBottomLeftValue</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    findLeft(root, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> valLeft;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">findLeft</span><span class="params">(TreeNode node, <span class="type">int</span> numLayer)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    numLayer++;</span><br><span class="line">    <span class="keyword">if</span> (node.left == <span class="literal">null</span> &amp;&amp; node.right == <span class="literal">null</span> &amp;&amp; maxLayer &lt; numLayer) &#123;</span><br><span class="line">        valLeft = node.val;</span><br><span class="line">        maxLayer = numLayer;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    findLeft(node.left, numLayer);</span><br><span class="line">    findLeft(node.right, numLayer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="530-Minimum-Absolute-Difference-in-BST"><a href="#530-Minimum-Absolute-Difference-in-BST" class="headerlink" title="530. Minimum Absolute Difference in BST"></a><a href="https://leetcode.com/problems/minimum-absolute-difference-in-bst/">530. Minimum Absolute Difference in BST</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMinimumDifference</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    inOrderTrav(root, <span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">return</span> min;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> TreeNode <span class="title function_">inOrderTrav</span><span class="params">(TreeNode node, TreeNode tail)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) <span class="keyword">return</span> tail;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">left</span> <span class="operator">=</span> inOrderTrav(node.left, node);</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">right</span> <span class="operator">=</span> inOrderTrav(node.right, tail);</span><br><span class="line">    <span class="keyword">if</span> (right != <span class="literal">null</span>) min = Math.min(min, right.val - node.val);</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="538-Convert-BST-to-Greater-Tree"><a href="#538-Convert-BST-to-Greater-Tree" class="headerlink" title="538. Convert BST to Greater Tree"></a><a href="https://leetcode.com/problems/convert-bst-to-greater-tree/">538. Convert BST to Greater Tree</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">convertBST</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    getSum(root);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">getSum</span><span class="params">(TreeNode node)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    getSum(node.right);</span><br><span class="line">    sum += node.val;</span><br><span class="line">    node.val = sum;</span><br><span class="line">    getSum(node.left);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>OR</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">convertBST</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        Stack &lt;TreeNode&gt; s = <span class="keyword">new</span> <span class="title class_">Stack</span>();</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (node != <span class="literal">null</span> || !s.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">while</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">                s.push(node);</span><br><span class="line">                node = node.right;</span><br><span class="line">            &#125;</span><br><span class="line">            node = s.pop();</span><br><span class="line">            sum += node.val;</span><br><span class="line">            node.val = sum;</span><br><span class="line">            node = node.left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="543-Diameter-of-Binary-Tree"><a href="#543-Diameter-of-Binary-Tree" class="headerlink" title="543. Diameter of Binary Tree"></a><a href="https://leetcode.com/problems/diameter-of-binary-tree/">543. Diameter of Binary Tree</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">diameterOfBinaryTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        helper(root);</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">helper</span><span class="params">(TreeNode node)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> helper(node.left);</span><br><span class="line">        <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> helper(node.right);</span><br><span class="line">        max = Math.max(l + r, max);</span><br><span class="line">        <span class="keyword">return</span> Math.max(l, r) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="572-Subtree-of-Another-Tree"><a href="#572-Subtree-of-Another-Tree" class="headerlink" title="572. Subtree of Another Tree"></a><a href="https://leetcode.com/problems/subtree-of-another-tree/">572. Subtree of Another Tree</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSubtree</span><span class="params">(TreeNode root, TreeNode subRoot)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span> &amp;&amp; subRoot != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (compareTree(root, subRoot)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> isSubtree(root.left, subRoot) || isSubtree(root.right, subRoot);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">compareTree</span><span class="params">(TreeNode root, TreeNode subRoot)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span> &amp;&amp; subRoot == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root == <span class="literal">null</span> || subRoot == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (root.val == subRoot.val) &#123;</span><br><span class="line">        <span class="keyword">return</span> compareTree(root.left, subRoot.left) &amp;&amp; compareTree(root.right, subRoot.right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="617-Merge-Two-Binary-Trees"><a href="#617-Merge-Two-Binary-Trees" class="headerlink" title="617. Merge Two Binary Trees"></a><a href="https://leetcode.com/problems/merge-two-binary-trees/">617. Merge Two Binary Trees</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">mergeTrees</span><span class="params">(TreeNode root1, TreeNode root2)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root1 == <span class="literal">null</span> &amp;&amp; root2 == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root1 == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> root2;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root2 == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> root1;</span><br><span class="line">    &#125;</span><br><span class="line">    root1.val += root2.val;</span><br><span class="line">    root1.left = mergeTrees(root1.left, root2.left);</span><br><span class="line">    root1.right = mergeTrees(root1.right, root2.right);</span><br><span class="line">    <span class="keyword">return</span> root1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="637-Average-of-Levels-in-Binary-Tree📌"><a href="#637-Average-of-Levels-in-Binary-Tree📌" class="headerlink" title="637. Average of Levels in Binary Tree📌"></a><a href="https://leetcode.com/problems/average-of-levels-in-binary-tree/">637. Average of Levels in Binary Tree</a>📌</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//recording the count of nodes in each layer helps traverse each layer</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Double&gt; <span class="title function_">averageOfLevels</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    List&lt;Double&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    Queue &lt;TreeNode&gt; q = <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line">    q.offer(root);</span><br><span class="line">    <span class="keyword">while</span> (!q.isEmpty()) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> q.size();</span><br><span class="line">        <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> q.poll();</span><br><span class="line">            sum += node.val;</span><br><span class="line">            <span class="keyword">if</span> (node.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                q.offer(node.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                q.offer(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans.add(sum / count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="653-Two-Sum-IV-Input-is-a-BST"><a href="#653-Two-Sum-IV-Input-is-a-BST" class="headerlink" title="653. Two Sum IV - Input is a BST"></a><a href="https://leetcode.com/problems/two-sum-iv-input-is-a-bst/">653. Two Sum IV - Input is a BST</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashSet&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;Integer&gt;();</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">findTarget</span><span class="params">(TreeNode root, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (set.contains(k - root.val)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    set.add(root.val);</span><br><span class="line">    <span class="keyword">return</span> findTarget(root.left, k) || findTarget(root.right, k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="669-Trim-a-Binary-Search-Tree"><a href="#669-Trim-a-Binary-Search-Tree" class="headerlink" title="669. Trim a Binary Search Tree"></a><a href="https://leetcode.com/problems/trim-a-binary-search-tree/">669. Trim a Binary Search Tree</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">trimBST</span><span class="params">(TreeNode root, <span class="type">int</span> L, <span class="type">int</span> R)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (root.val &gt; R) &#123;</span><br><span class="line">        <span class="keyword">return</span> trimBST(root.left, L, R);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (root.val &lt; L) &#123;</span><br><span class="line">        <span class="keyword">return</span> trimBST(root.right, L, R);</span><br><span class="line">    &#125;</span><br><span class="line">    root.left = trimBST(root.left, L, R);</span><br><span class="line">    root.right = trimBST(root.right, L, R);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="687-Longest-Univalue-Path"><a href="#687-Longest-Univalue-Path" class="headerlink" title="687. Longest Univalue Path"></a><a href="https://leetcode.com/problems/longest-univalue-path/">687. Longest Univalue Path</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestUnivaluePath</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    longestPath(root);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">longestPath</span><span class="params">(TreeNode node)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> longestPath(node.left);</span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> longestPath(node.right);</span><br><span class="line">    left = (node.left != <span class="literal">null</span> &amp;&amp; node.left.val == node.val)? left + <span class="number">1</span>: <span class="number">0</span>;</span><br><span class="line">    right = (node.right != <span class="literal">null</span> &amp;&amp; node.right.val == node.val)? right + <span class="number">1</span>: <span class="number">0</span>;</span><br><span class="line">    res = Math.max(res, left + right);</span><br><span class="line">    <span class="keyword">return</span> Math.max(right, left);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="897-Increasing-Order-Search-Tree"><a href="#897-Increasing-Order-Search-Tree" class="headerlink" title="897. Increasing Order Search Tree"></a><a href="https://leetcode.com/problems/increasing-order-search-tree/">897. Increasing Order Search Tree</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">TreeNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">0</span>), head = dummy;</span><br><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">increasingBST</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    increasingBST(root.left);</span><br><span class="line">    head.right = root;</span><br><span class="line">    head = head.right;</span><br><span class="line">    root.left = <span class="literal">null</span>;</span><br><span class="line">    increasingBST(root.right);</span><br><span class="line">    <span class="keyword">return</span> dummy.right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1008-Construct-Binary-Search-Tree-from-Preorder-Traversal💫"><a href="#1008-Construct-Binary-Search-Tree-from-Preorder-Traversal💫" class="headerlink" title="1008. Construct Binary Search Tree from Preorder Traversal💫"></a><a href="https://leetcode.com/problems/construct-binary-search-tree-from-preorder-traversal/">1008. Construct Binary Search Tree from Preorder Traversal</a>💫</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">bstFromPreorder</span><span class="params">(<span class="type">int</span>[] preorder)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> helper(preorder, <span class="number">0</span>, preorder.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">helper</span><span class="params">(<span class="type">int</span>[] preorder, <span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (start &gt; end) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(preorder[start]);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (; i &lt;= end; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (preorder[i] &gt; preorder[start]) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        node.left = helper(preorder, start + <span class="number">1</span>, i - <span class="number">1</span>);</span><br><span class="line">        node.right = helper(preorder, i, end);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1110-Delete-Nodes-And-Return-Forest"><a href="#1110-Delete-Nodes-And-Return-Forest" class="headerlink" title="1110. Delete Nodes And Return Forest"></a><a href="https://leetcode.com/problems/delete-nodes-and-return-forest/">1110. Delete Nodes And Return Forest</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;TreeNode&gt; <span class="title function_">delNodes</span><span class="params">(TreeNode root, <span class="type">int</span>[] to_delete)</span> &#123;</span><br><span class="line">    List&lt;TreeNode&gt; forest = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    HashSet &lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> val: to_delete) &#123;</span><br><span class="line">        set.add(val);</span><br><span class="line">    &#125;</span><br><span class="line">    root = helper(root, set, forest);</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">        forest.add(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> forest;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> TreeNode <span class="title function_">helper</span><span class="params">(TreeNode root, HashSet&lt;Integer&gt; set, List&lt;TreeNode&gt; forest)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    root.left = helper(root.left, set, forest);</span><br><span class="line">    root.right = helper(root.right, set, forest);</span><br><span class="line">    <span class="keyword">if</span> (set.contains(root.val)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (root.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            forest.add(root.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            forest.add(root.right);</span><br><span class="line">        &#125;</span><br><span class="line">        root = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Following concludes common implementation of tree traversals:</p>
<h4 id="Preorder-Traversal"><a href="#Preorder-Traversal" class="headerlink" title="Preorder Traversal"></a>Preorder Traversal</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">preorder</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    visit(root);</span><br><span class="line">    preorder(root.left);</span><br><span class="line">    preorder(root.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Inorder-Traversal"><a href="#Inorder-Traversal" class="headerlink" title="Inorder Traversal"></a>Inorder Traversal</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">inorder</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    inorder(root.left);</span><br><span class="line">    visit(root);</span><br><span class="line">    inorder(root.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Postorder-Traversal"><a href="#Postorder-Traversal" class="headerlink" title="Postorder Traversal"></a>Postorder Traversal</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">postorder</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    postorder(root.left);</span><br><span class="line">    postorder(root.right);</span><br><span class="line">    visit(root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Binary-Search-Tree"><a href="#Binary-Search-Tree" class="headerlink" title="Binary Search Tree"></a>Binary Search Tree</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BST</span>&#123;</span><br><span class="line">    <span class="comment">//suppose each TreeNode has unique value</span></span><br><span class="line">    <span class="keyword">private</span> TreeNode root;</span><br><span class="line"></span><br><span class="line">    BST() &#123;</span><br><span class="line">        <span class="built_in">this</span>.root = <span class="keyword">new</span> <span class="title class_">TreeNode</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    BST(<span class="type">int</span> val) &#123;</span><br><span class="line">        <span class="built_in">this</span>.root = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">makeEmpty</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        makeEmpty(root.left);</span><br><span class="line">        makeEmpty(root.right);</span><br><span class="line">        root = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> val)</span> &#123;<span class="comment">//interface</span></span><br><span class="line">        insert(<span class="built_in">this</span>.root, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TreeNode <span class="title function_">insert</span><span class="params">(TreeNode root, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            root = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val &lt; root.val) &#123;</span><br><span class="line">            root.left = insert(root.left, val);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            root.right = insert(root.right, val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">find</span><span class="params">(<span class="type">int</span> val)</span>  &#123;<span class="comment">//interface</span></span><br><span class="line">        <span class="keyword">return</span> find(<span class="built_in">this</span>.root, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TreeNode <span class="title function_">find</span><span class="params">(TreeNode root, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;no such node in tree&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (val &lt; root.val) <span class="keyword">return</span> find(root.left, val);</span><br><span class="line">        <span class="keyword">if</span> (val &gt; root.val) <span class="keyword">return</span> find(root.right, val);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findMin</span><span class="params">()</span>  &#123;<span class="comment">//interface</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> findMin(<span class="built_in">this</span>.root);</span><br><span class="line">        <span class="keyword">return</span> node.val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TreeNode <span class="title function_">findMin</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span> || root.left == <span class="literal">null</span>) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="keyword">return</span> findMin(root.left);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findMax</span><span class="params">()</span>  &#123;<span class="comment">//interface</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> findMax(<span class="built_in">this</span>.root);</span><br><span class="line">        <span class="keyword">return</span> node.val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TreeNode <span class="title function_">findMax</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span> || root.right == <span class="literal">null</span>) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="keyword">return</span> findMax(root.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(<span class="type">int</span> val)</span> &#123;<span class="comment">//interface</span></span><br><span class="line">        remove(<span class="built_in">this</span>.root, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TreeNode <span class="title function_">remove</span><span class="params">(TreeNode root, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val &lt; root.val) &#123;</span><br><span class="line">            root.left = remove(root.left, val);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val &gt; root.val) &#123;</span><br><span class="line">            root.right = remove(root.right, val);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">//get the TreeNode to delete</span></span><br><span class="line">            <span class="keyword">if</span> (root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>) &#123;</span><br><span class="line">                root = <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root.left == <span class="literal">null</span> || root.right == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (root.left == <span class="literal">null</span>) root = root.right;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (root.right == <span class="literal">null</span>) root = root.left;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//root.left != null &amp;&amp; root.right != null</span></span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> findMin(root.right);<span class="comment">//find successor in right subtree</span></span><br><span class="line">                root.val = node.val;</span><br><span class="line">                root.right = remove(root.right, node.val);<span class="comment">//delete successor in right subtree</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
        <category>Data Structure</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Solutions (15): Graph</title>
    <url>/2021/12/18/Leetcode-15-Graph/</url>
    <content><![CDATA[<p>These Leetcode problems are related with <em>Graph</em> :</p>
<h4 id="Depth-First-Search"><a href="#Depth-First-Search" class="headerlink" title="Depth First Search"></a>Depth First Search</h4><h5 id="130-Surrounded-Regions"><a href="#130-Surrounded-Regions" class="headerlink" title="130. Surrounded Regions"></a><a href="https://leetcode.com/problems/surrounded-regions/">130. Surrounded Regions</a></h5><span id="more"></span>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">solve</span><span class="params">(<span class="type">char</span>[][] board)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (board.length == <span class="number">0</span> || board[<span class="number">0</span>].length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; board.length; i++) &#123;</span><br><span class="line">        dfs(board, i, <span class="number">0</span>);</span><br><span class="line">        dfs(board, i, board[<span class="number">0</span>].length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; board[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">        dfs(board, <span class="number">0</span>, j);</span><br><span class="line">        dfs(board, board.length-<span class="number">1</span>, j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; board.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; board[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[i][j] == <span class="string">&#x27;O&#x27;</span>) &#123;</span><br><span class="line">                board[i][j] = <span class="string">&#x27;X&#x27;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (board[i][j] == <span class="string">&#x27;T&#x27;</span>) &#123;</span><br><span class="line">                board[i][j] = <span class="string">&#x27;O&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">char</span>[][] board, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">0</span> || j &lt; <span class="number">0</span> || i &gt;= board.length || j &gt;= board[<span class="number">0</span>].length || board[i][j] != <span class="string">&#x27;O&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    board[i][j] = <span class="string">&#x27;T&#x27;</span>;</span><br><span class="line">    dfs(board, i-<span class="number">1</span>, j);</span><br><span class="line">    dfs(board, i+<span class="number">1</span>, j);</span><br><span class="line">    dfs(board, i, j-<span class="number">1</span>);</span><br><span class="line">    dfs(board, i, j+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="200-Number-of-Islands"><a href="#200-Number-of-Islands" class="headerlink" title="200. Number of Islands"></a><a href="https://leetcode.com/problems/number-of-islands/">200. Number of Islands</a></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numIslands</span><span class="params">(<span class="type">char</span>[][] grid)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (grid.length == <span class="number">0</span>|| grid[<span class="number">0</span>].length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">num_island</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; grid.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; grid[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (grid[i][j] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                search(grid, i, j);</span><br><span class="line">                num_island++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num_island;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">search</span><span class="params">(<span class="type">char</span>[][] grid, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">0</span> || j &lt; <span class="number">0</span> || i &gt;= grid.length || j &gt;= grid[<span class="number">0</span>].length || grid[i][j] == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    grid[i][j] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    search(grid, i-<span class="number">1</span>, j);</span><br><span class="line">    search(grid, i+<span class="number">1</span>, j);</span><br><span class="line">    search(grid, i, j-<span class="number">1</span>);</span><br><span class="line">    search(grid, i, j+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="417-Pacific-Atlantic-Water-Flow"><a href="#417-Pacific-Atlantic-Water-Flow" class="headerlink" title="417. Pacific Atlantic Water Flow"></a><a href="https://leetcode.com/problems/pacific-atlantic-water-flow/">417. Pacific Atlantic Water Flow</a></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">pacificAtlantic</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    <span class="keyword">if</span> (matrix.length == <span class="number">0</span> || matrix[<span class="number">0</span>].length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> matrix.length, col = matrix[<span class="number">0</span>].length;</span><br><span class="line">    <span class="type">boolean</span>[][] pacific = <span class="keyword">new</span> <span class="title class_">boolean</span>[row][col];</span><br><span class="line">    <span class="type">boolean</span>[][] atlantic = <span class="keyword">new</span> <span class="title class_">boolean</span>[row][col];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">        flood(matrix, pacific, i, <span class="number">0</span>, Integer.MIN_VALUE);</span><br><span class="line">        flood(matrix, atlantic, i, col-<span class="number">1</span>, Integer.MIN_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">        flood(matrix, pacific, <span class="number">0</span>, j, Integer.MIN_VALUE);</span><br><span class="line">        flood(matrix, atlantic, row-<span class="number">1</span>, j, Integer.MIN_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pacific[i][j] &amp;&amp; atlantic[i][j]) &#123;</span><br><span class="line">                List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">                list.add(i); list.add(j);</span><br><span class="line">                ans.add(list);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">flood</span><span class="params">(<span class="type">int</span>[][] matrix, <span class="type">boolean</span>[][] ocean, <span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> prev)</span> &#123;<span class="comment">//flood from ocean to mountain, low to high/equal</span></span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">0</span> || j &lt; <span class="number">0</span> || i &gt;= matrix.length || j &gt;= matrix[i].length || ocean[i][j] == <span class="literal">true</span> || prev &gt; matrix[i][j]) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ocean[i][j] = <span class="literal">true</span>;</span><br><span class="line">    flood(matrix, ocean, i+<span class="number">1</span>, j, matrix[i][j]);</span><br><span class="line">    flood(matrix, ocean, i-<span class="number">1</span>, j, matrix[i][j]);</span><br><span class="line">    flood(matrix, ocean, i, j+<span class="number">1</span>, matrix[i][j]);</span><br><span class="line">    flood(matrix, ocean, i, j-<span class="number">1</span>, matrix[i][j]);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="547-Friend-Circles"><a href="#547-Friend-Circles" class="headerlink" title="547. Friend Circles"></a><a href="https://leetcode.com/problems/friend-circles/">547. Friend Circles</a></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findCircleNum</span><span class="params">(<span class="type">int</span>[][] M)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">boolean</span>[] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[M.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; M.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!visited[i]) &#123;</span><br><span class="line">            dfs(visited, M, i);</span><br><span class="line">            ans++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">boolean</span>[] visited, <span class="type">int</span>[][] M, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">    visited[i] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; M[i].length; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (M[i][j] == <span class="number">1</span> &amp;&amp; visited[j] == <span class="literal">false</span>) &#123;</span><br><span class="line">            dfs(visited, M, j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="695-Max-Area-of-Island"><a href="#695-Max-Area-of-Island" class="headerlink" title="695. Max Area of Island"></a><a href="https://leetcode.com/problems/max-area-of-island/">695. Max Area of Island</a></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Recursion</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxAreaOfIsland</span><span class="params">(<span class="type">int</span>[][] grid)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (grid.length == <span class="number">0</span> || grid[<span class="number">0</span>].length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">max_size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; grid.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; grid[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">            max_size = Math.max(max_size, dfs(grid, i, j));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max_size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span>[][] grid, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">0</span> || j &lt; <span class="number">0</span> || i &gt;= grid.length || j &gt;= grid[<span class="number">0</span>].length || grid[i][j] != <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    grid[i][j] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + dfs(grid, i-<span class="number">1</span>, j) + dfs(grid, i+<span class="number">1</span>, j) + dfs(grid, i, j-<span class="number">1</span>) + dfs(grid, i, j+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>OR</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Stack</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxAreaOfIsland</span><span class="params">(<span class="type">int</span>[][] grid)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> grid.length, n = m &gt; <span class="number">0</span>? grid[<span class="number">0</span>].length: <span class="number">0</span>, local_area, area = <span class="number">0</span>, x, y;</span><br><span class="line">    <span class="type">int</span>[] direction = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (grid[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                local_area = <span class="number">1</span>;</span><br><span class="line">                grid[i][j] = <span class="number">0</span>;</span><br><span class="line">                Stack &lt;<span class="type">int</span>[]&gt; island = <span class="keyword">new</span> <span class="title class_">Stack</span>();</span><br><span class="line">                island.push(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;i, j&#125;);</span><br><span class="line">                <span class="keyword">while</span> (!island.isEmpty()) &#123;</span><br><span class="line">                    <span class="type">int</span>[] cur = island.pop();</span><br><span class="line">                    <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> cur[<span class="number">0</span>], c = cur[<span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">                        x = r + direction[k];</span><br><span class="line">                        y = c + direction[k+<span class="number">1</span>];</span><br><span class="line">                        <span class="keyword">if</span> (x &gt;= <span class="number">0</span> &amp;&amp; x &lt; m &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; n &amp;&amp; grid[x][y] == <span class="number">1</span>) &#123;</span><br><span class="line">                            grid[x][y] = <span class="number">0</span>;</span><br><span class="line">                            local_area += <span class="number">1</span>;</span><br><span class="line">                            island.push(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;x, y&#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                area = Math.max(area, local_area);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> area;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Breadth-First-Search"><a href="#Breadth-First-Search" class="headerlink" title="Breadth First Search"></a>Breadth First Search</h4><h5 id="126-Word-Ladder-II"><a href="#126-Word-Ladder-II" class="headerlink" title="126. Word Ladder II"></a><a href="https://leetcode.com/problems/word-ladder-ii/">126. Word Ladder II</a></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Solution by @mmao3 https://leetcode.com/problems/word-ladder-ii/discuss/40475/My-concise-JAVA-solution-based-on-BFS-and-DFS/222218</span></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">findLadders</span><span class="params">(String beginWord, String endWord, List&lt;String&gt; wordList)</span> &#123;</span><br><span class="line">    Set&lt;String&gt; dict = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(wordList);</span><br><span class="line">    List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (!dict.contains(endWord)) &#123;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    Map&lt;String, List&lt;String&gt;&gt; map = getChildren(beginWord, endWord, dict);</span><br><span class="line">    List&lt;String&gt; path = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    path.add(beginWord);</span><br><span class="line">    findLadders(beginWord, endWord, map, res, path);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findLadders</span><span class="params">(String beginWord, String endWord, Map&lt;String, List&lt;String&gt;&gt; map, List&lt;List&lt;String&gt;&gt; res, List&lt;String&gt; path)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (beginWord.equals(endWord)) &#123;</span><br><span class="line">        res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!map.containsKey(beginWord)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (String next : map.get(beginWord)) &#123;</span><br><span class="line">        path.add(next);</span><br><span class="line">        findLadders(next, endWord, map, res, path);</span><br><span class="line">        path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, List&lt;String&gt;&gt; <span class="title function_">getChildren</span><span class="params">(String beginWord, String endWord, Set&lt;String&gt; dict)</span> &#123;</span><br><span class="line">    Map&lt;String, List&lt;String&gt;&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    Set&lt;String&gt; start = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    start.add(beginWord);</span><br><span class="line">    Set&lt;String&gt; end = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    Set&lt;String&gt; visited = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    end.add(endWord);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">found</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isBackward</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span> (!start.isEmpty() &amp;&amp; !found) &#123;</span><br><span class="line">        <span class="keyword">if</span> (start.size() &gt; end.size()) &#123;</span><br><span class="line">            Set&lt;String&gt; tem = start;</span><br><span class="line">            start = end;</span><br><span class="line">            end = tem;</span><br><span class="line">            isBackward = !isBackward;</span><br><span class="line">        &#125;</span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String cur : start) &#123;</span><br><span class="line">            visited.add(cur);</span><br><span class="line">            <span class="keyword">for</span> (String next : getNext(cur, dict)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (visited.contains(next) || start.contains(next)) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (end.contains(next)) &#123;</span><br><span class="line">                    found = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                set.add(next);</span><br><span class="line">                <span class="type">String</span> <span class="variable">parent</span> <span class="operator">=</span> isBackward ? next : cur;</span><br><span class="line">                <span class="type">String</span> <span class="variable">child</span> <span class="operator">=</span> isBackward ? cur : next;</span><br><span class="line">                <span class="keyword">if</span> (!map.containsKey(parent)) &#123;</span><br><span class="line">                    map.put(parent, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">                &#125;</span><br><span class="line">                map.get(parent).add(child);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        start = set;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; <span class="title function_">getNext</span><span class="params">(String cur, Set&lt;String&gt; dict)</span> &#123;</span><br><span class="line">    List&lt;String&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">char</span>[] chars = cur.toCharArray();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">old</span> <span class="operator">=</span> chars[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>; c &lt;= <span class="string">&#x27;z&#x27;</span>; c++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c == old) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            chars[i] = c;</span><br><span class="line">            <span class="type">String</span> <span class="variable">next</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(chars);</span><br><span class="line">            <span class="keyword">if</span> (dict.contains(next)) &#123;</span><br><span class="line">                res.add(next);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        chars[i] = old;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="310-Minimum-Height-Trees"><a href="#310-Minimum-Height-Trees" class="headerlink" title="310. Minimum Height Trees"></a><a href="https://leetcode.com/problems/minimum-height-trees/">310. Minimum Height Trees</a></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> val;</span><br><span class="line">    <span class="keyword">public</span> List &lt;Integer&gt; neighbors;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TreeNode</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.neighbors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isLeaf</span> <span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.neighbors.size() == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">findMinHeightTrees</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] edges)</span> &#123;</span><br><span class="line">    TreeNode[] tree = <span class="keyword">new</span> <span class="title class_">TreeNode</span>[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        tree[i] = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; edges.length; i++) &#123;</span><br><span class="line">        tree[edges[i][<span class="number">0</span>]].neighbors.add(edges[i][<span class="number">1</span>]);</span><br><span class="line">        tree[edges[i][<span class="number">1</span>]].neighbors.add(edges[i][<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    List &lt;Integer&gt; leafs = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (tree[i].isLeaf()) &#123;</span><br><span class="line">            leafs.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (leafs.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        List &lt;Integer&gt; layer = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; leafs.size(); i++) &#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">leaf</span> <span class="operator">=</span> tree[leafs.get(i)];</span><br><span class="line">            <span class="keyword">if</span> (leaf.neighbors.size() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> leafs;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> tree[leaf.neighbors.get(<span class="number">0</span>)];</span><br><span class="line">            node.neighbors.remove(<span class="keyword">new</span> <span class="title class_">Integer</span>(leaf.val));</span><br><span class="line">            <span class="keyword">if</span> (node.isLeaf()) &#123;</span><br><span class="line">                layer.add(node.val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (layer.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> leafs;</span><br><span class="line">        &#125;</span><br><span class="line">        leafs = layer;</span><br><span class="line">    &#125;</span><br><span class="line">    List &lt;Integer&gt; zero = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    zero.add(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> zero;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="785-Is-Graph-Bipartite"><a href="#785-Is-Graph-Bipartite" class="headerlink" title="785. Is Graph Bipartite?"></a><a href="https://leetcode.com/problems/is-graph-bipartite/">785. Is Graph Bipartite?</a></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isBipartite</span><span class="params">(<span class="type">int</span>[][] graph)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> graph.length;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span>[] color = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    Queue &lt;Integer&gt; q = <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (color[i] == <span class="number">0</span>) &#123;</span><br><span class="line">            q.offer(i);</span><br><span class="line">            color[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!q.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">node</span> <span class="operator">=</span> q.poll();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j: graph[node]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (color[j] == <span class="number">0</span>) &#123;</span><br><span class="line">                    q.offer(j);</span><br><span class="line">                    color[j] = color[node] == <span class="number">1</span>? <span class="number">2</span>:<span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (color[node] == color[j]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="934-Shortest-Bridge"><a href="#934-Shortest-Bridge" class="headerlink" title="934. Shortest Bridge"></a><a href="https://leetcode.com/problems/shortest-bridge/">934. Shortest Bridge</a></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">shortestBridge</span><span class="params">(<span class="type">int</span>[][] A)</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">find_island</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    Queue &lt;<span class="type">int</span>[]&gt; zeros = <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; A.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; A[i].length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (A[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                dfs(A, i, j, zeros);</span><br><span class="line">                find_island = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (find_island) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> buildBridge(A, zeros);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">buildBridge</span><span class="params">(<span class="type">int</span>[][] A, Queue &lt;<span class="type">int</span>[]&gt; zeros)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">level</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span>[] direct_y = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span>[] direct_x = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">while</span> (zeros.size() &gt; <span class="number">0</span>) &#123;<span class="comment">//bfs</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num_zeros</span> <span class="operator">=</span> zeros.size();</span><br><span class="line">        <span class="keyword">while</span> (num_zeros &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span>[] zero = zeros.poll();</span><br><span class="line">            num_zeros--;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> zero[<span class="number">0</span>] + direct_x[i];</span><br><span class="line">                <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> zero[<span class="number">1</span>] + direct_y[i];</span><br><span class="line">                <span class="keyword">if</span> (x &lt; <span class="number">0</span> || y &lt; <span class="number">0</span> || x &gt;= A.length || y &gt;= A[x].length) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (A[x][y] == <span class="number">0</span>) &#123;</span><br><span class="line">                    zeros.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;x, y&#125;);</span><br><span class="line">                    A[x][y] = <span class="number">2</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (A[x][y] == <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> level;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        level++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span>[][] A, <span class="type">int</span> i, <span class="type">int</span> j, Queue &lt;<span class="type">int</span>[]&gt; zeros)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">0</span> || j &lt; <span class="number">0</span> || i &gt;= A.length || j &gt;= A[i].length || A[i][j] == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (A[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">        zeros.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;i, j&#125;);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    A[i][j] = <span class="number">2</span>;</span><br><span class="line">    dfs(A, i+<span class="number">1</span>, j, zeros);</span><br><span class="line">    dfs(A, i-<span class="number">1</span>, j, zeros);</span><br><span class="line">    dfs(A, i, j+<span class="number">1</span>, zeros);</span><br><span class="line">    dfs(A, i, j-<span class="number">1</span>, zeros);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Topological-Sort"><a href="#Topological-Sort" class="headerlink" title="Topological Sort"></a>Topological Sort</h4><h5 id="207-Course-Schedule"><a href="#207-Course-Schedule" class="headerlink" title="207. Course Schedule"></a><a href="https://leetcode.com/problems/course-schedule/">207. Course Schedule</a></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Topological Sort</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canFinish</span><span class="params">(<span class="type">int</span> numCourses, <span class="type">int</span>[][] prerequisites)</span> &#123;</span><br><span class="line">    HashMap &lt;Integer, LinkedList&lt;Integer&gt;&gt; preres = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">    <span class="type">int</span>[] degree = <span class="keyword">new</span> <span class="title class_">int</span>[numCourses];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span>[] prere: prerequisites) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">first</span> <span class="operator">=</span> prere[<span class="number">1</span>], second = prere[<span class="number">0</span>];</span><br><span class="line">        LinkedList &lt;Integer&gt; seconds = preres.getOrDefault(first, <span class="keyword">new</span> <span class="title class_">LinkedList</span> &lt;Integer&gt; ());</span><br><span class="line">        seconds.add(second);</span><br><span class="line">        preres.put(first, seconds);</span><br><span class="line">        ++degree[second];</span><br><span class="line">    &#125;</span><br><span class="line">    Queue &lt;Integer&gt; q = <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numCourses; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (degree[i] == <span class="number">0</span>) &#123;</span><br><span class="line">            q.offer(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!q.isEmpty()) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">first</span> <span class="operator">=</span> q.poll();</span><br><span class="line">        LinkedList &lt;Integer&gt; seconds = preres.get(first);</span><br><span class="line">        <span class="keyword">if</span> (seconds == <span class="literal">null</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span> (Integer second: seconds) &#123;</span><br><span class="line">            --degree[second];</span><br><span class="line">            <span class="keyword">if</span> (degree[second] == <span class="number">0</span>) &#123;</span><br><span class="line">                q.offer(second);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> d: degree) &#123;</span><br><span class="line">        <span class="keyword">if</span> (d != <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="210-Course-Schedule-II"><a href="#210-Course-Schedule-II" class="headerlink" title="210. Course Schedule II"></a><a href="https://leetcode.com/problems/course-schedule-ii/">210. Course Schedule II</a></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Topological Sort</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] findOrder(<span class="type">int</span> numCourses, <span class="type">int</span>[][] prerequisites) &#123;</span><br><span class="line">    List &lt;Integer&gt; [] graph = <span class="keyword">new</span> <span class="title class_">ArrayList</span>[numCourses];</span><br><span class="line">    <span class="type">int</span>[] indegree = <span class="keyword">new</span> <span class="title class_">int</span>[numCourses];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span>[] prerequisite: prerequisites) &#123;</span><br><span class="line">        <span class="keyword">if</span> (graph[prerequisite[<span class="number">1</span>]] == <span class="literal">null</span>) &#123;</span><br><span class="line">             graph[prerequisite[<span class="number">1</span>]] = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//point from prerequisite[1] to prerequisite[0]</span></span><br><span class="line">        graph[prerequisite[<span class="number">1</span>]].add(prerequisite[<span class="number">0</span>]);</span><br><span class="line">        indegree[prerequisite[<span class="number">0</span>]] += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Queue &lt;Integer&gt; q = <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numCourses; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (indegree[i] == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//prerequisite course</span></span><br><span class="line">            q.offer(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[numCourses];</span><br><span class="line">    <span class="keyword">while</span> (!q.isEmpty()) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">u</span> <span class="operator">=</span> q.poll();</span><br><span class="line">        ans[cnt++] = u;</span><br><span class="line">        <span class="keyword">if</span> (graph[u] == <span class="literal">null</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> v: graph[u]) &#123;</span><br><span class="line">            indegree[v] -= <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (indegree[v] == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//prerequisites of course v have been completed</span></span><br><span class="line">                q.offer(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numCourses; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (indegree[i] != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Disjoint-Set"><a href="#Disjoint-Set" class="headerlink" title="Disjoint Set"></a>Disjoint Set</h4><h5 id="684-Redundant-Connection"><a href="#684-Redundant-Connection" class="headerlink" title="684. Redundant Connection"></a><a href="https://leetcode.com/problems/redundant-connection/">684. Redundant Connection</a></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] findRedundantConnection(<span class="type">int</span>[][] edges) &#123;</span><br><span class="line">    <span class="type">int</span>[] res = <span class="literal">null</span>;</span><br><span class="line">    <span class="type">UnionFind</span> <span class="variable">uf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UnionFind</span>(edges.length+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span>[] edge: edges) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">p1</span> <span class="operator">=</span> edge[<span class="number">0</span>], p2 = edge[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (uf.isConnected(p1, p2)) &#123;</span><br><span class="line">            res = edge;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        uf.connect(p1, p2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>OR</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Without UF class</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span>[] root = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span>[] size = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] findRedundantConnection(<span class="type">int</span>[][] edges) &#123;</span><br><span class="line">    init(edges);</span><br><span class="line">    <span class="type">int</span>[] res = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span>[] edge: edges) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">p1</span> <span class="operator">=</span> edge[<span class="number">0</span>], p2 = edge[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (isConnected(p1, p2)) &#123;</span><br><span class="line">            res = edge;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        connect(p1, p2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;        </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(<span class="type">int</span>[][] edges)</span> &#123;</span><br><span class="line">    root = <span class="keyword">new</span> <span class="title class_">int</span>[edges.length + <span class="number">1</span>];</span><br><span class="line">    size = <span class="keyword">new</span> <span class="title class_">int</span>[edges.length + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= edges.length; i++) &#123;</span><br><span class="line">        root[i] = i;</span><br><span class="line">        size[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">(<span class="type">int</span> p1, <span class="type">int</span> p2)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">r1</span> <span class="operator">=</span> findRoot(p1), r2 = findRoot(p2);</span><br><span class="line">    <span class="type">int</span> <span class="variable">s1</span> <span class="operator">=</span> size[r1], s2 = size[r2];</span><br><span class="line">    <span class="keyword">if</span> (s1 &lt; s2) &#123;</span><br><span class="line">        root[r1] = r2;</span><br><span class="line">        size[r2] += s1;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        root[r2] = r1;</span><br><span class="line">        size[r1] += s2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">findRoot</span><span class="params">(<span class="type">int</span> p)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (p != root[p]) &#123;</span><br><span class="line">        p = root[p];</span><br><span class="line">        root[p] = root[root[p]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isConnected</span><span class="params">(<span class="type">int</span> p1, <span class="type">int</span> p2)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> findRoot(p1) == findRoot(p2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Following is one form of the implementations of the disjoint set:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UnionFind</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] root;</span><br><span class="line">    UnionFind(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="built_in">this</span>.root = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            root[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">findRoot</span><span class="params">(<span class="type">int</span> p)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (p != root[p]) &#123;</span><br><span class="line">            p = root[p];</span><br><span class="line">            root[p] = root[root[p]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">(<span class="type">int</span> p1, <span class="type">int</span> p2)</span> &#123;</span><br><span class="line">        root[findRoot(p1)] = findRoot(p2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isConnected</span><span class="params">(<span class="type">int</span> p1, <span class="type">int</span> p2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> findRoot(p1) == findRoot(p2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Or</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UnionFind</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] root;</span><br><span class="line">    <span class="type">int</span>[] size;</span><br><span class="line"></span><br><span class="line">    UnionFind(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="built_in">this</span>.root = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="built_in">this</span>.size = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            root[i] = i;</span><br><span class="line">            size[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">findRoot</span><span class="params">(<span class="type">int</span> p)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (p != root[p]) &#123;</span><br><span class="line">            p = root[p];</span><br><span class="line">            root[p] = root[root[p]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">(<span class="type">int</span> p1, <span class="type">int</span> p2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">r1</span> <span class="operator">=</span> findRoot(p1), r2 = findRoot(p2);</span><br><span class="line">        <span class="keyword">if</span> (size[r1] &lt; size[r2]) &#123;</span><br><span class="line">            root[r1] = r2;</span><br><span class="line">            size[r2] += size[r1];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            root[r2] = r1;</span><br><span class="line">            size[r1] += size[r2];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isConnected</span><span class="params">(<span class="type">int</span> p1, <span class="type">int</span> p2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> findRoot(p1) == findRoot(p2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
        <category>Graph</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Solutions (2): Data Structure - Two Pointers</title>
    <url>/2020/06/07/Leetcode-2-Data-Structure-Two-Pointers/</url>
    <content><![CDATA[<p>These Leetcode problems can be solved with <em>Two Pointers</em> : </p>
<h4 id="76-Minimum-Window-Substring💫"><a href="#76-Minimum-Window-Substring💫" class="headerlink" title="76. Minimum Window Substring💫"></a><a href="https://leetcode.com/problems/minimum-window-substring/">76. Minimum Window Substring</a>💫</h4><span id="more"></span> 
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">minWindow</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] chars = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">128</span>];</span><br><span class="line">    <span class="type">boolean</span>[] flag = <span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">128</span>];</span><br><span class="line">    <span class="comment">//summarize chars in t</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; t.length(); i++) &#123;</span><br><span class="line">        flag[t.charAt(i)] = <span class="literal">true</span>;</span><br><span class="line">        chars[t.charAt(i)] += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>, l = <span class="number">0</span>, min_l = <span class="number">0</span>, min_size = s.length() + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> <span class="number">0</span>; r &lt; s.length(); r++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (flag[s.charAt(r)]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (--chars[s.charAt(r)] &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">                cnt += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (cnt == t.length()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (r - l  + <span class="number">1</span> &lt; min_size) &#123;</span><br><span class="line">                    min_l = l;</span><br><span class="line">                    min_size = r - l + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (flag[s.charAt(l)] &amp;&amp; ++chars[s.charAt(l)] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    cnt -= <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                l += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> min_size &gt; s.length()? <span class="string">&quot;&quot;</span>: s.substring(min_l, min_size + min_l);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="88-Merge-Sorted-Array"><a href="#88-Merge-Sorted-Array" class="headerlink" title="88. Merge Sorted Array"></a><a href="https://leetcode.com/problems/merge-sorted-array/">88. Merge Sorted Array</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span> m, <span class="type">int</span>[] nums2, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">p1</span> <span class="operator">=</span> m-<span class="number">1</span>, p2 = n-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (p1 &gt;= <span class="number">0</span> &amp;&amp; p2 &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums2[p2] &gt; nums1[p1]) &#123;</span><br><span class="line">            nums1[p1+p2+<span class="number">1</span>] = nums2[p2];</span><br><span class="line">            p2 -= <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            nums1[p1+p2+<span class="number">1</span>] = nums1[p1];</span><br><span class="line">            p1 -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (p2 &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        nums1[p2] = nums2[p2];</span><br><span class="line">        p2 -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="142-Linked-List-Cycle-II📌"><a href="#142-Linked-List-Cycle-II📌" class="headerlink" title="142. Linked List Cycle II📌"></a><a href="https://leetcode.com/problems/linked-list-cycle-ii/">142. Linked List Cycle II</a>📌</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">detectCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head, fast = head;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (fast == <span class="literal">null</span> || fast.next == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">    &#125; <span class="keyword">while</span> (slow != fast);</span><br><span class="line">    fast = head;</span><br><span class="line">    <span class="keyword">while</span> (slow != fast) &#123;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        fast = fast.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="167-Two-Sum-II-Input-array-is-sorted"><a href="#167-Two-Sum-II-Input-array-is-sorted" class="headerlink" title="167. Two Sum II - Input array is sorted"></a><a href="https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/">167. Two Sum II - Input array is sorted</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] numbers, <span class="type">int</span> target) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> numbers.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = len - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> numbers[l] + numbers[r];</span><br><span class="line">        <span class="keyword">if</span> (sum == target) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;l + <span class="number">1</span>, r + <span class="number">1</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">            l += <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            r -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="283-Move-Zeroes"><a href="#283-Move-Zeroes" class="headerlink" title="283. Move Zeroes"></a><a href="https://leetcode.com/problems/move-zeroes/">283. Move Zeroes</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">moveZeroes</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="comment">//i points to available space; pointer j finds non-zero number</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[j] != <span class="number">0</span>) &#123;</span><br><span class="line">            nums[i] = nums[j];</span><br><span class="line">            i += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (; i &lt; nums.length; i++) &#123;</span><br><span class="line">        nums[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="345-Reverse-Vowels-of-a-String"><a href="#345-Reverse-Vowels-of-a-String" class="headerlink" title="345. Reverse Vowels of a String"></a><a href="https://leetcode.com/problems/reverse-vowels-of-a-string/">345. Reverse Vowels of a String</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">reverseVowels</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = s.length() - <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span>[] arr = s.toCharArray();</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r &amp;&amp; !isVowel(arr[l])) &#123;</span><br><span class="line">            l += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r &amp;&amp; !isVowel(arr[r])) &#123;</span><br><span class="line">            r -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(l, r, arr);</span><br><span class="line">        l += <span class="number">1</span>;</span><br><span class="line">        r -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(arr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isVowel</span> <span class="params">(<span class="type">char</span> c)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&#x27;A&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;Z&#x27;</span>) &#123;</span><br><span class="line">        c = (<span class="type">char</span>)(c - <span class="string">&#x27;A&#x27;</span> + <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c == <span class="string">&#x27;a&#x27;</span> || c == <span class="string">&#x27;e&#x27;</span> || c == <span class="string">&#x27;i&#x27;</span> || c == <span class="string">&#x27;o&#x27;</span> || c == <span class="string">&#x27;u&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">char</span>[] s)</span> &#123;</span><br><span class="line">    <span class="type">char</span> <span class="variable">tmp</span> <span class="operator">=</span> s[l];</span><br><span class="line">    s[l] = s[r];</span><br><span class="line">    s[r] = tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="633-Sum-of-Square-Numbers"><a href="#633-Sum-of-Square-Numbers" class="headerlink" title="633. Sum of Square Numbers"></a><a href="https://leetcode.com/problems/sum-of-square-numbers/">633. Sum of Square Numbers</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">judgeSquareSum</span><span class="params">(<span class="type">int</span> c)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = (<span class="type">int</span>)Math.sqrt(c);</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rest</span> <span class="operator">=</span> c - l * l;</span><br><span class="line">        <span class="keyword">if</span> (rest == r * r) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rest &gt; r * r) &#123;</span><br><span class="line">            l += <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            r -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="680-Valid-Palindrome-II"><a href="#680-Valid-Palindrome-II" class="headerlink" title="680. Valid Palindrome II"></a><a href="https://leetcode.com/problems/valid-palindrome-ii/">680. Valid Palindrome II</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">validPalindrome</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = s.length() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.charAt(i) == s.charAt(j)) &#123;</span><br><span class="line">            i += <span class="number">1</span>;</span><br><span class="line">            j -= <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> isValid(s, i+<span class="number">1</span>, j) || isValid(s, i, j-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.charAt(i) != s.charAt(j)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i += <span class="number">1</span>;</span><br><span class="line">        j -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
        <category>Data Structure</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Solutions (3): Algorithm - Binary Search</title>
    <url>/2020/08/22/Leetcode-3-Algorithm-Binary-Search/</url>
    <content><![CDATA[<p>These Leetcode problems can be solved with <em>Binary Search</em> :</p>
<h4 id="4-Median-of-Two-Sorted-Arrays💫"><a href="#4-Median-of-Two-Sorted-Arrays💫" class="headerlink" title="4. Median of Two Sorted Arrays💫"></a><a href="https://leetcode.com/problems/median-of-two-sorted-arrays/">4. Median of Two Sorted Arrays</a>💫</h4><span id="more"></span>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">findMedianSortedArrays</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2)</span> &#123;</span><br><span class="line">        <span class="comment">//nums1 is the shorter one</span></span><br><span class="line">        <span class="keyword">if</span> (nums1.length &gt; nums2.length) &#123;</span><br><span class="line">            <span class="keyword">return</span> findMedianSortedArrays(nums2, nums1);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> nums1.length, n2 = nums2.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = <span class="number">2</span> * n1;</span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">m1</span> <span class="operator">=</span> l + (r - l) / <span class="number">2</span>, m2 = n1 + n2 - m1;</span><br><span class="line">            <span class="type">double</span> <span class="variable">A1</span> <span class="operator">=</span> m1 == <span class="number">0</span>? Integer.MIN_VALUE: nums1[(m1 - <span class="number">1</span>)/ <span class="number">2</span>];</span><br><span class="line">            <span class="type">double</span> <span class="variable">B1</span> <span class="operator">=</span> m1 == <span class="number">2</span> * n1? Integer.MAX_VALUE: nums1[m1 / <span class="number">2</span>];</span><br><span class="line">            <span class="type">double</span> <span class="variable">A2</span> <span class="operator">=</span> m2 == <span class="number">0</span>? Integer.MIN_VALUE: nums2[(m2 - <span class="number">1</span>)/ <span class="number">2</span>];</span><br><span class="line">            <span class="type">double</span> <span class="variable">B2</span> <span class="operator">=</span> m2 == <span class="number">2</span> * n2? Integer.MAX_VALUE: nums2[m2 / <span class="number">2</span>];</span><br><span class="line">            <span class="keyword">if</span> (A1 &gt; B2) &#123;</span><br><span class="line">                r = m1 - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (A2 &gt; B1) &#123;</span><br><span class="line">                l = m1 + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> (Math.max(A1, A2) + Math.min(B1, B2)) / <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="33-Search-in-Rotated-Sorted-Array📌"><a href="#33-Search-in-Rotated-Sorted-Array📌" class="headerlink" title="33. Search in Rotated Sorted Array📌"></a><a href="https://leetcode.com/problems/search-in-rotated-sorted-array/">33. Search in Rotated Sorted Array</a>📌</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> nums[m];</span><br><span class="line">        <span class="keyword">if</span> (mid == target) &#123;</span><br><span class="line">            <span class="keyword">return</span> m;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> nums[l];</span><br><span class="line">        <span class="keyword">if</span> (mid &lt; left) &#123;</span><br><span class="line">            <span class="keyword">if</span> (target &gt; mid &amp;&amp; target &lt; left) &#123;</span><br><span class="line">                l = m + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                r = m - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (target &lt; mid &amp;&amp; target &gt;= left) &#123;</span><br><span class="line">                r = m - <span class="number">1</span>;   </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                l = m + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="34-Find-First-and-Last-Position-of-Element-in-Sorted-Array"><a href="#34-Find-First-and-Last-Position-of-Element-in-Sorted-Array" class="headerlink" title="34. Find First and Last Position of Element in Sorted Array"></a><a href="https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/">34. Find First and Last Position of Element in Sorted Array</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] searchRange(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">lower</span> <span class="operator">=</span> lower_bound(nums, target);</span><br><span class="line">    <span class="type">int</span> <span class="variable">upper</span> <span class="operator">=</span> upper_bound(nums, target);</span><br><span class="line">    <span class="keyword">if</span> (lower &gt; upper || nums[lower] != target) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;lower, upper&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lower_bound</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> l + (r - l) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">upper_bound</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> l + (r - l) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &lt;= target) &#123;</span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="69-Sqrt-x"><a href="#69-Sqrt-x" class="headerlink" title="69. Sqrt(x)"></a><a href="https://leetcode.com/problems/sqrtx/">69. Sqrt(x)</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mySqrt</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">1</span>, r = x;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> l + (r - l) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (mid == x / mid) &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mid &lt; x / mid) &#123;</span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>OR</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mySqrt</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">n</span> <span class="operator">=</span> x;</span><br><span class="line">    <span class="keyword">while</span> (n * n &gt; x) &#123;</span><br><span class="line">        n = (n + x / n) / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">int</span>)n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="81-Search-in-Rotated-Sorted-Array-II"><a href="#81-Search-in-Rotated-Sorted-Array-II" class="headerlink" title="81. Search in Rotated Sorted Array II"></a><a href="https://leetcode.com/problems/search-in-rotated-sorted-array-ii/">81. Search in Rotated Sorted Array II</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> l + (r - l) / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> nums[m];</span><br><span class="line">        <span class="keyword">if</span> (mid == target) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> nums[l];</span><br><span class="line">        <span class="keyword">if</span> (mid == left) &#123;</span><br><span class="line">            l += <span class="number">1</span>; <span class="comment">// cannot tell which part is in order, then increase l</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mid &lt; left) &#123;</span><br><span class="line">            <span class="keyword">if</span> (target &gt; mid &amp;&amp; target &lt; left) &#123;</span><br><span class="line">                l = m + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                r = m - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (target &lt; mid &amp;&amp; target &gt;= left) &#123;</span><br><span class="line">                r = m - <span class="number">1</span>;   </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                l = m + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="154-Find-Minimum-in-Rotated-Sorted-Array-II"><a href="#154-Find-Minimum-in-Rotated-Sorted-Array-II" class="headerlink" title="154. Find Minimum in Rotated Sorted Array II"></a><a href="https://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii/">154. Find Minimum in Rotated Sorted Array II</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findMin</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r &amp;&amp; nums[l] &gt;= nums[r]) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> l + (r-l)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[m] == nums[l]) &#123;</span><br><span class="line">            l++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[m] &gt; nums[l]) &#123;</span><br><span class="line">            l = m + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            r = m;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums[l];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="278-First-Bad-Version"><a href="#278-First-Bad-Version" class="headerlink" title="278. First Bad Version"></a><a href="https://leetcode.com/problems/first-bad-version/">278. First Bad Version</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">firstBadVersion</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">1</span>, r = n;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> l + (r-l)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (isBadVersion(m)) &#123;</span><br><span class="line">            r = m;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            l = m + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="540-Single-Element-in-a-Sorted-Array"><a href="#540-Single-Element-in-a-Sorted-Array" class="headerlink" title="540. Single Element in a Sorted Array"></a><a href="https://leetcode.com/problems/single-element-in-a-sorted-array/">540. Single Element in a Sorted Array</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">singleNonDuplicate</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = nums.length-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> l + (r-l)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (mid % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            mid--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] != nums[mid+<span class="number">1</span>]) &#123;</span><br><span class="line">            r = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            l = mid+<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums[l];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="744-Find-Smallest-Letter-Greater-Than-Target"><a href="#744-Find-Smallest-Letter-Greater-Than-Target" class="headerlink" title="744. Find Smallest Letter Greater Than Target"></a><a href="https://leetcode.com/problems/find-smallest-letter-greater-than-target/">744. Find Smallest Letter Greater Than Target</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">char</span> <span class="title function_">nextGreatestLetter</span><span class="params">(<span class="type">char</span>[] letters, <span class="type">char</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = letters.length;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> l + (r-l)/<span class="number">2</span>;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> letters[mid];</span><br><span class="line">        <span class="keyword">if</span> (c &lt; target+<span class="number">1</span>) &#123;<span class="comment">//target+1: smallest element that is larger than target</span></span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            r = mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (l == letters.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> letters[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> letters[l];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Solutions (4): Algorithm - Sort</title>
    <url>/2020/10/15/Leetcode-4-Algorithm-Sort/</url>
    <content><![CDATA[<p>These Leetcode problems can be solved with <em>Sort</em> : </p>
<h4 id="75-Sort-Colors"><a href="#75-Sort-Colors" class="headerlink" title="75. Sort Colors"></a><a href="https://leetcode.com/problems/sort-colors/">75. Sort Colors</a></h4><span id="more"></span> 
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sortColors</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">0</span>, mid = <span class="number">0</span>, high = nums.length-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (mid &lt;= high) &#123;</span><br><span class="line">        <span class="keyword">switch</span>(nums[mid]) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                swap(nums, low, mid);</span><br><span class="line">                low++; mid++; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                mid++;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                swap(nums, mid, high);</span><br><span class="line">                high--; <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">    nums[i] = nums[j];</span><br><span class="line">    nums[j] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="215-Kth-Largest-Element-in-an-Array💫"><a href="#215-Kth-Largest-Element-in-an-Array💫" class="headerlink" title="215. Kth Largest Element in an Array💫"></a><a href="https://leetcode.com/problems/kth-largest-element-in-an-array/">215. Kth Largest Element in an Array</a>💫</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findKthLargest</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = nums.length - <span class="number">1</span>, target = nums.length - k;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> quickSelection(nums, l, r);</span><br><span class="line">        <span class="keyword">if</span> (mid == target) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums[mid];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mid &lt; target) &#123;</span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums[l];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//similar to Quicksort</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">quickSelection</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> l + <span class="number">1</span>, j = r;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; r &amp;&amp; nums[i] &lt;= nums[l]) &#123;</span><br><span class="line">            i += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; j &amp;&amp; nums[j] &gt;= nums[l]) &#123;</span><br><span class="line">            j -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= j) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(nums, i, j);</span><br><span class="line">    &#125;</span><br><span class="line">    swap(nums, l, j);</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">    nums[i] = nums[j];</span><br><span class="line">    nums[j] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="347-Top-K-Frequent-Elements💫"><a href="#347-Top-K-Frequent-Elements💫" class="headerlink" title="347. Top K Frequent Elements💫"></a><a href="https://leetcode.com/problems/top-k-frequent-elements/">347. Top K Frequent Elements</a>💫</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Bucket Sort</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] topKFrequent(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">    HashMap &lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num: nums) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">freq</span> <span class="operator">=</span> map.getOrDefault(num, <span class="number">0</span>) + <span class="number">1</span>;</span><br><span class="line">        map.put(num, freq);</span><br><span class="line">    &#125;</span><br><span class="line">    PriorityQueue &lt;<span class="type">int</span>[]&gt; q = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(map.size(), <span class="keyword">new</span> <span class="title class_">Comparator</span> &lt;<span class="type">int</span>[]&gt; () &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] p1, <span class="type">int</span>[] p2)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> p2[<span class="number">0</span>] - p1[<span class="number">0</span>]; <span class="comment">// reverse sort by frequency</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry &lt;Integer, Integer&gt; entry: map.entrySet()) &#123;</span><br><span class="line">        q.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;entry.getValue(), entry.getKey()&#125;); <span class="comment">// add to queue</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[k];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">        <span class="type">int</span>[] p = q.poll();</span><br><span class="line">        ans[i] = p[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="451-Sort-Characters-By-Frequency"><a href="#451-Sort-Characters-By-Frequency" class="headerlink" title="451. Sort Characters By Frequency"></a><a href="https://leetcode.com/problems/sort-characters-by-frequency/">451. Sort Characters By Frequency</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Bucket Sort</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    <span class="type">int</span> freq;</span><br><span class="line">    Node(<span class="type">char</span> c, <span class="type">int</span> freq) &#123;</span><br><span class="line">        <span class="built_in">this</span>.c = c;</span><br><span class="line">        <span class="built_in">this</span>.freq = freq;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">frequencySort</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (s.length() &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">    HashMap &lt;Character, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">        map.put(c, map.getOrDefault(c, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    PriorityQueue &lt;Node&gt; q = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="keyword">new</span> <span class="title class_">Comparator</span> &lt;Node&gt; () &#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span> <span class="params">(Node a, Node b)</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> b.freq - a.freq;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry &lt;Character, Integer&gt; entry: map.entrySet())&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">freq</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(c, freq);</span><br><span class="line">        q.offer(node);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="keyword">while</span> (!q.isEmpty()) &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> q.poll();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; node.freq; i++) &#123;</span><br><span class="line">            ans.append(node.c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Following concludes the general implementation of each sort algorithm:</p>
<ul>
<li>Quick Sort</li>
<li>Merge Sort</li>
<li>Insertion Sort</li>
<li>Bubble Sort</li>
<li>Selection Sort</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] nums = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span>[] temp = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">    quick_sort(nums, <span class="number">0</span>, nums.length);</span><br><span class="line">    merge_sort(nums, <span class="number">0</span>, nums.length, temp);</span><br><span class="line">    insertion_sort(nums, nums.length);</span><br><span class="line">    bubble_sort(nums, nums.length);</span><br><span class="line">    selection_sort(nums, nums.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Quicksort"><a href="#Quicksort" class="headerlink" title="Quicksort"></a>Quicksort</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quick_sort</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (l + <span class="number">1</span> &gt;= r) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">first</span> <span class="operator">=</span> l, last = r - <span class="number">1</span>, key = nums[first];</span><br><span class="line">    <span class="keyword">while</span>(first &lt; last)&#123;</span><br><span class="line">        <span class="keyword">while</span>(first &lt; last &amp;&amp; nums[last] &gt;= key) &#123;</span><br><span class="line">            last -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        nums[first] = nums[last];</span><br><span class="line">        <span class="keyword">while</span> (first &lt; last &amp;&amp; nums[first] &lt;= key) &#123;</span><br><span class="line">            first += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        nums[last] = nums[first];</span><br><span class="line">    &#125;</span><br><span class="line">    nums[first] = key;</span><br><span class="line">    quick_sort(nums, l, first);</span><br><span class="line">    quick_sort(nums, first + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Merge-Sort"><a href="#Merge-Sort" class="headerlink" title="Merge Sort"></a>Merge Sort</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">merge_sort</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span>[] temp)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (l + <span class="number">1</span> &gt;= r) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// divide</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> l + (r - l) / <span class="number">2</span>;</span><br><span class="line">    merge_sort(nums, l, m, temp);</span><br><span class="line">    merge_sort(nums, m, r, temp);</span><br><span class="line">    <span class="comment">// conquer</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> l, q = m, i = l;</span><br><span class="line">    <span class="keyword">while</span> (p &lt; m || q &lt; r) &#123;</span><br><span class="line">        <span class="keyword">if</span> (q &gt;= r || (p &lt; m &amp;&amp; nums[p] &lt;= nums[q])) &#123;</span><br><span class="line">            temp[i++] = nums[p++];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            temp[i++] = nums[q++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = l; i &lt; r; i++) &#123;</span><br><span class="line">        nums[i] = temp[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Insertion-Sort"><a href="#Insertion-Sort" class="headerlink" title="Insertion Sort"></a>Insertion Sort</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertion_sort</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &gt; <span class="number">0</span> &amp;&amp; nums[j] &lt; nums[j-<span class="number">1</span>]; j--) &#123;</span><br><span class="line">            swap(nums[j], nums[j-<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Bubble-Sort"><a href="#Bubble-Sort" class="headerlink" title="Bubble Sort"></a>Bubble Sort</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bubble_sort</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">swapped</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; n - i + <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[j] &lt; nums[j-<span class="number">1</span>]) &#123;</span><br><span class="line">                swap(nums[j], nums[j-<span class="number">1</span>]);</span><br><span class="line">                swapped = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!swapped) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Selection-Sort"><a href="#Selection-Sort" class="headerlink" title="Selection Sort"></a>Selection Sort</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selection_sort</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[j] &lt; nums[mid]) &#123;</span><br><span class="line">                mid = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(nums[mid], nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Solutions (5): Algorithm - Backtracking</title>
    <url>/2020/12/05/Leetcode-5-Algorithm-Backtracking/</url>
    <content><![CDATA[<p>These Leetcode problems can be solved with <em>Backtracking</em> :</p>
<h4 id="37-Sudoku-Solver"><a href="#37-Sudoku-Solver" class="headerlink" title="37. Sudoku Solver"></a><a href="https://leetcode.com/problems/sudoku-solver/">37. Sudoku Solver</a></h4><span id="more"></span>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">solveSudoku</span><span class="params">(<span class="type">char</span>[][] board)</span> &#123;</span><br><span class="line">    solve(board);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">solve</span> <span class="params">(<span class="type">char</span>[][] board)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; board.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; board[i].length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[i][j] == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span>; k &lt;= <span class="number">9</span>; k++) &#123;</span><br><span class="line">                    board[i][j] = (<span class="type">char</span>)(<span class="string">&#x27;0&#x27;</span> + k);</span><br><span class="line">                    <span class="keyword">if</span> (isValid(board, i, j) &amp;&amp; solve(board)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    board[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(<span class="type">char</span>[][] board, <span class="type">int</span> row, <span class="type">int</span> col)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i != row &amp;&amp; board[i][col] == board[row][col]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">9</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (j != col &amp;&amp; board[row][j] == board[row][col]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span> * (row / <span class="number">3</span>); i &lt; <span class="number">3</span> * (row / <span class="number">3</span> + <span class="number">1</span>); i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">3</span> * (col / <span class="number">3</span>); j &lt; <span class="number">3</span> * (col / <span class="number">3</span> + <span class="number">1</span>); j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != row &amp;&amp; j != col &amp;&amp; board[i][j] == board[row][col]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="39-Combination-Sum"><a href="#39-Combination-Sum" class="headerlink" title="39. Combination Sum"></a><a href="https://leetcode.com/problems/combination-sum/">39. Combination Sum</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    backtracking(candidates, ans, target, <span class="keyword">new</span> <span class="title class_">ArrayList</span>(), <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtracking</span> <span class="params">(<span class="type">int</span>[] candidates, List&lt;List&lt;Integer&gt;&gt; ans, <span class="type">int</span> target, ArrayList &lt;Integer&gt; list, <span class="type">int</span> pos)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">        ans.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(list));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (target &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> pos; i &lt; candidates.length; i++) &#123;</span><br><span class="line">        list.add(candidates[i]);</span><br><span class="line">        backtracking(candidates, ans, target-candidates[i], list, i);</span><br><span class="line">        list.remove(list.size()-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="40-Combination-Sum-II"><a href="#40-Combination-Sum-II" class="headerlink" title="40. Combination Sum II"></a><a href="https://leetcode.com/problems/combination-sum-ii/">40. Combination Sum II</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum2</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    Arrays.sort(candidates); <span class="comment">// new to Q39</span></span><br><span class="line">    backtracking(candidates, ans, target, <span class="keyword">new</span> <span class="title class_">ArrayList</span>(), <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtracking</span> <span class="params">(<span class="type">int</span>[] candidates, List&lt;List&lt;Integer&gt;&gt; ans, <span class="type">int</span> target, ArrayList &lt;Integer&gt; list, <span class="type">int</span> pos)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">        ans.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(list));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (target &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    HashSet&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> pos; i &lt; candidates.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (set.add(candidates[i])) &#123;  <span class="comment">// new to Q39</span></span><br><span class="line">            list.add(candidates[i]);</span><br><span class="line">            backtracking(candidates, ans, target-candidates[i], list, i+<span class="number">1</span>);<span class="comment">// new to Q39</span></span><br><span class="line">            list.remove(list.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="46-Permutations"><a href="#46-Permutations" class="headerlink" title="46. Permutations"></a><a href="https://leetcode.com/problems/permutations/">46. Permutations</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">permute</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    backtracking(nums, ans, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span>[] nums, List&lt;List&lt;Integer&gt;&gt; ans, <span class="type">int</span> level)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (level == nums.length - <span class="number">1</span>) &#123;</span><br><span class="line">        List &lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num: nums) &#123;</span><br><span class="line">            list.add(num);</span><br><span class="line">        &#125;</span><br><span class="line">        ans.add(list);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> level; i &lt; nums.length; i++) &#123;</span><br><span class="line">        swap(nums, i, level);</span><br><span class="line">        backtracking(nums, ans, level+<span class="number">1</span>);</span><br><span class="line">        swap(nums, i, level);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">    nums[i] = nums[j];</span><br><span class="line">    nums[j] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="47-Permutations-II"><a href="#47-Permutations-II" class="headerlink" title="47. Permutations II"></a><a href="https://leetcode.com/problems/permutations-ii/">47. Permutations II</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">permuteUnique</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    backtracking(nums, ans, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span>[] nums, List&lt;List&lt;Integer&gt;&gt; ans, <span class="type">int</span> level)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (level == nums.length - <span class="number">1</span>) &#123;</span><br><span class="line">        List &lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num: nums) &#123;</span><br><span class="line">            list.add(num);</span><br><span class="line">        &#125;</span><br><span class="line">        ans.add(list);</span><br><span class="line">    &#125;</span><br><span class="line">    Set &lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>(); <span class="comment">// new to Q46</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> level; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (set.add(nums[i])) &#123; <span class="comment">// new to Q46</span></span><br><span class="line">            swap(nums, i, level);</span><br><span class="line">            backtracking(nums, ans, level+<span class="number">1</span>);</span><br><span class="line">            swap(nums, i, level);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">    nums[i] = nums[j];</span><br><span class="line">    nums[j] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="51-N-Queens"><a href="#51-N-Queens" class="headerlink" title="51. N-Queens"></a><a href="https://leetcode.com/problems/n-queens/">51. N-Queens</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">solveNQueens</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">char</span>[][] board = <span class="keyword">new</span> <span class="title class_">char</span>[n][n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            board[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;List&lt;String&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    backtracking(board, <span class="number">0</span>, n, ans);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">char</span>[][] board, <span class="type">int</span> row, <span class="type">int</span> n, List&lt;List&lt;String&gt;&gt; ans)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (row == n) &#123;</span><br><span class="line">        List&lt;String&gt; solution = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">char</span>[] line = board[i];</span><br><span class="line">            solution.add(<span class="keyword">new</span> <span class="title class_">String</span>(line));</span><br><span class="line">        &#125;</span><br><span class="line">        ans.add(solution);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">        board[row][j] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (isValid(board, row, j, n)) &#123;</span><br><span class="line">            backtracking(board, row+<span class="number">1</span>, n, ans);</span><br><span class="line">        &#125;</span><br><span class="line">        board[row][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(<span class="type">char</span>[][] board, <span class="type">int</span> row, <span class="type">int</span> col, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i != row &amp;&amp; board[i][col] == <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i_ldiag</span> <span class="operator">=</span> row - Math.min(row, col);</span><br><span class="line">    <span class="type">int</span> <span class="variable">j_ldiag</span> <span class="operator">=</span> col - Math.min(row, col);</span><br><span class="line">    <span class="keyword">while</span> (i_ldiag &lt; n &amp;&amp; j_ldiag &lt; n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i_ldiag != row &amp;&amp; board[i_ldiag][j_ldiag] == <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i_ldiag++; j_ldiag++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i_rdiag</span> <span class="operator">=</span> row - Math.min(row, n-<span class="number">1</span>-col);</span><br><span class="line">    <span class="type">int</span> <span class="variable">j_rdiag</span> <span class="operator">=</span> col + Math.min(row, n-<span class="number">1</span>-col);</span><br><span class="line">    <span class="keyword">while</span> (i_rdiag &lt; n &amp;&amp; j_rdiag &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i_rdiag != row &amp;&amp; board[i_rdiag][j_rdiag] == <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i_rdiag++; j_rdiag--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>OR</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">solveNQueens</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    List&lt;List&lt;String&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span>[][] board = <span class="keyword">new</span> <span class="title class_">char</span>[n][n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span>[] row: board) &#123;</span><br><span class="line">        Arrays.fill(row, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span>[] column = <span class="keyword">new</span> <span class="title class_">boolean</span>[n];</span><br><span class="line">    <span class="type">boolean</span>[] ldiag = <span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">2</span>*n];</span><br><span class="line">    <span class="type">boolean</span>[] rdiag = <span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">2</span>*n];</span><br><span class="line">    backtracking(ans, board, column, ldiag, rdiag, <span class="number">0</span>, n);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(List&lt;List&lt;String&gt;&gt; ans, <span class="type">char</span>[][] board, <span class="type">boolean</span>[] column, <span class="type">boolean</span>[] ldiag, <span class="type">boolean</span>[] rdiag, <span class="type">int</span> row, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (row == n) &#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span>[] r: board) &#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> <span class="title class_">String</span>(r));</span><br><span class="line">        &#125;</span><br><span class="line">        ans.add(list);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (column[i] || ldiag[n-row+i-<span class="number">1</span>] || rdiag[row+i+<span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        board[row][i] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">        column[i] = ldiag[n-row+i-<span class="number">1</span>] = rdiag[row+i+<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">        backtracking(ans, board, column, ldiag, rdiag, row+<span class="number">1</span>, n);</span><br><span class="line">        board[row][i] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">        column[i] = ldiag[n-row+i-<span class="number">1</span>] = rdiag[row+i+<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="77-Combinations"><a href="#77-Combinations" class="headerlink" title="77. Combinations"></a><a href="https://leetcode.com/problems/combinations/">77. Combinations</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combine</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    dfs(ans, n, k, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;(), <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; ans, <span class="type">int</span> n, <span class="type">int</span> k, ArrayList&lt;Integer&gt; list, <span class="type">int</span> pos)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (list.size() == k) &#123;</span><br><span class="line">        ans.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(list));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> pos; i &lt;= n; i++) &#123;</span><br><span class="line">        list.add(i);</span><br><span class="line">        dfs(ans, n, k, list, i+<span class="number">1</span>);</span><br><span class="line">        list.remove(list.size()-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="78-Subsets"><a href="#78-Subsets" class="headerlink" title="78. Subsets"></a><a href="https://leetcode.com/problems/subsets/">78. Subsets</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">subsets</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    backtracking(ans, nums, <span class="keyword">new</span> <span class="title class_">ArrayList</span>(), <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtracking</span> <span class="params">(List&lt;List&lt;Integer&gt;&gt; ans, <span class="type">int</span>[] nums, List&lt;Integer&gt; list, <span class="type">int</span> pos)</span> &#123;</span><br><span class="line">    ans.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(list));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> pos; i &lt; nums.length; i++) &#123;</span><br><span class="line">        list.add(nums[i]);</span><br><span class="line">        backtracking(ans, nums, list, i+<span class="number">1</span>);</span><br><span class="line">        list.remove(list.size()-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="79-Word-Search"><a href="#79-Word-Search" class="headerlink" title="79. Word Search"></a><a href="https://leetcode.com/problems/word-search/">79. Word Search</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// solution: @pavel-shlyk http://shorturl.at/jrtKX</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">exist</span><span class="params">(<span class="type">char</span>[][] board, String word)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; board.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; board[i].length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (backtracking(board, word, <span class="number">0</span>, i, j)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">backtracking</span> <span class="params">(<span class="type">char</span>[][] board, String word, <span class="type">int</span> level, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (level == word.length()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">0</span> || j &lt; <span class="number">0</span> || i &gt;= board.length || j &gt;= board[i].length || board[i][j] != word.charAt(level)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    board[i][j] ^= <span class="number">256</span>; <span class="comment">//explanation: @rishiloyola98245 http://shorturl.at/qvBP0</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">find</span> <span class="operator">=</span> backtracking(board, word, level+<span class="number">1</span>, i+<span class="number">1</span>, j) ||</span><br><span class="line">                    backtracking(board, word, level+<span class="number">1</span>, i-<span class="number">1</span>, j) ||</span><br><span class="line">                    backtracking(board, word, level+<span class="number">1</span>, i, j+<span class="number">1</span>) ||</span><br><span class="line">                    backtracking(board, word, level+<span class="number">1</span>, i, j-<span class="number">1</span>);</span><br><span class="line">    board[i][j] ^= <span class="number">256</span>;</span><br><span class="line">    <span class="keyword">return</span> find;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="90-Subsets-II"><a href="#90-Subsets-II" class="headerlink" title="90. Subsets II"></a><a href="https://leetcode.com/problems/subsets-ii/">90. Subsets II</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">subsetsWithDup</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    Arrays.sort(nums);<span class="comment">// new to Q78</span></span><br><span class="line">    backtracking(ans, nums, <span class="keyword">new</span> <span class="title class_">ArrayList</span>(), <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; ans, <span class="type">int</span>[] nums, List&lt;Integer&gt; list, <span class="type">int</span> pos)</span> &#123;</span><br><span class="line">    ans.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(list));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> pos; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i != pos &amp;&amp; nums[i-<span class="number">1</span>] == nums[i]) &#123;<span class="keyword">continue</span>;&#125; <span class="comment">// new to Q78</span></span><br><span class="line">        list.add(nums[i]);</span><br><span class="line">        backtracking(ans, nums, list, i+<span class="number">1</span>);</span><br><span class="line">        list.remove(list.size()-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="131-Palindrome-Partitioning"><a href="#131-Palindrome-Partitioning" class="headerlink" title="131. Palindrome Partitioning"></a><a href="https://leetcode.com/problems/palindrome-partitioning/">131. Palindrome Partitioning</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">partition</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    List&lt;List&lt;String&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    backtracking(ans, s, <span class="keyword">new</span> <span class="title class_">ArrayList</span>(), <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(List&lt;List&lt;String&gt;&gt; ans, String s, List&lt;String&gt; list, <span class="type">int</span> pos)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (pos == s.length()) &#123;</span><br><span class="line">        ans.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(list));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> pos; i &lt; s.length(); i++) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sub</span> <span class="operator">=</span> s.substring(pos, i+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (isValid(sub)) &#123;</span><br><span class="line">            list.add(sub);</span><br><span class="line">            backtracking(ans, s, list, i+<span class="number">1</span>);</span><br><span class="line">            list.remove(list.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = s.length() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= j &amp;&amp; s.charAt(i) == s.charAt(j)) &#123;</span><br><span class="line">        i++;</span><br><span class="line">        j--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i &gt; j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="216-Combination-Sum-III"><a href="#216-Combination-Sum-III" class="headerlink" title="216. Combination Sum III"></a><a href="https://leetcode.com/problems/combination-sum-iii/">216. Combination Sum III</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum3</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    backtracking(ans, k, n, <span class="keyword">new</span> <span class="title class_">ArrayList</span>(), <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtracking</span> <span class="params">(List&lt;List&lt;Integer&gt;&gt; ans, <span class="type">int</span> k, <span class="type">int</span> n, List&lt;Integer&gt; list, <span class="type">int</span> pos)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (list.size() == k &amp;&amp; n == <span class="number">0</span>) &#123;</span><br><span class="line">        ans.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(list));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (list.size() &gt;= k || n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> pos; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">        list.add(i);</span><br><span class="line">        backtracking(ans, k, n-i, list, i+<span class="number">1</span>);</span><br><span class="line">        list.remove(list.size()-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="257-Binary-Tree-Paths"><a href="#257-Binary-Tree-Paths" class="headerlink" title="257. Binary Tree Paths"></a><a href="https://leetcode.com/problems/binary-tree-paths/">257. Binary Tree Paths</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">binaryTreePaths</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    List &lt;String&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    backtracking(ans, <span class="string">&quot;&quot;</span>, root);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtracking</span> <span class="params">(List &lt;String&gt; ans, String s, TreeNode node)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    s += node.val;</span><br><span class="line">    <span class="keyword">if</span> (node.left != <span class="literal">null</span>) &#123;</span><br><span class="line">        backtracking(ans, s + <span class="string">&quot;-&gt;&quot;</span>, node.left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">        backtracking(ans, s + <span class="string">&quot;-&gt;&quot;</span>, node.right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (node.left == <span class="literal">null</span> &amp;&amp; node.right == <span class="literal">null</span>) &#123;</span><br><span class="line">        ans.add(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Solutions (7): Algorithm - Divide &amp; Conquer</title>
    <url>/2021/03/06/Leetcode-7-Algorithm-DC/</url>
    <content><![CDATA[<p>These Leetcode problems can be solved with <em>Divide &amp; Conquer</em> :</p>
<h4 id="241-Different-Ways-to-Add-Parentheses"><a href="#241-Different-Ways-to-Add-Parentheses" class="headerlink" title="241. Different Ways to Add Parentheses"></a><a href="https://leetcode.com/problems/different-ways-to-add-parentheses/">241. Different Ways to Add Parentheses</a></h4><span id="more"></span>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">diffWaysToCompute</span><span class="params">(String input)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Integer&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> input.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> input.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span> || c == <span class="string">&#x27;*&#x27;</span> || c == <span class="string">&#x27;+&#x27;</span> ) &#123;</span><br><span class="line">                List&lt;Integer&gt; left = diffWaysToCompute(input.substring(<span class="number">0</span>, i));</span><br><span class="line">                List&lt;Integer&gt; right = diffWaysToCompute(input.substring(i + <span class="number">1</span>));</span><br><span class="line">                <span class="keyword">for</span> (Integer p1: left) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (Integer p2 :   right) &#123;</span><br><span class="line">                        <span class="keyword">switch</span> (c) &#123;</span><br><span class="line">                            <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">                                res.add(p1 + p2);</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                                res.add(p1 - p2);</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                                res.add(p1 * p2);</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (res.isEmpty()) &#123;</span><br><span class="line">            res.add(Integer.valueOf(input));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Leetcode</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Solutions (6): Algorithm - Dynamic Programming</title>
    <url>/2021/02/27/Leetcode-6-Algorithm-DP/</url>
    <content><![CDATA[<p>These Leetcode problems can be solved with <em>Dynamic Programming</em> :</p>
<h4 id="10-Regular-Expression-Matching"><a href="#10-Regular-Expression-Matching" class="headerlink" title="10. Regular Expression Matching"></a><a href="https://leetcode.com/problems/regular-expression-matching/">10. Regular Expression Matching</a></h4><span id="more"></span>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isMatch</span><span class="params">(String s, String p)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> s.length(), n = p.length();</span><br><span class="line">        <span class="type">boolean</span>[][] dp = <span class="keyword">new</span> <span class="title class_">boolean</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p.charAt(i - <span class="number">1</span>) == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                dp[<span class="number">0</span>][i] = dp[<span class="number">0</span>][i - <span class="number">2</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (p.charAt(j - <span class="number">1</span>) == <span class="string">&#x27;.&#x27;</span> || p.charAt(j - <span class="number">1</span>) == s.charAt(i - <span class="number">1</span>)) &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p.charAt(j - <span class="number">1</span>) == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                    <span class="comment">//extra || single || zero || delete</span></span><br><span class="line">                    <span class="keyword">if</span> (p.charAt(j - <span class="number">2</span>) == s.charAt(i - <span class="number">1</span>) || p.charAt(j - <span class="number">2</span>) == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                        dp[i][j] = dp[i - <span class="number">1</span>][j] || dp[i - <span class="number">1</span>][j - <span class="number">1</span>] || dp[i][j - <span class="number">1</span>] || dp[i][j - <span class="number">2</span>];</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        dp[i][j] = dp[i][j - <span class="number">2</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="53-Maximum-Subarray"><a href="#53-Maximum-Subarray" class="headerlink" title="53. Maximum Subarray"></a><a href="https://leetcode.com/problems/maximum-subarray/">53. Maximum Subarray</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxSubArray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> nums[<span class="number">0</span>], sum = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            sum += nums[i];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sum = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        max = Math.max(max, sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="62-Unique-Paths"><a href="#62-Unique-Paths" class="headerlink" title="62. Unique Paths"></a><a href="https://leetcode.com/problems/unique-paths/">62. Unique Paths</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">uniquePaths</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    Arrays.fill(dp, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            dp[j] = dp[j] + dp[j-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="64-Minimum-Path-Sum"><a href="#64-Minimum-Path-Sum" class="headerlink" title="64. Minimum Path Sum"></a><a href="https://leetcode.com/problems/minimum-path-sum/">64. Minimum Path Sum</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minPathSum</span><span class="params">(<span class="type">int</span>[][] grid)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> grid.length, n = grid[<span class="number">0</span>].length;</span><br><span class="line">    <span class="type">int</span>[][] path = <span class="keyword">new</span> <span class="title class_">int</span>[m][n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span> &amp;&amp; j == <span class="number">0</span>) &#123;</span><br><span class="line">                path[i][j] = grid[i][j];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">                path[i][j] = grid[i][j] + path[i][j-<span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j == <span class="number">0</span>) &#123;</span><br><span class="line">                path[i][j] = grid[i][j] + path[i-<span class="number">1</span>][j];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                path[i][j] = Math.min(path[i-<span class="number">1</span>][j], path[i][j-<span class="number">1</span>]) + grid[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> path[m-<span class="number">1</span>][n-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>OR</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//compress space to O(n)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minPathSum</span><span class="params">(<span class="type">int</span>[][] grid)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> grid.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> grid[<span class="number">0</span>].length;    </span><br><span class="line">    <span class="type">int</span>[] memory = <span class="keyword">new</span> <span class="title class_">int</span>[col];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span> &amp;&amp; j == <span class="number">0</span>) &#123;</span><br><span class="line">                memory[j] = grid[i][j];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">                memory[j] = memory[j - <span class="number">1</span>] + grid[i][j];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j == <span class="number">0</span>) &#123;</span><br><span class="line">                memory[j] = memory[j] + grid[i][j];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                memory[j] = Math.min(memory[j - <span class="number">1</span>], memory[j]) + grid[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> memory[col - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="70-Climbing-Stairs"><a href="#70-Climbing-Stairs" class="headerlink" title="70. Climbing Stairs"></a><a href="https://leetcode.com/problems/climbing-stairs/">70. Climbing Stairs</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//O(n) space</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">2</span>) <span class="keyword">return</span> n;</span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span>; dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        dp[i] = dp[i-<span class="number">1</span>] + dp[i-<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>OR</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//O(1) space</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">2</span>) <span class="keyword">return</span> n;</span><br><span class="line">    <span class="type">int</span> <span class="variable">pre2</span> <span class="operator">=</span> <span class="number">1</span>, pre1 = <span class="number">2</span>, cur;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cur = pre2 + pre1;</span><br><span class="line">        pre2 = pre1;</span><br><span class="line">        pre1 = cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pre1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="72-Edit-Distance"><a href="#72-Edit-Distance" class="headerlink" title="72. Edit Distance"></a><a href="https://leetcode.com/problems/edit-distance/">72. Edit Distance</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDistance</span><span class="params">(String word1, String word2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> word1.length(), n = word2.length();</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">                    dp[i][j] = j;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j == <span class="number">0</span>) &#123;</span><br><span class="line">                    dp[i][j] = i;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (word1.charAt(i - <span class="number">1</span>) == word2.charAt(j - <span class="number">1</span>)) &#123;</span><br><span class="line">                    dp[i][j] = Math.min(dp[i - <span class="number">1</span>][j - <span class="number">1</span>],</span><br><span class="line">                                        Math.min(dp[i - <span class="number">1</span>][j] + <span class="number">1</span>,</span><br><span class="line">                                                dp[i][j - <span class="number">1</span>] + <span class="number">1</span>));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = Math.min(dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>,</span><br><span class="line">                                        Math.min(dp[i - <span class="number">1</span>][j] + <span class="number">1</span>,</span><br><span class="line">                                                dp[i][j - <span class="number">1</span>] + <span class="number">1</span>));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="91-Decode-Ways"><a href="#91-Decode-Ways" class="headerlink" title="91. Decode Ways"></a><a href="https://leetcode.com/problems/decode-ways/">91. Decode Ways</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numDecodings</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (s.charAt(<span class="number">0</span>) == <span class="string">&#x27;0&#x27;</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span>; dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">prev</span> <span class="operator">=</span> s.charAt(<span class="number">0</span>) - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> s.charAt(i-<span class="number">1</span>) - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> ((prev == <span class="number">0</span> || prev &gt; <span class="number">2</span>) &amp;&amp; cur == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (prev == <span class="number">1</span> || (prev == <span class="number">2</span> &amp;&amp; cur &lt;= <span class="number">6</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cur == <span class="number">0</span>) &#123;</span><br><span class="line">                dp[i] = dp[i-<span class="number">2</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i] = dp[i-<span class="number">1</span>] + dp[i-<span class="number">2</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dp[i] = dp[i-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        prev = cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="121-Best-Time-to-Buy-and-Sell-Stock"><a href="#121-Best-Time-to-Buy-and-Sell-Stock" class="headerlink" title="121. Best Time to Buy and Sell Stock"></a><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock/">121. Best Time to Buy and Sell Stock</a></h4><p><a href="https://github.com/labuladong/fucking-algorithm/blob/master/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%9B%A2%E7%81%AD%E8%82%A1%E7%A5%A8%E9%97%AE%E9%A2%98.md">股票问题</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> prices[<span class="number">0</span>], profit = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (min &lt; prices[i]) &#123;</span><br><span class="line">            profit = Math.max(profit, prices[i] - min);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            min = prices[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> profit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="123-Best-Time-to-Buy-and-Sell-Stock-III"><a href="#123-Best-Time-to-Buy-and-Sell-Stock-III" class="headerlink" title="123. Best Time to Buy and Sell Stock III"></a><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/">123. Best Time to Buy and Sell Stock III</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">buy1</span> <span class="operator">=</span> prices[<span class="number">0</span>], buy2 = -prices[<span class="number">0</span>], profit1 = <span class="number">0</span>, profit2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (buy1 &gt; prices[i]) &#123;</span><br><span class="line">            buy1 = prices[i];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            profit1 = Math.max(profit1, prices[i] - buy1);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (buy2 &lt; profit1 - prices[i]) &#123;</span><br><span class="line">            buy2 = profit1 - prices[i];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            profit2 = Math.max(profit2, prices[i] + buy2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> profit2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>OR</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//dp[i][1][0] = Math.max(dp[i-1][1][0], dp[i-1][1][1] + prices[i])</span></span><br><span class="line"><span class="comment">//dp[i][1][1] = Math.max(dp[i-1][1][1], dp[i-1][0][0] - prices[i])</span></span><br><span class="line"><span class="comment">//dp[i][2][0] = Math.max(dp[i-1][2][0], dp[i-1][2][1] + prices[i])</span></span><br><span class="line"><span class="comment">//dp[i][2][1] = Math.max(dp[i-1][2][1], dp[i-1][1][0] - prices[i])</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">dp_i10</span> <span class="operator">=</span> <span class="number">0</span>, dp_i11 = Integer.MIN_VALUE;</span><br><span class="line">    <span class="type">int</span> <span class="variable">dp_i20</span> <span class="operator">=</span> <span class="number">0</span>, dp_i21 = Integer.MIN_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> price: prices) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">prev_i10</span> <span class="operator">=</span> dp_i10;</span><br><span class="line">        dp_i10 = Math.max(prev_i10, dp_i11 + price);</span><br><span class="line">        dp_i11 = Math.max(dp_i11, - price);</span><br><span class="line">        dp_i20 = Math.max(dp_i20, dp_i21 + price);</span><br><span class="line">        dp_i21 = Math.max(dp_i21, prev_i10 - price);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp_i20;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="139-Word-Break"><a href="#139-Word-Break" class="headerlink" title="139. Word Break"></a><a href="https://leetcode.com/problems/word-break/">139. Word Break</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">wordBreak</span><span class="params">(String s, List&lt;String&gt; wordDict)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">    <span class="type">boolean</span>[] dp = <span class="keyword">new</span> <span class="title class_">boolean</span>[n+<span class="number">1</span>];</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (String word: wordDict) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> word.length();</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= len &amp;&amp; s.substring(i - len, i).equals(word)) &#123;</span><br><span class="line">                dp[i] = dp[i] || dp[i - len];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="188-Best-Time-to-Buy-and-Sell-Stock-IV"><a href="#188-Best-Time-to-Buy-and-Sell-Stock-IV" class="headerlink" title="188. Best Time to Buy and Sell Stock IV"></a><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/">188. Best Time to Buy and Sell Stock IV</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// similar to Q121, Q123</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (prices.length &lt; <span class="number">2</span> || k == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (k &gt;= prices.length) <span class="keyword">return</span> maxProfitUnlimited(prices);</span><br><span class="line">    <span class="type">int</span>[] buy = <span class="keyword">new</span> <span class="title class_">int</span>[k+<span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span>[] profit = <span class="keyword">new</span> <span class="title class_">int</span>[k+<span class="number">1</span>];</span><br><span class="line">    Arrays.fill(buy, -prices[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= k; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (buy[j] &lt; profit[j-<span class="number">1</span>] - prices[i]) &#123;</span><br><span class="line">                buy[j] = profit[j-<span class="number">1</span>] - prices[i];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                profit[j] = Math.max(profit[j], prices[i] + buy[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> profit[k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">maxProfitUnlimited</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">profit</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (prices[i] &gt; prices[i-<span class="number">1</span>]) &#123;</span><br><span class="line">            profit += prices[i] - prices[i-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> profit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="198-House-Robber"><a href="#198-House-Robber" class="headerlink" title="198. House Robber"></a><a href="https://leetcode.com/problems/house-robber/">198. House Robber</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//O(n) space</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rob</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">1</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            dp[i] = Math.max(dp[i-<span class="number">1</span>], nums[i-<span class="number">1</span>] + dp[i-<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>OR</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//O(1) space</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rob</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">pre2</span> <span class="operator">=</span> <span class="number">0</span>, pre1 = nums[<span class="number">0</span>], cur = pre1;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            cur = Math.max(pre2 + nums[i], pre1);</span><br><span class="line">            pre2 = pre1;</span><br><span class="line">            pre1 = cur;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="213-House-Robber-II"><a href="#213-House-Robber-II" class="headerlink" title="213. House Robber II"></a><a href="https://leetcode.com/problems/house-robber-ii/">213. House Robber II</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rob</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">    <span class="type">int</span>[] dp1 = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    <span class="type">int</span>[] dp2 = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    dp1[<span class="number">1</span>] = nums[<span class="number">0</span>]; dp2[<span class="number">1</span>] = nums[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">        dp1[i] = Math.max(dp1[i-<span class="number">1</span>], dp1[i-<span class="number">2</span>]+nums[i-<span class="number">1</span>]);</span><br><span class="line">        dp2[i] = Math.max(dp2[i-<span class="number">1</span>], dp2[i-<span class="number">2</span>]+nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Math.max(dp1[n-<span class="number">1</span>], dp2[n-<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>OR</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rob</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">return</span> Math.max(dp(nums, <span class="number">0</span>, n-<span class="number">2</span>), dp(nums, <span class="number">1</span>, n-<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">dp</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> begin, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">pre2</span> <span class="operator">=</span> <span class="number">0</span>, pre1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> begin; i &lt;= end; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> Math.max(pre1, pre2 + nums[i]);</span><br><span class="line">        pre2 = pre1;</span><br><span class="line">        pre1 = cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pre1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="221-Maximal-Square"><a href="#221-Maximal-Square" class="headerlink" title="221. Maximal Square"></a><a href="https://leetcode.com/problems/maximal-square/">221. Maximal Square</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximalSquare</span><span class="params">(<span class="type">char</span>[][] matrix)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> matrix.length, n = matrix[<span class="number">0</span>].length, max = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m+<span class="number">1</span>][n+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (matrix[i-<span class="number">1</span>][j-<span class="number">1</span>] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                dp[i][j] = Math.min(dp[i-<span class="number">1</span>][j-<span class="number">1</span>], Math.min(dp[i][j-<span class="number">1</span>], dp[i-<span class="number">1</span>][j])) + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            max = Math.max(max, dp[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max*max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="264-Ugly-Number-II"><a href="#264-Ugly-Number-II" class="headerlink" title="264. Ugly Number II"></a><a href="https://leetcode.com/problems/ugly-number-ii/">264. Ugly Number II</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">nthUglyNumber</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">0</span>, i3 = <span class="number">0</span>, i5 = <span class="number">0</span>, next2 = <span class="number">2</span>, next3 = <span class="number">3</span>, next5 = <span class="number">5</span>;</span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n]; dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        dp[i] = Math.min(Math.min(next2, next3), next5);</span><br><span class="line">        <span class="keyword">if</span> (dp[i] == next2) &#123; next2 = dp[++i2] * <span class="number">2</span>; &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[i] == next3) &#123; next3 = dp[++i3] * <span class="number">3</span>; &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[i] == next5) &#123; next5 = dp[++i5] * <span class="number">5</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="279-Perfect-Squares"><a href="#279-Perfect-Squares" class="headerlink" title="279. Perfect Squares"></a><a href="https://leetcode.com/problems/perfect-squares/">279. Perfect Squares</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numSquares</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">    Arrays.fill(dp, Integer.MAX_VALUE);</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j*j &lt;= i; j++) &#123;</span><br><span class="line">            dp[i] = Math.min(dp[i], dp[i-j*j] + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="300-Longest-Increasing-Subsequence"><a href="#300-Longest-Increasing-Subsequence" class="headerlink" title="300. Longest Increasing Subsequence"></a><a href="https://leetcode.com/problems/longest-increasing-subsequence/">300. Longest Increasing Subsequence</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//O(n^2)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLIS</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">max_length</span> <span class="operator">=</span> <span class="number">0</span>, n = nums.length;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span> n;</span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    Arrays.fill(dp, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; nums[j]) &#123;</span><br><span class="line">                dp[i] = Math.max(dp[i], dp[j] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        max_length = Math.max(max_length, dp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max_length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>OR</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//O(n*log(n))</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLIS</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num: nums) &#123;</span><br><span class="line">        <span class="comment">//Binary search to find the first index i where dp[i] &gt; x</span></span><br><span class="line">        <span class="comment">//OR x &gt; all nums in dp array, then append x to dp and size += 1</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> Arrays.binarySearch(dp, <span class="number">0</span>, size, num);</span><br><span class="line">        idx = idx &lt; <span class="number">0</span>? -(idx+<span class="number">1</span>): idx;</span><br><span class="line">        dp[idx] = num;</span><br><span class="line">        <span class="keyword">if</span> (idx == size) &#123;</span><br><span class="line">            size++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="309-Best-Time-to-Buy-and-Sell-Stock-with-Cooldown"><a href="#309-Best-Time-to-Buy-and-Sell-Stock-with-Cooldown" class="headerlink" title="309. Best Time to Buy and Sell Stock with Cooldown"></a><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/">309. Best Time to Buy and Sell Stock with Cooldown</a></h4><p><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/discuss/75928/Share-my-DP-solution-(By-State-Machine-Thinking)">State Machine Thinking</a>  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//O(n) space</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> prices.length;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] buy = <span class="keyword">new</span> <span class="title class_">int</span>[n], sell = <span class="keyword">new</span> <span class="title class_">int</span>[n], s1 = <span class="keyword">new</span> <span class="title class_">int</span>[n], s2 = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        s1[<span class="number">0</span>] = buy[<span class="number">0</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        sell[<span class="number">0</span>] = s2[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            buy[i] = s2[i-<span class="number">1</span>] - prices[i];</span><br><span class="line">            s1[i] = Math.max(buy[i-<span class="number">1</span>], s1[i-<span class="number">1</span>]);</span><br><span class="line">            sell[i] = Math.max(buy[i-<span class="number">1</span>], s1[i-<span class="number">1</span>]) + prices[i];</span><br><span class="line">            s2[i] = Math.max(s2[i-<span class="number">1</span>], sell[i-<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.max(sell[n-<span class="number">1</span>], s2[n-<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>OR</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//O(1) spacepairs</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> prices.length;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sell</span> <span class="operator">=</span> <span class="number">0</span>, s2 = <span class="number">0</span>, s1 = -prices[<span class="number">0</span>], buy = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> price: prices) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">pre_buy</span> <span class="operator">=</span> buy;</span><br><span class="line">            buy = s2 - price;</span><br><span class="line">            s2 = Math.max(s2, sell);</span><br><span class="line">            sell = Math.max(pre_buy, s1) + price;</span><br><span class="line">            s1 = Math.max(s1, pre_buy);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.max(s2, sell);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="313-Super-Ugly-Number"><a href="#313-Super-Ugly-Number" class="headerlink" title="313. Super Ugly Number"></a><a href="https://leetcode.com/problems/super-ugly-number/">313. Super Ugly Number</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Advanced version of Q.264 Ugly Number</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">nthSuperUglyNumber</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[] primes)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n]; dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span>[] index = <span class="keyword">new</span> <span class="title class_">int</span>[primes.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        dp[i] = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; primes.length; j++) &#123;</span><br><span class="line">            dp[i] = Math.min(dp[i], primes[j] * dp[index[j]]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; primes.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dp[i] == primes[j] * dp[index[j]]) &#123;</span><br><span class="line">                ++index[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>OR</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Use PriorityQueue, but cost more time in PQ operations</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">nthSuperUglyNumber</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[] primes)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n]; dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span>[] iprimes = <span class="keyword">new</span> <span class="title class_">int</span>[primes.length];</span><br><span class="line">    PriorityQueue &lt;<span class="type">int</span>[]&gt; heap = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span> &lt;<span class="type">int</span>[]&gt; ((a, b) -&gt; (a[<span class="number">0</span>] - b[<span class="number">0</span>]));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; primes.length; i++) &#123;</span><br><span class="line">        heap.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;primes[i], i&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        dp[i] = (heap.peek())[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">while</span> (!heap.isEmpty() &amp;&amp; dp[i] == (heap.peek())[<span class="number">0</span>]) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (heap.poll())[<span class="number">1</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">factor</span> <span class="operator">=</span> primes[index];</span><br><span class="line">            heap.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;dp[++iprimes[index]] * factor, index&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="322-Coin-Change"><a href="#322-Coin-Change" class="headerlink" title="322. Coin Change"></a><a href="https://leetcode.com/problems/coin-change/">322. Coin Change</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">coinChange</span><span class="params">(<span class="type">int</span>[] coins, <span class="type">int</span> amount)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[amount+<span class="number">1</span>];</span><br><span class="line">    Arrays.fill(dp, <span class="number">1</span>, amount+<span class="number">1</span>, amount+<span class="number">1</span>);<span class="comment">// (array, from-inclusive, to-exclusive, val)</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> coin: coins) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> coin; i &lt;= amount; i++) &#123;</span><br><span class="line">            dp[i] = Math.min(dp[i], dp[i-coin]+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[amount] == amount+<span class="number">1</span>? -<span class="number">1</span>: dp[amount];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="343-Integer-Break"><a href="#343-Integer-Break" class="headerlink" title="343. Integer Break"></a><a href="https://leetcode.com/problems/integer-break/">343. Integer Break</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">integerBreak</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">    dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= i-<span class="number">1</span>; j++) &#123;</span><br><span class="line">            dp[i] = Math.max(dp[i], Math.max(dp[i-j] * j, (i-j) * j));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="376-Wiggle-Subsequence"><a href="#376-Wiggle-Subsequence" class="headerlink" title="376. Wiggle Subsequence"></a><a href="https://leetcode.com/problems/wiggle-subsequence/">376. Wiggle Subsequence</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">wiggleMaxLength</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">1</span>, l = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i-<span class="number">1</span>] &gt; nums[i]) &#123;</span><br><span class="line">            s = l + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[i-<span class="number">1</span>] &lt; nums[i])&#123;</span><br><span class="line">            l = s + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Math.max(s, l);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="377-Combination-Sum-IV"><a href="#377-Combination-Sum-IV" class="headerlink" title="377. Combination Sum IV"></a><a href="https://leetcode.com/problems/combination-sum-iv/">377. Combination Sum IV</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Note that different sequences are counted as different combinations.</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">combinationSum4</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[target+<span class="number">1</span>];</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= target; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num: nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= num) dp[i] += dp[i-num];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[target];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="413-Arithmetic-Slices"><a href="#413-Arithmetic-Slices" class="headerlink" title="413. Arithmetic Slices"></a><a href="https://leetcode.com/problems/arithmetic-slices/">413. Arithmetic Slices</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numberOfArithmeticSlices</span><span class="params">(<span class="type">int</span>[] A)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (A.length &lt; <span class="number">3</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[A.length];</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; A.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (A[i] - A[i-<span class="number">1</span>] == A[i-<span class="number">1</span>] - A[i-<span class="number">2</span>]) &#123;</span><br><span class="line">            dp[i] = dp[i-<span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sum += dp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="416-Partition-Equal-Subset-Sum"><a href="#416-Partition-Equal-Subset-Sum" class="headerlink" title="416. Partition Equal Subset Sum"></a><a href="https://leetcode.com/problems/partition-equal-subset-sum/">416. Partition Equal Subset Sum</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//0-1 knapsack</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canPartition</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        sum += nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (sum % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">target</span> <span class="operator">=</span> sum / <span class="number">2</span>;</span><br><span class="line">    <span class="type">boolean</span>[][] dp = <span class="keyword">new</span> <span class="title class_">boolean</span>[n+<span class="number">1</span>][target+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        dp[i][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> nums[i-<span class="number">1</span>]; j &lt;= target; j++)&#123;</span><br><span class="line">            dp[i][j] = dp[i-<span class="number">1</span>][j] || dp[i-<span class="number">1</span>][j-nums[i-<span class="number">1</span>]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n][target];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>OR</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//0-1 knapsack</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canPartition</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        sum += nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (sum % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">target</span> <span class="operator">=</span> sum / <span class="number">2</span>;</span><br><span class="line">    <span class="type">boolean</span>[] dp = <span class="keyword">new</span> <span class="title class_">boolean</span>[target + <span class="number">1</span>];</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> target; j &gt;= nums[i]; j--) &#123;</span><br><span class="line">            dp[j] = dp[j] || dp[j - nums[i]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[target];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="474-Ones-and-Zeroes"><a href="#474-Ones-and-Zeroes" class="headerlink" title="474. Ones and Zeroes"></a><a href="https://leetcode.com/problems/ones-and-zeroes/">474. Ones and Zeroes</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findMaxForm</span><span class="params">(String[] strs, <span class="type">int</span> m, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m+<span class="number">1</span>][n+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (String str: strs) &#123;</span><br><span class="line">        <span class="type">int</span>[] cnt = count(str);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> m; i &gt;= cnt[<span class="number">0</span>]; i--) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> n; j &gt;= cnt[<span class="number">1</span>]; j--) &#123;</span><br><span class="line">                dp[i][j] = Math.max(dp[i][j], <span class="number">1</span> + dp[i-cnt[<span class="number">0</span>]][j-cnt[<span class="number">1</span>]]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[m][n];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span>[] count(String str) &#123;</span><br><span class="line">    <span class="type">int</span>[] cnt = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> str.charAt(i);</span><br><span class="line">        cnt[c-<span class="string">&#x27;0&#x27;</span>] += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="494-Target-Sum"><a href="#494-Target-Sum" class="headerlink" title="494. Target Sum"></a><a href="https://leetcode.com/problems/target-sum/">494. Target Sum</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findTargetSumWays</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> S)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        sum += nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (sum &lt; S || sum + S &lt; <span class="number">0</span> || (sum + S) % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> subsetSum(nums, (sum + S)/<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//similar to Q.416</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">subsetSum</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[target + <span class="number">1</span>];</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> target; j &gt;= nums[i]; j--) &#123;</span><br><span class="line">            dp[j] += dp[j - nums[i]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[target];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="542-01-Matrix"><a href="#542-01-Matrix" class="headerlink" title="542. 01 Matrix"></a><a href="https://leetcode.com/problems/01-matrix/">542. 01 Matrix</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[][] updateMatrix(<span class="type">int</span>[][] matrix) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> matrix.length, n = matrix[<span class="number">0</span>].length;</span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m][n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        Arrays.fill(dp[i], Integer.MAX_VALUE-<span class="number">1</span>);<span class="comment">//MAX_VALUE-1: in case dp[i-1][j]+1 overflow</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (matrix[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                dp[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    dp[i][j] = Math.min(dp[i-<span class="number">1</span>][j]+<span class="number">1</span>, dp[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (j &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    dp[i][j] = Math.min(dp[i][j-<span class="number">1</span>]+<span class="number">1</span>, dp[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> m - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> n - <span class="number">1</span>; j &gt;=<span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; m-<span class="number">1</span>) &#123;</span><br><span class="line">                dp[i][j] = Math.min(dp[i+<span class="number">1</span>][j]+<span class="number">1</span>, dp[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j &lt; n-<span class="number">1</span>) &#123;</span><br><span class="line">                dp[i][j] = Math.min(dp[i][j+<span class="number">1</span>]+<span class="number">1</span>, dp[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="583-Delete-Operation-for-Two-Strings"><a href="#583-Delete-Operation-for-Two-Strings" class="headerlink" title="583. Delete Operation for Two Strings"></a><a href="https://leetcode.com/problems/delete-operation-for-two-strings/">583. Delete Operation for Two Strings</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDistance</span><span class="params">(String word1, String word2)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> word1.length(), n = word2.length();</span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            dp[i][j] = word1.charAt(i - <span class="number">1</span>) == word2.charAt(j - <span class="number">1</span>)? dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>: Math.max(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> m + n - <span class="number">2</span> * dp[m][n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="646-Maximum-Length-of-Pair-Chain"><a href="#646-Maximum-Length-of-Pair-Chain" class="headerlink" title="646. Maximum Length of Pair Chain"></a><a href="https://leetcode.com/problems/maximum-length-of-pair-chain/">646. Maximum Length of Pair Chain</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//dp</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findLongestChain</span><span class="params">(<span class="type">int</span>[][] pairs)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[pairs.length];</span><br><span class="line">    Arrays.fill(dp, <span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    Arrays.sort(pairs, (a, b) -&gt; a[<span class="number">0</span>] - b[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; pairs.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pairs[j][<span class="number">1</span>] &lt; pairs[i][<span class="number">0</span>]) &#123;</span><br><span class="line">                dp[i] = Math.max(dp[j] + <span class="number">1</span>, dp[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        max = Math.max(dp[i], max);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>OR</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// greedy</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findLongestChain</span><span class="params">(<span class="type">int</span>[][] pairs)</span> &#123;</span><br><span class="line">    Arrays.sort(pairs, (a, b) -&gt; a[<span class="number">1</span>] - b[<span class="number">1</span>]);</span><br><span class="line">    <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1</span>, prev = pairs[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; pairs.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (prev &lt; pairs[i][<span class="number">0</span>]) &#123;</span><br><span class="line">            num++;</span><br><span class="line">            prev = pairs[i][<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="650-2-Keys-Keyboard"><a href="#650-2-Keys-Keyboard" class="headerlink" title="650. 2 Keys Keyboard"></a><a href="https://leetcode.com/problems/2-keys-keyboard/">650. 2 Keys Keyboard</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minSteps</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> (<span class="type">int</span>)Math.sqrt(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            dp[i] = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">2</span>; j &lt;= h; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i % j == <span class="number">0</span>) &#123;</span><br><span class="line">                    dp[i] = dp[j] + dp[i/j];</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="714-Best-Time-to-Buy-and-Sell-Stock-with-Transaction-Fee"><a href="#714-Best-Time-to-Buy-and-Sell-Stock-with-Transaction-Fee" class="headerlink" title="714. Best Time to Buy and Sell Stock with Transaction Fee"></a><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/">714. Best Time to Buy and Sell Stock with Transaction Fee</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// dp[i][0] = Math.max(dp[i-1][0], dp[i-1][1] + prices[i])</span></span><br><span class="line"><span class="comment">// dp[i][1] = Math.max(dp[i-1][1], dp[i-1][0] - prices[i] - fee)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices, <span class="type">int</span> fee)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">dp_i0</span> <span class="operator">=</span> <span class="number">0</span>, dp_i1 = Integer.MIN_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> price: prices) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">prev_i0</span> <span class="operator">=</span> dp_i0;</span><br><span class="line">        dp_i0 = Math.max(prev_i0, dp_i1 + price);</span><br><span class="line">        dp_i1 = Math.max(dp_i1, prev_i0 - price - fee);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp_i0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1143-Longest-Common-Subsequence"><a href="#1143-Longest-Common-Subsequence" class="headerlink" title="1143. Longest Common Subsequence"></a><a href="https://leetcode.com/problems/longest-common-subsequence/">1143. Longest Common Subsequence</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestCommonSubsequence</span><span class="params">(String text1, String text2)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> text1.length(), n = text2.length();</span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m+<span class="number">1</span>][n+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (text1.charAt(i-<span class="number">1</span>) == text2.charAt(j-<span class="number">1</span>)) &#123;</span><br><span class="line">                dp[i][j] = dp[i-<span class="number">1</span>][j-<span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i][j] = Math.max(dp[i-<span class="number">1</span>][j], dp[i][j-<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[m][n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Following concludes the general implementation of <em>0-1 Knapsack Problem</em> and <em>Unbounded Knapsack Problem</em></p>
<h4 id="0-1-Knapsack-Problem"><a href="#0-1-Knapsack-Problem" class="headerlink" title="0-1 Knapsack Problem"></a>0-1 Knapsack Problem</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//time: O(NW), space: O(NW)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">knapsack</span><span class="params">(<span class="type">int</span>[] weights, <span class="type">int</span>[] values, <span class="type">int</span> N, <span class="type">int</span> W)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[N + <span class="number">1</span>][W + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> weights[i-<span class="number">1</span>], v = values[i-<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= W; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j &gt;= w) &#123;</span><br><span class="line">                dp[i][j] = Math.max(dp[i-<span class="number">1</span>][j], dp[i-<span class="number">1</span>][j-w] + v);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i][j] = dp[i-<span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[N][W];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>OR</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//time: O(NW), space: O(W)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">knapsack</span><span class="params">(<span class="type">int</span>[] weights, <span class="type">int</span>[] values, <span class="type">int</span> N, <span class="type">int</span> W)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[W + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> weights[i-<span class="number">1</span>], v = values[i-<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> W; j &gt;= w; --j) &#123;</span><br><span class="line">            dp[j] = Math.max(dp[j], dp[j-w] + v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[W];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Unbounded-Knapsack-Problem"><a href="#Unbounded-Knapsack-Problem" class="headerlink" title="Unbounded Knapsack Problem"></a>Unbounded Knapsack Problem</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//time: O(NW), space: O(NW)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">knapsack</span><span class="params">(<span class="type">int</span>[] weights, <span class="type">int</span>[] values, <span class="type">int</span> N, <span class="type">int</span> W)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[N + <span class="number">1</span>][W + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> weights[i-<span class="number">1</span>], v = values[i-<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= W; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j &gt;= w) &#123;</span><br><span class="line">                dp[i][j] = Math.max(dp[i-<span class="number">1</span>][j], dp[i][j-w] + v);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i][j] = dp[i-<span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[N][W];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>OR</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//time: O(NW), space: O(W)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">knapsack</span><span class="params">(<span class="type">int</span>[] weights, <span class="type">int</span>[] values, <span class="type">int</span> N, <span class="type">int</span> W)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[W + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> weights[i-<span class="number">1</span>], v = values[i-<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> w; j &lt;= W; ++j) &#123;</span><br><span class="line">            dp[j] = Math.max(dp[j], dp[j-w] + v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[W];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Solutions (8): Math</title>
    <url>/2021/04/11/Leetcode-8-Math/</url>
    <content><![CDATA[<p>These Leetcode problems can be solved with <em>Math</em> :</p>
<h4 id="Prime"><a href="#Prime" class="headerlink" title="Prime"></a>Prime</h4><h5 id="204-Count-Primes"><a href="#204-Count-Primes" class="headerlink" title="204. Count Primes"></a><a href="https://leetcode.com/problems/count-primes/">204. Count Primes</a></h5><span id="more"></span>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countPrimes</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">boolean</span>[] notprime = <span class="keyword">new</span> <span class="title class_">boolean</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (notprime[i] == <span class="literal">false</span>) &#123;</span><br><span class="line">                cnt += <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">2</span> * i; j &lt; n; j += i) &#123;</span><br><span class="line">                    notprime[j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;         </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Digits"><a href="#Digits" class="headerlink" title="Digits"></a>Digits</h4><h5 id="9-Palindrome-Number"><a href="#9-Palindrome-Number" class="headerlink" title="9. Palindrome Number"></a><a href="https://leetcode.com/problems/palindrome-number/">9. Palindrome Number</a></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (x != <span class="number">0</span> &amp;&amp; x % <span class="number">10</span> == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">reverse</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (x &gt; reverse) &#123;</span><br><span class="line">        reverse = reverse * <span class="number">10</span> + x % <span class="number">10</span>;</span><br><span class="line">        x /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x == reverse || x == reverse / <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="168-Excel-Sheet-Column-Title"><a href="#168-Excel-Sheet-Column-Title" class="headerlink" title="168. Excel Sheet Column Title"></a><a href="https://leetcode.com/problems/excel-sheet-column-title/">168. Excel Sheet Column Title</a></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">convertToTitle</span><span class="params">(<span class="type">int</span> columnNumber)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (columnNumber == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> columnNumber - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> convertToTitle(n / <span class="number">26</span>) + (<span class="type">char</span>)(n % <span class="number">26</span> + <span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="172-Factorial-Trailing-Zeroes"><a href="#172-Factorial-Trailing-Zeroes" class="headerlink" title="172. Factorial Trailing Zeroes"></a><a href="https://leetcode.com/problems/factorial-trailing-zeroes/">172. Factorial Trailing Zeroes</a></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">trailingZeroes</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n == <span class="number">0</span>? <span class="number">0</span>: n / <span class="number">5</span> + trailingZeroes(n / <span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="326-Power-of-Three"><a href="#326-Power-of-Three" class="headerlink" title="326. Power of Three"></a><a href="https://leetcode.com/problems/power-of-three/">326. Power of Three</a></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPowerOfThree</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (Math.log10(n) / Math.log10(<span class="number">3</span>) % <span class="number">1</span>) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="415-Add-Strings"><a href="#415-Add-Strings" class="headerlink" title="415. Add Strings"></a><a href="https://leetcode.com/problems/add-strings/">415. Add Strings</a></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">addStrings</span><span class="params">(String num1, String num2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">carry</span> <span class="operator">=</span> <span class="number">0</span>, i = num1.length() - <span class="number">1</span>, j = num2.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span> || j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> carry;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                sum += num1.charAt(i) - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                sum += num2.charAt(j) - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(sum % <span class="number">10</span>);</span><br><span class="line">            carry = sum / <span class="number">10</span>;</span><br><span class="line">            i -= <span class="number">1</span>;</span><br><span class="line">            j -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (carry &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            sb.append(carry);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.reverse().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="504-Base-7"><a href="#504-Base-7" class="headerlink" title="504. Base 7"></a><a href="https://leetcode.com/problems/base-7/">504. Base 7</a></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">convertToBase7</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">base</span> <span class="operator">=</span> <span class="number">1</span>, result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (num != <span class="number">0</span>) &#123;</span><br><span class="line">            result += base * (num % <span class="number">7</span>);</span><br><span class="line">            num /= <span class="number">7</span>;</span><br><span class="line">            base *= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Random-and-Sample"><a href="#Random-and-Sample" class="headerlink" title="Random and Sample"></a>Random and Sample</h4><h5 id="380-Insert-Delete-GetRandom-O-1"><a href="#380-Insert-Delete-GetRandom-O-1" class="headerlink" title="380. Insert Delete GetRandom O(1)"></a><a href="https://leetcode.com/problems/insert-delete-getrandom-o1/">380. Insert Delete GetRandom O(1)</a></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RandomizedSet</span> &#123;</span><br><span class="line">    HashMap &lt;Integer, Integer&gt; map;</span><br><span class="line">    ArrayList &lt;Integer&gt; arr;</span><br><span class="line">    Random rand;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RandomizedSet</span><span class="params">()</span> &#123;</span><br><span class="line">        map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        arr = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        rand = <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Inserts a value to the set. Returns true if the set did not already contain the specified element. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(val)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        arr.add(val);</span><br><span class="line">        map.put(val, arr.size() - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Removes a value from the set. Returns true if the set contained the specified element. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!map.containsKey(val)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> map.get(val);</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> arr.get(arr.size() - <span class="number">1</span>);</span><br><span class="line">        arr.set(idx, num);</span><br><span class="line">        map.put(num, idx);</span><br><span class="line">        map.remove(val);</span><br><span class="line">        arr.remove(arr.size() - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Get a random element from the set. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getRandom</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> rand.nextInt(arr.size());</span><br><span class="line">        <span class="keyword">return</span> arr.get(idx);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your RandomizedSet object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * RandomizedSet obj = new RandomizedSet();</span></span><br><span class="line"><span class="comment"> * boolean param_1 = obj.insert(val);</span></span><br><span class="line"><span class="comment"> * boolean param_2 = obj.remove(val);</span></span><br><span class="line"><span class="comment"> * int param_3 = obj.getRandom();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h5 id="382-Linked-List-Random-Node"><a href="#382-Linked-List-Random-Node" class="headerlink" title="382. Linked List Random Node"></a><a href="https://leetcode.com/problems/linked-list-random-node/">382. Linked List Random Node</a></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    ListNode head;</span><br><span class="line">    Random r;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@param</span> head The linked list&#x27;s head.</span></span><br><span class="line"><span class="comment">        Note that the head is guaranteed to be not null, so it contains at least one node. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Solution</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.head = head;</span><br><span class="line">        <span class="built_in">this</span>.r = <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns a random node&#x27;s value. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getRandom</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="built_in">this</span>.head.val;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="built_in">this</span>.head.next;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">            len += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (r.nextInt(len) == <span class="number">0</span>) &#123;</span><br><span class="line">                res = node.val;</span><br><span class="line">            &#125;</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your Solution object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * Solution obj = new Solution(head);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj.getRandom();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h5 id="384-Shuffle-an-Array"><a href="#384-Shuffle-an-Array" class="headerlink" title="384. Shuffle an Array"></a><a href="https://leetcode.com/problems/shuffle-an-array/">384. Shuffle an Array</a></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] nums;</span><br><span class="line">    <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Solution</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.nums = nums;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Resets the array to its original configuration and return it. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] reset() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.nums;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns a random shuffling of the array. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] shuffle() &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="built_in">this</span>.nums.length;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="built_in">this</span>.nums.clone();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> r.nextInt(n - i);</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">            arr[i] = arr[i + pos];</span><br><span class="line">            arr[i + pos] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your Solution object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * Solution obj = new Solution(nums);</span></span><br><span class="line"><span class="comment"> * int[] param_1 = obj.reset();</span></span><br><span class="line"><span class="comment"> * int[] param_2 = obj.shuffle();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h5 id="528-Random-Pick-with-Weight"><a href="#528-Random-Pick-with-Weight" class="headerlink" title="528. Random Pick with Weight"></a><a href="https://leetcode.com/problems/random-pick-with-weight/">528. Random Pick with Weight</a></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] arr;</span><br><span class="line">    <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Solution</span><span class="params">(<span class="type">int</span>[] w)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.arr = w;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pickIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="built_in">this</span>.arr.length;</span><br><span class="line">        <span class="type">int</span>[] sums = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            sum += <span class="built_in">this</span>.arr[i];</span><br><span class="line">            sums[i] = sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> r.nextInt(sum) + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> Arrays.binarySearch(sums, <span class="number">0</span>, n, pos);</span><br><span class="line">        <span class="keyword">return</span> res &lt; <span class="number">0</span>? - res - <span class="number">1</span>: res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your Solution object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * Solution obj = new Solution(w);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj.pickIndex();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h4 id="Bit-Manipulation"><a href="#Bit-Manipulation" class="headerlink" title="Bit Manipulation"></a>Bit Manipulation</h4><h5 id="136-Single-Number"><a href="#136-Single-Number" class="headerlink" title="136. Single Number"></a><a href="https://leetcode.com/problems/single-number/">136. Single Number</a></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">singleNumber</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//x ^ x = 0; x ^ 0 = x</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num: nums)&#123;</span><br><span class="line">            res ^= num;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="190-Reverse-Bits"><a href="#190-Reverse-Bits" class="headerlink" title="190. Reverse Bits"></a><a href="https://leetcode.com/problems/reverse-bits/">190. Reverse Bits</a></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// you need treat n as an unsigned value</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">reverseBits</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>, bits = <span class="number">32</span>;</span><br><span class="line">        <span class="keyword">while</span> (bits &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            res += n &amp; <span class="number">1</span>;</span><br><span class="line">            n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">            res &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">            bits -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        res += n &amp; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="461-Hamming-Distance"><a href="#461-Hamming-Distance" class="headerlink" title="461. Hamming Distance"></a><a href="https://leetcode.com/problems/hamming-distance/">461. Hamming Distance</a></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hammingDistance</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">xor</span> <span class="operator">=</span> x ^ y;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (xor &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            res += xor &amp; <span class="number">1</span>;</span><br><span class="line">            xor &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Binary-Property"><a href="#Binary-Property" class="headerlink" title="Binary Property"></a>Binary Property</h4><h5 id="318-Maximum-Product-of-Word-Lengths"><a href="#318-Maximum-Product-of-Word-Lengths" class="headerlink" title="318. Maximum Product of Word Lengths"></a><a href="https://leetcode.com/problems/maximum-product-of-word-lengths/">318. Maximum Product of Word Lengths</a></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProduct</span><span class="params">(String[] words)</span> &#123;</span><br><span class="line">        HashMap &lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (String word: words) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> word.length();</span><br><span class="line">            <span class="type">int</span> <span class="variable">mask</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">                <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> word.charAt(i);</span><br><span class="line">                mask |= <span class="number">1</span> &lt;&lt; (c - <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            len = Math.max(map.getOrDefault(mask, <span class="number">0</span>), len);</span><br><span class="line">            map.put(mask, len);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; entry: map.entrySet()) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((entry.getKey() &amp; mask) == <span class="number">0</span>) &#123;</span><br><span class="line">                    res = Math.max(entry.getValue() * len, res);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="338-Counting-Bits"><a href="#338-Counting-Bits" class="headerlink" title="338. Counting Bits"></a><a href="https://leetcode.com/problems/counting-bits/">338. Counting Bits</a></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] countBits(<span class="type">int</span> num) &#123;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[num + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= num; i++) &#123;</span><br><span class="line">            dp[i] = (i &amp; <span class="number">1</span>) == <span class="number">1</span>? dp[i - <span class="number">1</span>] + <span class="number">1</span>: dp[i &gt;&gt; <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="342-Power-of-Four"><a href="#342-Power-of-Four" class="headerlink" title="342. Power of Four"></a><a href="https://leetcode.com/problems/power-of-four/">342. Power of Four</a></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// by @xicilukou</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPowerOfFour</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mask</span> <span class="operator">=</span> <span class="number">0b01010101010101010101010101010101</span>;</span><br><span class="line">		<span class="keyword">return</span> num&gt;<span class="number">0</span> &amp;&amp; (num&amp;(num - <span class="number">1</span>)) == <span class="number">0</span> &amp;&amp; (num | mask) == mask;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="General"><a href="#General" class="headerlink" title="General"></a>General</h4><h5 id="202-Happy-Number"><a href="#202-Happy-Number" class="headerlink" title="202. Happy Number"></a><a href="https://leetcode.com/problems/happy-number/">202. Happy Number</a></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isHappy</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        Set &lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        <span class="keyword">return</span> helper(n, set);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Stop when == 1 OR the set already has the same number</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">helper</span><span class="params">(<span class="type">int</span> n, Set &lt;Integer&gt; set)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">next</span> <span class="operator">=</span> <span class="number">0</span>, num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">            num = n % <span class="number">10</span>;</span><br><span class="line">            n /= <span class="number">10</span>;</span><br><span class="line">            next += num * num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (next == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (set.contains(next)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            set.add(next);</span><br><span class="line">            <span class="keyword">return</span> helper(next, set);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Greatest-Common-Divisor"><a href="#Greatest-Common-Divisor" class="headerlink" title="Greatest Common Divisor"></a>Greatest Common Divisor</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Euclidean Algorithm - 辗转相除, O(log(max(a, b)))</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">gcd</span> <span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> b == <span class="number">0</span>? a: gcd(b, a % b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>OR</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//The Nine Chapters on the Mathematical Art - 更相减损, O(log(max(a, b)))</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">gcd</span> <span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (a == b) &#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a &lt; b) &#123;</span><br><span class="line">        <span class="keyword">return</span> gcd (b, a);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(a &amp; <span class="number">1</span>) &amp;&amp; !(b &amp; <span class="number">1</span>)) &#123; <span class="comment">//both a and b are even</span></span><br><span class="line">            <span class="keyword">return</span> gcd (a &gt;&gt; <span class="number">1</span>, b &gt;&gt; <span class="number">1</span>) &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!(a &amp; <span class="number">1</span>) &amp;&amp; (b &amp; <span class="number">1</span>)) &#123;<span class="comment">//a is even and b is odd</span></span><br><span class="line">            <span class="keyword">return</span> gcd (a &gt;&gt; <span class="number">1</span>, b);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((a &amp; <span class="number">1</span>) &amp;&amp; !(b &amp; <span class="number">1</span>)) &#123;<span class="comment">//a is odd and b is even</span></span><br><span class="line">            <span class="keyword">return</span> gcd (a, b &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> gcd (a, a - b);<span class="comment">//更相减损</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Least-Common-Multiple"><a href="#Least-Common-Multiple" class="headerlink" title="Least Common Multiple"></a>Least Common Multiple</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">lcm</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a * b / gcd(a, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
        <category>Math</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Solutions (9): Data Structure - Array</title>
    <url>/2021/05/15/Leetcode-9-Data-Structure-Array/</url>
    <content><![CDATA[<p>These Leetcode problems are related with <em>Array</em> :</p>
<h4 id="48-Rotate-Image"><a href="#48-Rotate-Image" class="headerlink" title="48. Rotate Image"></a><a href="https://leetcode.com/problems/rotate-image/">48. Rotate Image</a></h4><span id="more"></span>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rotate</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> matrix.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> matrix[<span class="number">0</span>].length;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//diagonal</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; col; j++) &#123;</span><br><span class="line">                swap(i, j, matrix, j, i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//left -&gt; right</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col &gt;&gt; <span class="number">1</span>; j++) &#123;</span><br><span class="line">                swap(i, j, matrix, i, col - <span class="number">1</span> - j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span>[][] matrix, <span class="type">int</span> i2, <span class="type">int</span> j2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> matrix[i][j];</span><br><span class="line">        matrix[i][j] = matrix[i2][j2];</span><br><span class="line">        matrix[i2][j2] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>OR</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rotate</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>, row = matrix.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row &gt;&gt; <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &lt; row - <span class="number">1</span> - i; ++j) &#123;</span><br><span class="line">                temp = matrix[j][row - <span class="number">1</span> - i];</span><br><span class="line">                matrix[j][row - <span class="number">1</span> - i] = matrix[i][j];</span><br><span class="line">                matrix[i][j] = matrix[row - <span class="number">1</span> - j][i];</span><br><span class="line">                matrix[row - <span class="number">1</span> - j][i] = matrix[row - <span class="number">1</span> - i][row - <span class="number">1</span> - j];</span><br><span class="line">                matrix[row - <span class="number">1</span> - i][row - <span class="number">1</span> - j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="240-Search-a-2D-Matrix-II"><a href="#240-Search-a-2D-Matrix-II" class="headerlink" title="240. Search a 2D Matrix II"></a><a href="https://leetcode.com/problems/search-a-2d-matrix-ii/">240. Search a 2D Matrix II</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">searchMatrix</span><span class="params">(<span class="type">int</span>[][] matrix, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (matrix.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> matrix.length, col = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = col - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; i &lt; row) &#123;</span><br><span class="line">            <span class="keyword">if</span> (matrix[i][j] &lt; target) &#123;</span><br><span class="line">                i += <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (matrix[i][j] &gt; target) &#123;</span><br><span class="line">                j -= <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="287-Find-the-Duplicate-Number"><a href="#287-Find-the-Duplicate-Number" class="headerlink" title="287. Find the Duplicate Number"></a><a href="https://leetcode.com/problems/find-the-duplicate-number/">287. Find the Duplicate Number</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findDuplicate</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">slow</span> <span class="operator">=</span> <span class="number">0</span>, fast = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        slow = nums[slow];</span><br><span class="line">        fast = nums[nums[fast]];</span><br><span class="line">    &#125; <span class="keyword">while</span> (slow != fast);</span><br><span class="line">    <span class="type">int</span> <span class="variable">find</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (find != slow) &#123;</span><br><span class="line">        find = nums[find];</span><br><span class="line">        slow = nums[slow];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> find;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="378-Kth-Smallest-Element-in-a-Sorted-Matrix"><a href="#378-Kth-Smallest-Element-in-a-Sorted-Matrix" class="headerlink" title="378. Kth Smallest Element in a Sorted Matrix"></a><a href="https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix/">378. Kth Smallest Element in a Sorted Matrix</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">kthSmallest</span><span class="params">(<span class="type">int</span>[][] matrix, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> matrix.length, n = matrix[<span class="number">0</span>].length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> matrix[<span class="number">0</span>][<span class="number">0</span>], r = matrix[m - <span class="number">1</span>][n - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span> (l != r) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> l + (r - l) / <span class="number">2</span>, num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> n - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; matrix[i][j] &gt; mid) &#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            num += j + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (num &lt; k) l = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> r = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="448-Find-All-Numbers-Disappeared-in-an-Array"><a href="#448-Find-All-Numbers-Disappeared-in-an-Array" class="headerlink" title="448. Find All Numbers Disappeared in an Array"></a><a href="https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array/">448. Find All Numbers Disappeared in an Array</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">findDisappearedNumbers</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num: nums) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> Math.abs(num) - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[pos] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                nums[pos] = -nums[pos];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                list.add(i + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="485-Max-Consecutive-Ones"><a href="#485-Max-Consecutive-Ones" class="headerlink" title="485. Max Consecutive Ones"></a><a href="https://leetcode.com/problems/max-consecutive-ones/">485. Max Consecutive Ones</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findMaxConsecutiveOnes</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>, res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] == <span class="number">1</span>) &#123;</span><br><span class="line">            sum++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res = Math.max(sum, res);</span><br><span class="line">            sum = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    res = Math.max(sum, res);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="565-Array-Nesting"><a href="#565-Array-Nesting" class="headerlink" title="565. Array Nesting"></a><a href="https://leetcode.com/problems/array-nesting/">565. Array Nesting</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">arrayNesting</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>, j = nums[i];</span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            nums[i] = -<span class="number">1</span>;</span><br><span class="line">            i = j;</span><br><span class="line">            j = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        len = Math.max(len, cnt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="566-Reshape-the-Matrix"><a href="#566-Reshape-the-Matrix" class="headerlink" title="566. Reshape the Matrix"></a><a href="https://leetcode.com/problems/reshape-the-matrix/">566. Reshape the Matrix</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[][] matrixReshape(<span class="type">int</span>[][] mat, <span class="type">int</span> r, <span class="type">int</span> c) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> mat.length, n = mat[<span class="number">0</span>].length;</span><br><span class="line">    <span class="keyword">if</span> (m * n != r * c) <span class="keyword">return</span> mat;</span><br><span class="line">    <span class="type">int</span>[][] res = <span class="keyword">new</span> <span class="title class_">int</span>[r][c];</span><br><span class="line">    <span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            res[pos / c][pos % c] = mat[i][j];</span><br><span class="line">            pos++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="645-Set-Mismatch"><a href="#645-Set-Mismatch" class="headerlink" title="645. Set Mismatch"></a><a href="https://leetcode.com/problems/set-mismatch/">645. Set Mismatch</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] findErrorNums(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (nums[i] != i + <span class="number">1</span> &amp;&amp; nums[i] != nums[nums[i] - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> nums[i] - <span class="number">1</span>;</span><br><span class="line">            nums[i] = nums[pos];</span><br><span class="line">            nums[pos] = pos + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">dup</span> <span class="operator">=</span> -<span class="number">1</span>, missing = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] != i + <span class="number">1</span>) &#123;</span><br><span class="line">            dup = nums[i];</span><br><span class="line">            missing = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;dup, missing&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="667-Beautiful-Arrangement-II"><a href="#667-Beautiful-Arrangement-II" class="headerlink" title="667. Beautiful Arrangement II"></a><a href="https://leetcode.com/problems/beautiful-arrangement-ii/">667. Beautiful Arrangement II</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] constructArray(<span class="type">int</span> n, <span class="type">int</span> k) &#123;</span><br><span class="line">    <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    res[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>, interval = k; i &lt; k + <span class="number">1</span>; i++, interval--) &#123;</span><br><span class="line">        res[i] = i % <span class="number">2</span> == <span class="number">1</span>? res[i - <span class="number">1</span>] + interval: res[i - <span class="number">1</span>] - interval;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> k + <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        res[i] = i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="697-Degree-of-an-Array"><a href="#697-Degree-of-an-Array" class="headerlink" title="697. Degree of an Array"></a><a href="https://leetcode.com/problems/degree-of-an-array/">697. Degree of an Array</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findShortestSubArray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    HashMap &lt;Integer, <span class="type">int</span>[]&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">    <span class="type">int</span> <span class="variable">degree</span> <span class="operator">=</span> <span class="number">0</span>, length = Integer.MAX_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = map.getOrDefault(nums[i], <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>, -<span class="number">1</span>&#125;);</span><br><span class="line">        arr[<span class="number">0</span>] += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (arr[<span class="number">1</span>] == -<span class="number">1</span>) &#123;</span><br><span class="line">            arr[<span class="number">1</span>] = i;</span><br><span class="line">            map.put(nums[i], arr);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (degree &lt; arr[<span class="number">0</span>]) &#123;</span><br><span class="line">            degree = arr[<span class="number">0</span>];</span><br><span class="line">            length = i - arr[<span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (degree == arr[<span class="number">0</span>]) &#123;</span><br><span class="line">            length = Math.min(length, i - arr[<span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="766-Toeplitz-Matrix"><a href="#766-Toeplitz-Matrix" class="headerlink" title="766. Toeplitz Matrix"></a><a href="https://leetcode.com/problems/toeplitz-matrix/">766. Toeplitz Matrix</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isToeplitzMatrix</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> matrix.length, n = matrix[<span class="number">0</span>].length;</span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">1</span> || n == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (matrix[i][j] != matrix[i - <span class="number">1</span>][j - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="769-Max-Chunks-To-Make-Sorted"><a href="#769-Max-Chunks-To-Make-Sorted" class="headerlink" title="769. Max Chunks To Make Sorted"></a><a href="https://leetcode.com/problems/max-chunks-to-make-sorted/">769. Max Chunks To Make Sorted</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxChunksToSorted</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">curMax</span> <span class="operator">=</span> <span class="number">0</span>, chunk = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            curMax = Math.max(curMax, arr[i]);</span><br><span class="line">            <span class="keyword">if</span> (curMax == i) &#123;</span><br><span class="line">                chunk += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> chunk;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="303-Range-Sum-Query-Immutable"><a href="#303-Range-Sum-Query-Immutable" class="headerlink" title="303. Range Sum Query - Immutable"></a><a href="https://leetcode.com/problems/range-sum-query-immutable/">303. Range Sum Query - Immutable</a></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NumArray</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] sum;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NumArray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sum = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; sum.length; i++) &#123;</span><br><span class="line">            sum[i] = sum[i - <span class="number">1</span>] + nums[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sumRange</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sum[j + <span class="number">1</span>] - sum[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your NumArray object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * NumArray obj = new NumArray(nums);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj.sumRange(i,j);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h5 id="304-Range-Sum-Query-2D-Immutable"><a href="#304-Range-Sum-Query-2D-Immutable" class="headerlink" title="304. Range Sum Query 2D - Immutable"></a><a href="https://leetcode.com/problems/range-sum-query-2d-immutable/">304. Range Sum Query 2D - Immutable</a></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NumMatrix</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[][] integral;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NumMatrix</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (matrix.length == <span class="number">0</span> || matrix[<span class="number">0</span>].length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> matrix.length, n = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="built_in">this</span>.integral = <span class="keyword">new</span> <span class="title class_">int</span>[m+<span class="number">1</span>][n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                integral[i][j] = matrix[i-<span class="number">1</span>][j-<span class="number">1</span>] + integral[i-<span class="number">1</span>][j] + integral[i][j-<span class="number">1</span>] - integral[i-<span class="number">1</span>][j-<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sumRegion</span><span class="params">(<span class="type">int</span> row1, <span class="type">int</span> col1, <span class="type">int</span> row2, <span class="type">int</span> col2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> integral[row2+<span class="number">1</span>][col2+<span class="number">1</span>] - integral[row2+<span class="number">1</span>][col1] - integral[row1][col2+<span class="number">1</span>] + integral[row1][col1];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your NumMatrix object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * NumMatrix obj = new NumMatrix(matrix);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj.sumRegion(row1,col1,row2,col2);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h5 id="560-Subarray-Sum-Equals-K"><a href="#560-Subarray-Sum-Equals-K" class="headerlink" title="560. Subarray Sum Equals K"></a><a href="https://leetcode.com/problems/subarray-sum-equals-k/">560. Subarray Sum Equals K</a></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">subarraySum</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    HashMap &lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">    map.put(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num: nums) &#123;</span><br><span class="line">        sum += num;</span><br><span class="line">        ans += map.getOrDefault(sum - k, <span class="number">0</span>);</span><br><span class="line">        map.put(sum, map.getOrDefault(sum, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
        <category>Data Structure</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Study Notes of C (1)</title>
    <url>/2018/12/29/Notes-of-C-1/</url>
    <content><![CDATA[<h3 id="1-Bit-Flags"><a href="#1-Bit-Flags" class="headerlink" title="1. Bit Flags"></a>1. Bit Flags</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">111</span> <span class="number">101</span> <span class="number">101</span></span><br><span class="line">rwx <span class="built_in">r</span><span class="literal">-x</span> <span class="built_in">r</span><span class="literal">-x</span></span><br><span class="line">owner|<span class="built_in">group</span>|other</span><br></pre></td></tr></table></figure>
<span id="more"></span> 
<h3 id="2-File"><a href="#2-File" class="headerlink" title="2. File"></a>2. File</h3><h4 id="2-1-fopen"><a href="#2-1-fopen" class="headerlink" title="2.1. fopen"></a>2.1. fopen</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">FILE *<span class="title function_">fopen</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *filename, <span class="type">const</span> <span class="type">char</span> *mode)</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>Mode String</th>
<th>Default Location</th>
</tr>
</thead>
<tbody><tr>
<td>“r”</td>
<td>File opened for reading. File must exist before being read from</td>
</tr>
<tr>
<td>“w”</td>
<td>File opened for writing. Empty file will be created if not exist</td>
</tr>
<tr>
<td>“a”</td>
<td>File opened for appending</td>
</tr>
</tbody></table>
<!-- more -->

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// example</span></span><br><span class="line">FILE *scores_file;</span><br><span class="line">scores_file = fopen(<span class="string">&quot;top10.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (scores_file == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    perror(<span class="string">&quot;top10.txt&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, <span class="string">&quot;File opened: we can use it here&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (fclose(scores_file) != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;%s\n&quot;</span>, <span class="string">&quot;fclose failed&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//example</span></span><br><span class="line">FILE *output_file;</span><br><span class="line"><span class="type">int</span> error;</span><br><span class="line"><span class="type">int</span> total = <span class="number">50</span>;</span><br><span class="line"><span class="type">float</span> small_number = <span class="number">0.125</span>;</span><br><span class="line"></span><br><span class="line">output_file = fopen(<span class="string">&quot;myfile.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (output_file == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    perror(<span class="string">&quot;myfile.txt&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(output_file, <span class="string">&quot;%s\n&quot;</span>, <span class="string">&quot;The first line in the file&quot;</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(output_file, <span class="string">&quot;%s %d\n&quot;</span>, <span class="string">&quot;The integer is&quot;</span>, total);</span><br><span class="line"><span class="built_in">fprintf</span>(output_file, <span class="string">&quot;%s %f\n&quot;</span>, <span class="string">&quot;The small float is&quot;</span>, small_number);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (fclose(output_file) != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;%s\n&quot;</span>, <span class="string">&quot;fclose failed&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-fgets"><a href="#2-2-fgets" class="headerlink" title="2.2. fgets"></a>2.2. fgets</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> *<span class="title function_">fgets</span><span class="params">(<span class="type">char</span> *s, <span class="type">int</span> n, FILE *stream)</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> LINE_LENGTH 80</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//example in main function</span></span><br><span class="line">FILE *scores_file;</span><br><span class="line"><span class="type">int</span> error;</span><br><span class="line"><span class="type">char</span> line[LINE_LENGTH + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">scores_file = fopen(<span class="string">&quot;top10.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (scores_file == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    perror(<span class="string">&quot;top10.txt&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (fgets(line, LINE_LENGTH + <span class="number">1</span>, scores_file) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, line);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">error = fclose(scores_file);</span><br><span class="line"><span class="keyword">if</span> (error != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;%s\n&quot;</span>, <span class="string">&quot;fclose failed&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> LINE_LENGTH 80</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//example in main function</span></span><br><span class="line"><span class="type">char</span> line[LINE_LENGTH + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (fgets(line, LINE_LENGTH + <span class="number">1</span>, <span class="built_in">stdin</span>) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;You typed: %s&quot;</span>, line);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-3-fscanf"><a href="#2-3-fscanf" class="headerlink" title="2.3. fscanf"></a>2.3. fscanf</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fscanf</span><span class="params">(FILE *stream, <span class="type">const</span> <span class="type">char</span> *format, ...)</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//example</span></span><br><span class="line">FILE *scores_file, *output_file;</span><br><span class="line"><span class="type">int</span> error, total;</span><br><span class="line"><span class="type">char</span> name[<span class="number">81</span>];</span><br><span class="line"></span><br><span class="line">scores_file = fopen(<span class="string">&quot;top10.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (scores_file == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    perror(<span class="string">&quot;top10.txt&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output_file = fopen(<span class="string">&quot;names.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (output_file == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    perror(<span class="string">&quot;top10.txt&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*fscanf name and total, write names to names.txt*/</span></span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">fscanf</span>(scores_file, <span class="string">&quot;%80s %d&quot;</span>, name, &amp;total) == <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Name: %s. Score: %d.\n&quot;</span>, name, total);</span><br><span class="line">    <span class="built_in">fprintf</span>(output_file, <span class="string">&quot;%s\n&quot;</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">error = fclose(scores_file);</span><br><span class="line"><span class="keyword">if</span> (error != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;%s\n&quot;</span>, <span class="string">&quot;fclose failed&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">error = fclose(output_file);</span><br><span class="line"><span class="keyword">if</span> (error != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;%s\n&quot;</span>, <span class="string">&quot;fclose failed&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-Process"><a href="#3-Process" class="headerlink" title="3. Process"></a>3. Process</h3><h4 id="3-1-fork"><a href="#3-1-fork" class="headerlink" title="3.1. fork"></a>3.1. fork</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Parent Process. pid==677</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">pid_t</span> result;</span><br><span class="line"></span><br><span class="line">    i = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line"></span><br><span class="line">    result = fork();</span><br><span class="line">    <span class="comment">/*result == 680*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (result &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        i = i + <span class="number">2</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result == <span class="number">0</span>) &#123;</span><br><span class="line">        i = i - <span class="number">2</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        perror(<span class="string">&quot;fork&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Child Process. pid == 680</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">pid_t</span> result;</span><br><span class="line"></span><br><span class="line">    i = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line"></span><br><span class="line">    result = fork();</span><br><span class="line">    <span class="comment">/*result == 0*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (result &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        i = i + <span class="number">2</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result == <span class="number">0</span>) &#123;</span><br><span class="line">        i = i - <span class="number">2</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        perror(<span class="string">&quot;fork&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The output could be “5, 7, 3” or “5, 3, 7”. The programmer can’t control whether the child process or parent process executes first after they return from fork. Therefore, if both the child and the parent are producing output, the order of the output may be different each time we run the program.<br>Parent and Child processes are completely separate processes and don’t share memories: <code>i = i + 2</code> in parent process does not change <code>i</code> in child process.</p>
<h4 id="3-2-concurrency"><a href="#3-2-concurrency" class="headerlink" title="3.2. concurrency"></a>3.2. concurrency</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> ...</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> result;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[%d] Original process (my parent is %d)\n&quot;</span>, getpid(), getppid());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        result = fork();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result == <span class="number">-1</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;fork:&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;[%d] Child %d %d\n&quot;</span>, getpid(), i, j);</span><br><span class="line">                usleep(<span class="number">100</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[%d] Parent about to terminate\n&quot;</span>, getpid());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>side notes: The shell waits for the original parent process to finish, and then prints a shell prompt.  But the shell is just another process that the operating system has to schedule, so a few child processes get to print some output before the shell prints its prompt. Once the shell runs, it prints it message – but some child processes haven’t finished yet, so they print more output afterwards.</p>
<h4 id="3-3-wait"><a href="#3-3-wait" class="headerlink" title="3.3. wait"></a>3.3. wait</h4><p>Force the parent process to wait until its children have terminated.<br>On return from a successful <code>wait()</code> call, the <code>stat_loc</code> area contains termination information about the process that exited.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//edited from previous codes</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> result;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[%d] Original process (my parent is %d)\n&quot;</span>, getpid(), getppid());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        result = fork();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result == <span class="number">-1</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;fork:&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;[%d] Child %d %d\n&quot;</span>, getpid(), i, j);</span><br><span class="line">                usleep(<span class="number">100</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);<span class="comment">/*status value 0 in wait(), return back to parent, represent a successful run*/</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*newly added*/</span></span><br><span class="line">    <span class="comment">/*need to block until all five children processes have terminated*/</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="type">pid_t</span> pid;</span><br><span class="line">        <span class="type">int</span> status;</span><br><span class="line">        <span class="comment">/*call wait() for each child*/</span></span><br><span class="line">        <span class="keyword">if</span> ((pid = wait(&amp;status)) == <span class="number">-1</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;wait&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Child %d terminated with %d\n&quot;</span>, pid, status);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[%d] Parent about to terminate\n&quot;</span>, getpid());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//edited from previous example</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> ...</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> result;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[%d] Original process (my parent is %d)\n&quot;</span>, getpid(), getppid());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        result = fork();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result == <span class="number">-1</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;fork:&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;[%d] Child %d %d\n&quot;</span>, getpid(), i, j);</span><br><span class="line">                usleep(<span class="number">100</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="type">pid_t</span> pid;</span><br><span class="line">        <span class="type">int</span> status;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((pid = wait(&amp;status)) == <span class="number">-1</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;wait&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (WIFEXITED(status)) &#123;<span class="comment">/*child exited successfully*/</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Child %d terminated with %d\n&quot;</span>, pid, WEXISTATUS(status));</span><br><span class="line">                <span class="comment">/*WEXISTATUS - extract the exit value*/</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (WIFSIGNALED(status)) &#123;<span class="comment">/*child exited as a result of a signal*/</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Child %d terminated with %d\n&quot;</span>, pid, WTERMSIG(status));</span><br><span class="line">                <span class="comment">/*WTERMSIG - find out the number of the signal*/</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, <span class="string">&quot;Shouldn&#x27;t get here&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[%d] Parent about to terminate\n&quot;</span>, getpid());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-4-exec"><a href="#3-4-exec" class="headerlink" title="3.4. exec"></a>3.4. exec</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, getpid()); <span class="comment">//pid 17170</span></span><br><span class="line">    execl(<span class="string">&quot;./hello&quot;</span>, <span class="literal">NULL</span>); <span class="comment">//will execute ./hello</span></span><br><span class="line">    perror(<span class="string">&quot;exec&quot;</span>);<span class="comment">//will not run if no error occurs</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//will not run if no error occurs</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// hello.c</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, getpid()); <span class="comment">//pid 17170</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, <span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>The first argument to execl is the path to an executable.  The remaining arguments to execl are the command line arguments to the executable named in the first argument. In this case, we don’t have any commandline arguments.  However, execl requires that we include NULL as the final argument.  </p>
</blockquote>
<blockquote>
<p>When the process calls execl, control is passed to the operating system.  The code is loaded into the code region of the address space. The program counter points to the execl function, and the stack pointer points to the main function stack frame since that is the function we are currently executing.  </p>
</blockquote>
<blockquote>
<p>When performing execl, the operating system finds the file containing the executable program and loads it into memory where the code segment is. It also initializes a new stack. The program counter and stack pointer are updated so that the next instruction to execute when this process returns to user level is the first instruction in the new program.  </p>
</blockquote>
<blockquote>
<p>The operating system does not create a new process. exec asks the operating system to modify the calling process. This means that the process has the same process id after exec. And it retains some state from the original process such as open file descriptors.</p>
</blockquote>
<h4 id="3-5-pipe"><a href="#3-5-pipe" class="headerlink" title="3.5. pipe"></a>3.5. pipe</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* equivalent to sort &lt; file1 | uniq */</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> fd[<span class="number">2</span>], r;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*Create the pipe*/</span></span><br><span class="line">    <span class="keyword">if</span> ((pipe(fd)) == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;pipe&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((r = fork()) &gt; <span class="number">0</span>) &#123; <span class="comment">// parent will run sort</span></span><br><span class="line">        <span class="comment">// Set up the redirection from file1 to stdin</span></span><br><span class="line">        <span class="type">int</span> filedes = open(<span class="string">&quot;file1&quot;</span>, O_RDONLY);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Reset stdin so that when we read from stdin it comes from the file</span></span><br><span class="line">        <span class="keyword">if</span> ((dup2(filedes, fileno(<span class="built_in">stdin</span>))) == <span class="number">-1</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;dup2&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Reset stdout so that when we write to stdout it goes to the pipe</span></span><br><span class="line">        <span class="keyword">if</span> ((dup2(fd[<span class="number">1</span>], fileno(<span class="built_in">stdout</span>))) == <span class="number">-1</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;dup2&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Parent won&#x27;t be reading from pipe</span></span><br><span class="line">        <span class="keyword">if</span> ((close(fd[<span class="number">0</span>])) == <span class="number">-1</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;close&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Because writes go to stdout, noone should write to fd[1]</span></span><br><span class="line">        <span class="keyword">if</span> ((close(fd[<span class="number">1</span>])) == <span class="number">-1</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;close&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// We won&#x27;t be using filedes directly, so close it.</span></span><br><span class="line">        <span class="keyword">if</span> ((close(filedes)) == <span class="number">-1</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;close&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        execl(<span class="string">&quot;/usr/bin/sort&quot;</span>, <span class="string">&quot;sort&quot;</span>, (<span class="type">char</span> *) <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;ERROR: exec should not return \n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (r == <span class="number">0</span>) &#123; <span class="comment">// child will run uniq</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Reset stdi so that it reads from the pipe</span></span><br><span class="line">        <span class="keyword">if</span> ((dup2(fd[<span class="number">0</span>], fileno(<span class="built_in">stdin</span>))) == <span class="number">-1</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;dup2&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// This process will never write to the pipe.</span></span><br><span class="line">        <span class="keyword">if</span> ((close(fd[<span class="number">1</span>])) == <span class="number">-1</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;close&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Since we rest stdin to read from the pipe, we don&#x27;t need fd[0]</span></span><br><span class="line">        <span class="keyword">if</span> ((close(fd[<span class="number">0</span>])) == <span class="number">-1</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;close&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        execl(<span class="string">&quot;/usr/bin/uniq&quot;</span>, <span class="string">&quot;uniq&quot;</span>, (<span class="type">char</span> *) <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;ERROR: exec should not return \n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        perror(<span class="string">&quot;fork&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> ...</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE 8192</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> line[MAXSIZE];</span><br><span class="line">    <span class="type">int</span> fd[<span class="number">2</span>];</span><br><span class="line">    <span class="comment">// create a pipe</span></span><br><span class="line">    <span class="keyword">if</span> (pipe(fd) == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;pipe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> r = fork();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (r &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// Parent reads from stdin, and writes to child</span></span><br><span class="line">        <span class="comment">// close the read file descriptor since parent will write to pipe</span></span><br><span class="line">        close(fd[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Enter a line &gt; &quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (fgets(line, MAXSIZE, <span class="built_in">stdin</span>) != <span class="literal">NULL</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;[%d] writing to pipe\n&quot;</span>, getpid());</span><br><span class="line">            <span class="keyword">if</span> (write(fd[<span class="number">1</span>], line, MAXSIZE) == <span class="number">-1</span>) &#123;</span><br><span class="line">                perror(<span class="string">&quot;write to pipe&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;[%d] finished writing\n&quot;</span>, getpid());</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Enter a line &gt; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        close(fd[<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[%d] stdin has been closed, waiting for child\n&quot;</span>, getpid());</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> status;</span><br><span class="line">        <span class="keyword">if</span> (wait(&amp;status) != <span class="number">-1</span>)  &#123;</span><br><span class="line">            <span class="keyword">if</span> (WIFEXITED(status)) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;[%d] Child exited with %d\n&quot;</span>, getpid(),</span><br><span class="line">                        WEXITSTATUS(status));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;[%d] Child exited abnormally\n&quot;</span>, getpid());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (r == <span class="number">0</span>) &#123;</span><br><span class="line">        close(fd[<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[%d] child\n&quot;</span>, getpid());</span><br><span class="line">        <span class="comment">// Child will read from parent</span></span><br><span class="line">        <span class="type">char</span> other[MAXSIZE];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (read(fd[<span class="number">0</span>], other, MAXSIZE) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;[%d] child received %s&quot;</span>, getpid(), other);</span><br><span class="line">            sleep(<span class="number">2</span>); <span class="comment">// slow down the reading</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[%d] child finished reading&quot;</span>, getpid());</span><br><span class="line">        close(fd[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        perror(<span class="string">&quot;fork&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The Producer&#x2F;Consumer problem:  </p>
<ol>
<li>Producer adds to the queue when it is full.  </li>
<li>Consumer removes from the queue when it is empty.  </li>
<li>Producer and Consumer operate on queue simultaneously.</li>
</ol>
<h4 id="3-6-select"><a href="#3-6-select" class="headerlink" title="3.6. select"></a>3.6. select</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// This is now the parent with 2 children -- each with a pipe</span></span><br><span class="line"><span class="comment">// from which the parent can read.</span></span><br><span class="line"></span><br><span class="line">fd_set read_fds;</span><br><span class="line">FD_ZERO(&amp;read_fds);</span><br><span class="line">FD_SET(pipe_child1[<span class="number">0</span>], &amp;read_fds);</span><br><span class="line">FD_SET(pipe_child2[<span class="number">0</span>], &amp;read_fds);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> numfd;</span><br><span class="line"><span class="keyword">if</span> (pipe_child1[<span class="number">0</span>] &gt; pipe_child2[<span class="number">0</span>]) &#123;</span><br><span class="line">    numfd = pipe_child1[<span class="number">0</span>] + <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    numfd = pipe_child2[<span class="number">0</span>] + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (select(numfd, &amp;read_fds, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">    perror(<span class="string">&quot;select&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Read first from child 1</span></span><br><span class="line"><span class="keyword">if</span> (FD_ISSET(pipe_child1[<span class="number">0</span>], &amp;read_fds)) &#123;</span><br><span class="line">    r = read(pipe_child1[<span class="number">0</span>], line, MAXSIZE);</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Read %s from child 1\n&quot;</span>, line);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Now read from child 2</span></span><br><span class="line"><span class="keyword">if</span> (FD_ISSET(pipe_child2[<span class="number">0</span>], &amp;read_fds)) &#123;</span><br><span class="line">    r = read(pipe_child2[<span class="number">0</span>], line, MAXSIZE);</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Read %s from child 2\n&quot;</span>, line);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-Signal"><a href="#4-Signal" class="headerlink" title="4. Signal"></a>4. Signal</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> <span class="title">newact</span>;</span></span><br><span class="line">newact.sa_handler = [function];</span><br><span class="line">newact.sa_flags = <span class="number">0</span>;</span><br><span class="line">sigemptyset(&amp;newact.sa_mask);</span><br><span class="line">sigaction(SIGINT, &amp;newact, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure>

<h3 id="5-Sockets"><a href="#5-Sockets" class="headerlink" title="5. Sockets"></a>5. Sockets</h3><p>To be continued…</p>
]]></content>
      <categories>
        <category>Study Notes</category>
        <category>C</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>Reading Notes of Database Systems (1)</title>
    <url>/2019/05/13/Notes-of-Database-1/</url>
    <content><![CDATA[<p>Reading notes of <em>Database Systems-The Complete Book (2nd edition)</em></p>
<h3 id="Chapter-1-The-Relational-Model-of-Data"><a href="#Chapter-1-The-Relational-Model-of-Data" class="headerlink" title="Chapter 1 - The Relational Model of Data"></a>Chapter 1 - The Relational Model of Data</h3><blockquote>
<p><em>Relational Algebra</em>: This algebra underlies most query languages for the relational model. Its principal operators are union, intersection, difference, selection, projection, Cartesian product, natural join, theta-join, and renaming.</p>
</blockquote>
<span id="more"></span>
<h3 id="1-Basics-of-the-Relational-Model"><a href="#1-Basics-of-the-Relational-Model" class="headerlink" title="1. Basics of the Relational Model"></a>1. Basics of the Relational Model</h3><table>
<thead>
<tr>
<th>title</th>
<th>year</th>
<th>length</th>
<th>genre</th>
</tr>
</thead>
<tbody><tr>
<td>Gone With the Wind</td>
<td>1939</td>
<td>231</td>
<td>drama</td>
</tr>
<tr>
<td>Star Wars</td>
<td>1997</td>
<td>124</td>
<td>sciFi</td>
</tr>
<tr>
<td>Wayne’s World</td>
<td>1992</td>
<td>95</td>
<td>comedy</td>
</tr>
</tbody></table>
<ul>
<li><p>Attribute: Columns of a relation(<code>title, year, length, genre</code>)  </p>
</li>
<li><p>Tuple: Rows of a relation, other than the header row containing the attribute names (the first of the three tuples has the four components <code>Gone With the Wind, 1939, 231, drama</code> for attributes <code>title, year, length, and genre</code>). Each component of each tuple be atomic. It is not permitted for a value to be <code>set, list, array</code>. In the relational algebra of sets, duplicate tuples are always eliminated.     </p>
</li>
<li><p>Schema: Name of a relation and the set of attributes for a relation (<code>Movies(title, year, length, genre)</code>)  </p>
</li>
<li><p>Domain: Elementary type associated with each attribute of a relation (we could represent the schema for the <code>Movies</code> relation as <code>Movies(title:string, year:integer, length:integer, genre:string)</code>)  </p>
</li>
<li><p>Instance: A set of tuples for a given relation an instance of that relation.</p>
</li>
<li><p>Keys: Declare that the relation <code>Movies</code> has a key consisting of the two attributes <code>title</code> and <code>year</code>. That is, we don’t believe there could ever be two movies that had both the same title and the same year</p>
</li>
</ul>
<h3 id="2-Defining-a-Relation-Schema-in-SQL"><a href="#2-Defining-a-Relation-Schema-in-SQL" class="headerlink" title="2. Defining a Relation Schema in SQL"></a>2. Defining a Relation Schema in SQL</h3><h4 id="2-1-Data-Types"><a href="#2-1-Data-Types" class="headerlink" title="2.1. Data Types"></a>2.1. Data Types</h4><p><code>CHAR(n)</code>: A fixed-length string of up to <code>n</code> characters. Short strings are padded<br><code>VARCHAR(n)</code>: A string of up to <code>n</code> characters. An endmarker or string-length is used<br><code>BIT(n)</code>:  Bit strings of length n<br><code>BIT VARYING(n)</code>: Bit strings of length up to n<br><code>BOOLEAN</code>: TRUE, FALSE, UNKNOWN<br><code>INT</code> or <code>INTEGER</code>, <code>SHORTINT</code><br><code>FLOAT</code> or <code>REAL</code><br><code>DECIMAL(n,d)</code>: Values that consist of <code>n</code> decimal digits, with the decimal point assumed to be <code>d</code> positions from the right (<code>0123.45</code> is a possible value of type <code>DECIMAL(6,2)</code>)<br><code>DATE</code>: Keyword <code>DATE</code> followed by a quoted string of a special form (<code>DATE &#39;1948-05-14&#39;</code>)<br><code>TIME</code>: Keyword <code>TIME</code> and a quoted string. If fractions of a second are desired, we may continue with a decimal point (<code>TIME &#39;15:00:02.5&#39;</code> represents the time at 3 PM: two and a half seconds past three o’clock)</p>
<h4 id="2-2-Simple-Table-Declarations"><a href="#2-2-Simple-Table-Declarations" class="headerlink" title="2.2. Simple Table Declarations"></a>2.2. Simple Table Declarations</h4><ul>
<li>Declaration of a relation schema:<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> MovieStar (</span><br><span class="line">    name <span class="type">CHAR</span>(<span class="number">30</span>),</span><br><span class="line">    address <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">    gender <span class="type">CHAR</span>(<span class="number">1</span>),</span><br><span class="line">    birthdate <span class="type">DATE</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
The value of each of these components is set to the special null value, <code>NULL</code>.</li>
</ul>
<h4 id="2-3-Modifying-Relation-Schemas"><a href="#2-3-Modifying-Relation-Schemas" class="headerlink" title="2.3. Modifying Relation Schemas"></a>2.3. Modifying Relation Schemas</h4><ul>
<li>Delete a relation R by the SQL statement:<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> R;</span><br></pre></td></tr></table></figure></li>
<li>Modify the <code>MovieStar</code> relation by adding an attribute <code>phone</code> with:<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> MovieStar <span class="keyword">ADD</span> phone <span class="type">CHAR</span>(<span class="number">16</span>);</span><br></pre></td></tr></table></figure></li>
<li>Delete the <code>birthdate</code> attribute:<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> MovieStar <span class="keyword">DROP</span> birthdate;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="2-4-Default-Values"><a href="#2-4-Default-Values" class="headerlink" title="2.4. Default Values"></a>2.4. Default Values</h4><ul>
<li>Replace the declarations of <code>gender</code> and <code>birthdate</code> by:<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">gender <span class="type">CHAR</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;?&#x27;</span>,</span><br><span class="line">birthdate <span class="type">DATE</span> <span class="keyword">DEFAULT</span> <span class="type">DATE</span> <span class="string">&#x27;0000-00-00&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li>Declared the default value for new attribute <code>phone</code> to be <code>unlisted</code> when we added this attribute:<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> MovieStar <span class="keyword">ADD</span> phone <span class="type">CHAR</span>(<span class="number">16</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;unlisted&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="2-5-Declaring-Keys"><a href="#2-5-Declaring-Keys" class="headerlink" title="2.5. Declaring Keys"></a>2.5. Declaring Keys</h4><ul>
<li><p>Key is a single attribute:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> MovieStar (</span><br><span class="line">    name <span class="type">CHAR</span>(<span class="number">30</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    address <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">    gender <span class="type">CHAR</span>(<span class="number">1</span>),</span><br><span class="line">    birthdate <span class="type">DATE</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>OR</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> MovieStar (</span><br><span class="line">    name <span class="type">CHAR</span>(<span class="number">30</span>),</span><br><span class="line">    address <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">    gender <span class="type">CHAR</span>(<span class="number">1</span>),</span><br><span class="line">    birthdate <span class="type">DATE</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (name)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p><code>UNIQUE</code> could replace <code>PRIMARY KEY</code>, and <code>NULL</code> is permitted then  </p>
</li>
<li><p>Key has more than one attribute:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Movies (</span><br><span class="line">    title <span class="type">CHAR</span>(<span class="number">100</span>),</span><br><span class="line">    <span class="keyword">year</span> <span class="type">INT</span>,</span><br><span class="line">    length <span class="type">INT</span>,</span><br><span class="line">    genre <span class="type">CHAR</span>(<span class="number">10</span>),</span><br><span class="line">    studioName <span class="type">CHAR</span>(<span class="number">30</span>),</span><br><span class="line">    producerC# <span class="type">INT</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (title, <span class="keyword">year</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-An-Algebraic-Query-Language"><a href="#3-An-Algebraic-Query-Language" class="headerlink" title="3. An Algebraic Query Language"></a>3. An Algebraic Query Language</h3><blockquote>
<p>Relational algebra is not used today as a query language in commercial<br>DBMS’s, although some of the early prototypes did use this algebra directly.<br>Rather, the “real” query language, SQL, incorporates relational algebra at its<br>center, and many SQL programs are really “syntactically sugared” expressions<br>of relational algebra. Further, when a DBMS processes queries, the first thing<br>that happens to a SQL query is that it gets translated into relational algebra<br>or a very similar internal representation. Thus, there are several good reasons<br>to start out learning this algebra.</p>
</blockquote>
<h4 id="3-1-Set-Operations-on-Relations"><a href="#3-1-Set-Operations-on-Relations" class="headerlink" title="3.1. Set Operations on Relations"></a>3.1. Set Operations on Relations</h4><p>$R \cup S$: the union of $R$ and $S$, is the set of elements that are in $R$ or $S$ or both. An element appears only once in the union even if it is present in both $R$ and $S$<br>$R \cap S$: the intersection of $R$ and $S$, is the set of elements that are in both $R$ and $S$<br>$R - S$: the difference of $R$ and $S$, is the set of elements that are in $R$ but not in $S$. Note that $R − S$ is different from $S − R$; the latter is the set of elements that are in $S$ but not in $R$.</p>
<h4 id="3-2-Projection"><a href="#3-2-Projection" class="headerlink" title="3.2. Projection"></a>3.2. Projection</h4><blockquote>
<p>The projection operator is used to produce from a relation $R$ a new relation that has only some of $R$’s columns. The value of expression $\pi_{A1,A2,\dots,An}(R)$ is a relation that has only the columns for attributes $A1, A2,\dots, An$ of $R$.  </p>
</blockquote>
<p>e.g.<br>$$\pi_{title,year,length}(\text{Movies})$$  </p>
<table>
<thead>
<tr>
<th>title</th>
<th>year</th>
<th>length</th>
</tr>
</thead>
<tbody><tr>
<td>Gone With the Wind</td>
<td>1939</td>
<td>231</td>
</tr>
<tr>
<td>Star Wars</td>
<td>1997</td>
<td>124</td>
</tr>
<tr>
<td>Wayne’s World</td>
<td>1992</td>
<td>95</td>
</tr>
</tbody></table>
<h4 id="3-3-Selection"><a href="#3-3-Selection" class="headerlink" title="3.3. Selection"></a>3.3. Selection</h4><blockquote>
<p>The selection operator, applied to a relation $R$, produces a new relation with a subset of $R$’s tuples. The tuples in the resulting relation are those that satisfy some condition $C$ that involves the attributes of $R$. We denote this operation $\sigma_{C}(R)$. The schema for the resulting relation is the same as $R$’s schema, and we conventionally show the attributes in the same order as we use for $R$  </p>
</blockquote>
<p>e.g.<br>$$\sigma_{length \geq 100}(\text{Movies})$$</p>
<table>
<thead>
<tr>
<th>title</th>
<th>year</th>
<th>length</th>
<th>genre</th>
</tr>
</thead>
<tbody><tr>
<td>Gone With the Wind</td>
<td>1939</td>
<td>231</td>
<td>drama</td>
</tr>
<tr>
<td>Star Wars</td>
<td>1997</td>
<td>124</td>
<td>sciFi</td>
</tr>
</tbody></table>
<p>$$\sigma_{length \geq 100 , \textrm{AND} , genre&#x3D;’drama’}(\text{Movies})$$</p>
<table>
<thead>
<tr>
<th>title</th>
<th>year</th>
<th>length</th>
<th>genre</th>
</tr>
</thead>
<tbody><tr>
<td>Gone With the Wind</td>
<td>1939</td>
<td>231</td>
<td>drama</td>
</tr>
</tbody></table>
<h4 id="3-4-Cartesian-Product"><a href="#3-4-Cartesian-Product" class="headerlink" title="3.4. Cartesian Product"></a>3.4. Cartesian Product</h4><blockquote>
<p>The Cartesian product (or cross-product, or just product) of two sets $R$ and $S$ is the set of pairs that can be formed by choosing the first element of the pair to be any element of $R$ and the second any element of $S$. This product is denoted $R × S$.  </p>
</blockquote>
<blockquote>
<p>When $R$ and $S$ are relations, the product is essentially the same. However, since the members of $R$ and $S$ are tuples, usually consisting of more than one component, the result of pairing a tuple from $R$ with a tuple from $S$ is a longer tuple, with one component for each of the components of the constituent tuples. By convention, the components from $R$ (the left operand) precede the components from $S$ in the attribute order for the result.  </p>
</blockquote>
<blockquote>
<p>if $R$ and $S$ should happen to have some attributes in common, then we need to invent new names for at least one of each pair of identical attributes. To disambiguate an attribute $A$ that is in the schemas of both $R$ and $S$, we use $R.A$ for the attribute from $R$ and $S.A$ for the attribute from $S$.  </p>
</blockquote>
<p>e.g.<br>Relation $R$:</p>
<table>
<thead>
<tr>
<th>A</th>
<th>B</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>2</td>
</tr>
<tr>
<td>3</td>
<td>4</td>
</tr>
</tbody></table>
<p>Relation $S$:</p>
<table>
<thead>
<tr>
<th>B</th>
<th>C</th>
<th>D</th>
</tr>
</thead>
<tbody><tr>
<td>2</td>
<td>5</td>
<td>6</td>
</tr>
<tr>
<td>4</td>
<td>7</td>
<td>8</td>
</tr>
<tr>
<td>9</td>
<td>10</td>
<td>11</td>
</tr>
</tbody></table>
<p>Relation $R × S$:</p>
<table>
<thead>
<tr>
<th>A</th>
<th>R.B</th>
<th>S.B</th>
<th>C</th>
<th>D</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>2</td>
<td>2</td>
<td>5</td>
<td>6</td>
</tr>
<tr>
<td>1</td>
<td>2</td>
<td>4</td>
<td>7</td>
<td>8</td>
</tr>
<tr>
<td>1</td>
<td>2</td>
<td>9</td>
<td>10</td>
<td>11</td>
</tr>
<tr>
<td>3</td>
<td>4</td>
<td>2</td>
<td>5</td>
<td>6</td>
</tr>
<tr>
<td>3</td>
<td>4</td>
<td>4</td>
<td>7</td>
<td>8</td>
</tr>
<tr>
<td>3</td>
<td>4</td>
<td>9</td>
<td>10</td>
<td>11</td>
</tr>
</tbody></table>
<p>The product $R × S$ consists of the six tuples. We paired each of the two tuples of $R$ with each of the three tuples of $S$. Since $B$ is an attribute of both schemas, we have used $R.B$ and $S.B$ in the schema for $R × S$. The other attributes are unambiguous, and their names appear in the resulting schema unchanged.</p>
<h4 id="3-5-Natural-Joins"><a href="#3-5-Natural-Joins" class="headerlink" title="3.5. Natural Joins"></a>3.5. Natural Joins</h4><blockquote>
<p>The natural join of two relations $R$ and $S$, denoted $R \bowtie S$, in which we pair only those tuples from $R$ and $S$ that agree in whatever attributes are common to the schemas of $R$ and $S$. More precisely, let $A_1, A_2, \dots, A_n$ be all the attributes that are in both the schema of $R$ and the schema of $S$. Then a tuple $r$ from $R$ and a tuple $s$ from $S$ are successfully paired if and only if $r$ and $s$ agree on each of the attributes $A_1, A_2, \dots, A_n$.</p>
</blockquote>
<p>e.g.<br>The natural join of the relations $R$ and $S$:</p>
<table>
<thead>
<tr>
<th>A</th>
<th>B</th>
<th>C</th>
<th>D</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>2</td>
<td>5</td>
<td>6</td>
</tr>
<tr>
<td>3</td>
<td>4</td>
<td>7</td>
<td>8</td>
</tr>
</tbody></table>
<p>The only attribute common to $R$ and $S$ is B. Thus, to pair successfully, tuples need only to agree in their $B$ components. Note that the third tuple of $S$ does not pair with any tuple of $R$ and thus has no effect on the result of $R \bowtie S$. A tuple that fails to pair with any tuple of the other relation in a join is said to be a <em>dangling tuple</em>.  </p>
<p>e.g.<br>Relation $U$:</p>
<table>
<thead>
<tr>
<th>A</th>
<th>B</th>
<th>C</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>2</td>
<td>3</td>
</tr>
<tr>
<td>6</td>
<td>7</td>
<td>8</td>
</tr>
<tr>
<td>9</td>
<td>7</td>
<td>8</td>
</tr>
</tbody></table>
<p>Relation $V$:</p>
<table>
<thead>
<tr>
<th>B</th>
<th>C</th>
<th>D</th>
</tr>
</thead>
<tbody><tr>
<td>2</td>
<td>3</td>
<td>4</td>
</tr>
<tr>
<td>2</td>
<td>3</td>
<td>5</td>
</tr>
<tr>
<td>7</td>
<td>8</td>
<td>10</td>
</tr>
</tbody></table>
<p>Relation $U \bowtie V$:</p>
<table>
<thead>
<tr>
<th>A</th>
<th>B</th>
<th>C</th>
<th>D</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>2</td>
<td>3</td>
<td>4</td>
</tr>
<tr>
<td>1</td>
<td>2</td>
<td>3</td>
<td>5</td>
</tr>
<tr>
<td>6</td>
<td>7</td>
<td>8</td>
<td>10</td>
</tr>
<tr>
<td>9</td>
<td>7</td>
<td>8</td>
<td>10</td>
</tr>
</tbody></table>
<p>For tuples to pair successfully, they must agree in both the $B$ and $C$ components. Thus, the first tuple of $U$ joins with the first two tuples of $V$ , while the second and third tuples of $U$ join with the third tuple of $V$.</p>
<h4 id="3-6-Theta-Joins"><a href="#3-6-Theta-Joins" class="headerlink" title="3.6. Theta-Joins"></a>3.6. Theta-Joins</h4><blockquote>
<p>The notation for a theta-join of relations $R$ and $S$ based on condition $C$ is $R \bowtie_{C} S$. The result of this operation is constructed as follows:  </p>
</blockquote>
<ol>
<li>Take the product of $R$ and $S$.  </li>
<li>Select from the product only those tuples that satisfy the condition $C$.</li>
</ol>
<p>e.g.<br>$$U \bowtie_{A&lt;D} V$$</p>
<table>
<thead>
<tr>
<th>A</th>
<th>U.B</th>
<th>U.C</th>
<th>V.B</th>
<th>V.C</th>
<th>D</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>2</td>
<td>3</td>
<td>2</td>
<td>3</td>
<td>4</td>
</tr>
<tr>
<td>1</td>
<td>2</td>
<td>3</td>
<td>2</td>
<td>3</td>
<td>5</td>
</tr>
<tr>
<td>1</td>
<td>2</td>
<td>3</td>
<td>7</td>
<td>8</td>
<td>10</td>
</tr>
<tr>
<td>6</td>
<td>7</td>
<td>8</td>
<td>7</td>
<td>8</td>
<td>10</td>
</tr>
<tr>
<td>9</td>
<td>7</td>
<td>8</td>
<td>7</td>
<td>8</td>
<td>10</td>
</tr>
</tbody></table>
<p>Notice that the schema for the result consists of all six attributes, with $U$ and $V$ prefixed to their respective occurrences of attributes $B$ and $C$ to distinguish them. Thus, the theta-join contrasts with natural join, since in the latter common attributes are merged into one copy.  </p>
<p>e.g.<br>$$U \bowtie_{A&lt;D , \textrm{AND} , U.B \neq V.B} V$$</p>
<table>
<thead>
<tr>
<th>A</th>
<th>U.B</th>
<th>U.C</th>
<th>V.B</th>
<th>V.C</th>
<th>D</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>2</td>
<td>3</td>
<td>7</td>
<td>8</td>
<td>10</td>
</tr>
</tbody></table>
<h4 id="3-7-Combining-Operations-to-Form-Queries"><a href="#3-7-Combining-Operations-to-Form-Queries" class="headerlink" title="3.7. Combining Operations to Form Queries"></a>3.7. Combining Operations to Form Queries</h4><p>e.g. What are the titles and years of movies made by Fox that are at least 100 minutes long?<br>$$\pi_{title, year}(\sigma_{length \geq 100}(\textrm{Movies}) \cap \sigma_{studioName&#x3D;\textrm{‘Fox’}}(\textrm{Movies}))$$<br>OR<br>$$\pi_{title, year}(\sigma_{length \geq 100 , \textrm{AND} , studioName&#x3D;\textrm{‘Fox’}}(\textrm{Movies}))$$</p>
<h4 id="3-8-Naming-and-Renaming"><a href="#3-8-Naming-and-Renaming" class="headerlink" title="3.8. Naming and Renaming"></a>3.8. Naming and Renaming</h4><blockquote>
<p>use the operator $\rho_{S(A_1,A_2,\dots,A_n)}(R)$ to rename a relation $R$. The resulting relation has exactly the same tuples as $R$, but the name of the relation is $S$. Moreover, the attributes of the result relation $S$ are named $A_1, A_2, \dots, A_n$, in order from the left. If we only want to change the name of the relation to $S$ and leave the attributes as they are in $R$, we can just say $\rho_{S}(R)$</p>
</blockquote>
<p>e.g.<br>$$R × \rho_{S(X,C,D)}(S)$$<br>OR<br>$$\rho_{RS(A,B,X,C,D)}(R × S)$$</p>
<table>
<thead>
<tr>
<th>A</th>
<th>B</th>
<th>X</th>
<th>C</th>
<th>D</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>2</td>
<td>2</td>
<td>5</td>
<td>6</td>
</tr>
<tr>
<td>1</td>
<td>2</td>
<td>4</td>
<td>7</td>
<td>8</td>
</tr>
<tr>
<td>1</td>
<td>2</td>
<td>9</td>
<td>10</td>
<td>11</td>
</tr>
<tr>
<td>3</td>
<td>4</td>
<td>2</td>
<td>5</td>
<td>6</td>
</tr>
<tr>
<td>3</td>
<td>4</td>
<td>4</td>
<td>7</td>
<td>8</td>
</tr>
<tr>
<td>3</td>
<td>4</td>
<td>9</td>
<td>10</td>
<td>11</td>
</tr>
</tbody></table>
<h4 id="3-9-Relationships-Among-Operations"><a href="#3-9-Relationships-Among-Operations" class="headerlink" title="3.9. Relationships Among Operations"></a>3.9. Relationships Among Operations</h4><ol>
<li>$$R \cap S &#x3D; R - (R - S)$$</li>
<li>$$R \bowtie_{C} S &#x3D; \sigma_{C}(R × S)$$</li>
<li>Condition $C$ is $R.A_1&#x3D;S.A_1 , \textrm{AND} , R.A_2&#x3D;S.A_2 , \textrm{AND} , \dots , \textrm{AND} R.A_n&#x3D;S.A_n$<br>where $A_1, A_2, \dots, A_n$ are all the attributes appearing in the schemas of both $R$ and $S$.<br>Let $L$ be the list of attributes in the schema of $R$ followed by those attributes in the schema of $S$ that are not also in the schema of $R$<br>$$R \bowtie S &#x3D; \pi_{L}(\sigma_{C}(R × S))$$</li>
</ol>
<p>e.g. Theta-Join in the example has relationships:<br>$$U \bowtie_{A&lt;D , \textrm{AND} , U.B \neq V.B} V &#x3D; \sigma_{A&lt;D , \textrm{AND} , U.B \neq V.B}(U × V)$$</p>
<h4 id="3-10-A-Linear-Notation-for-Algebraic-Expressions"><a href="#3-10-A-Linear-Notation-for-Algebraic-Expressions" class="headerlink" title="3.10. A Linear Notation for Algebraic Expressions"></a>3.10. A Linear Notation for Algebraic Expressions</h4><blockquote>
<p>The notation we used for assignment statements is:  </p>
</blockquote>
<blockquote>
<ol>
<li>A relation name and parenthesized list of attributes for that relation. The name <em>Answer</em> will be used conventionally for the result of the final step; i.e., the name of the relation at the root of the expression tree</li>
</ol>
</blockquote>
<blockquote>
<ol start="2">
<li>The assignment symbol :&#x3D;</li>
</ol>
</blockquote>
<blockquote>
<ol start="3">
<li>Any algebraic expression on the right. We can choose to use only one operator per assignment, in which case each interior node of the tree gets its own assignment statement. However, it is also permissible to combine several algebraic operations in one right side, if it is convenient to do so.</li>
</ol>
</blockquote>
<p>e.g. $$\pi_{title, year}(\sigma_{length \geq 100}(\textrm{Movies}) \cap \sigma_{studioName&#x3D;\textrm{‘Fox’}}(\textrm{Movies}))$$<br>can be written as<br>$$\begin{align}<br>R(t,y,l,i,s,p) &amp;:&#x3D; \sigma_{length \geq 100}(\textrm{Movies}) \nonumber  \<br>S(t,y,l,i,s,p) &amp;:&#x3D; \sigma_{studioName&#x3D;\textrm{‘Fox’}}(\textrm{Movies}) \nonumber\<br>T(t,y,l,i,s,p) &amp;:&#x3D; R \cap S \nonumber\<br>\textrm{Answer}(title, year) &amp;:&#x3D; \pi_{t,y}(T) \nonumber<br>\end{align}$$</p>
<h3 id="4-Constraints-on-Relations"><a href="#4-Constraints-on-Relations" class="headerlink" title="4. Constraints on Relations"></a>4. Constraints on Relations</h3><ol>
<li>Referential Integrity Constraint<br>$\pi_{A}(R) \subseteq \pi_{B}(S)$, or equivalently, $\pi_{A}(R) - \pi_{B}(S) &#x3D; \emptyset$</li>
<li>Key Constraint<br>e.g.<br>$\sigma_{MS1.name &#x3D; MS2.name , \textrm{AND} , MS1.address \neq MS2.address}(MS1 × MS2) &#x3D; \emptyset$, where “name” is the key</li>
<li>Domain Constraint<br>e.g.<br>$\sigma_{gender \neq ‘F’ , \textrm{AND} , gender \neq ‘M’}(\textrm{MovieStar}) &#x3D; \emptyset$</li>
</ol>
<h3 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h3><p>Database Systems-The Complete Book(2nd ed, 2014, Pearson)</p>
]]></content>
      <categories>
        <category>Study Notes</category>
        <category>Database Systems</category>
      </categories>
      <tags>
        <tag>Relational Algebra</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Reading Notes of Database Systems (2)</title>
    <url>/2019/06/16/Notes-of-Database-2/</url>
    <content><![CDATA[<p>Reading notes of <em>Database Systems-The Complete Book (2nd edition)</em></p>
<h3 id="Chapter-2-Design-Theory-for-Relational-Databases"><a href="#Chapter-2-Design-Theory-for-Relational-Databases" class="headerlink" title="Chapter 2 - Design Theory for Relational Databases"></a>Chapter 2 - Design Theory for Relational Databases</h3><h3 id="1-Functional-Dependencies"><a href="#1-Functional-Dependencies" class="headerlink" title="1. Functional Dependencies"></a>1. Functional Dependencies</h3><h4 id="1-1-Definition-of-Functional-Dependency"><a href="#1-1-Definition-of-Functional-Dependency" class="headerlink" title="1.1. Definition of Functional Dependency"></a>1.1. Definition of Functional Dependency</h4><blockquote>
<p>A <em>functional dependency</em> (FD) on a relation $R$ is a statement of the form “If two tuples of $R$ agree on all of the attributes $A_1, A_2, \dots , A_n$ (i.e., the tuples have the same values in their respective components for each of these attributes), then they must also agree on all of another list of attributes $B_1, B_2, \dots, B_m$. We write this FD formally as $A_{1} A_{2} \dots A_{n} \to B_{1} B_{2} \dots B_{m}$ and say that<br>$$A_1, A_2, \dots, A_n ; \textrm{functionally determine} ; B_1, B_2, \dots, B_m$$</p>
</blockquote>
<span id="more"></span>
<p>e.g.  </p>
<table>
<thead>
<tr>
<th>title</th>
<th>year</th>
<th>length</th>
<th>genre</th>
<th>studioName</th>
<th>starName</th>
</tr>
</thead>
<tbody><tr>
<td>Star Wars</td>
<td>1977</td>
<td>124</td>
<td>SciFi</td>
<td>Fox</td>
<td>Carrie Fisher</td>
</tr>
<tr>
<td>Star Wars</td>
<td>1977</td>
<td>124</td>
<td>SciFi</td>
<td>Fox</td>
<td>Mark Hamill</td>
</tr>
<tr>
<td>Star Wars</td>
<td>1977</td>
<td>124</td>
<td>SciFi</td>
<td>Fox</td>
<td>Harrison Ford</td>
</tr>
<tr>
<td>Gone With the Wind</td>
<td>1939</td>
<td>231</td>
<td>drama</td>
<td>MGM</td>
<td>Vivien Leigh</td>
</tr>
<tr>
<td>Wayne’s World</td>
<td>1992</td>
<td>95</td>
<td>comedy</td>
<td>Paramount</td>
<td>Dana Carvey</td>
</tr>
<tr>
<td>Wayne’s World</td>
<td>1992</td>
<td>95</td>
<td>comedy</td>
<td>Paramount</td>
<td>Mike Meyers</td>
</tr>
</tbody></table>
<p>The following FD holds:<br>$$\textrm{title year} \to \textrm{length genre studioName}$$</p>
<blockquote>
<p>Informally, this FD says that if two tuples have the same value in their <em><strong>title</strong></em> components, and they also have the same value in their <em><strong>year</strong></em> components, then these two tuples must also have the same values in their <em><strong>length</strong></em> components, the same values in their <em><strong>genre</strong></em> components, and the same values in their <em><strong>studioName</strong></em> components.</p>
</blockquote>
<blockquote>
<p>This assertion makes sense, since we believe that it is not possible for there to be two movies released in the same year with the same title (although there could be movies of the same title released in different years). Thus, we expect that given a title and year, there is a unique movie. Therefore, there is a unique length for the movie, a unique genre, and a unique studio.</p>
</blockquote>
<blockquote>
<p>$A_{1} A_{2} \dots A_{n} \to B$ is called a “functional” dependency because in principle there is a function that takes a list of values, one for each of attributes $A_1, A_2, \dots, A_n$ and produces a unique value (or no value at all) for $B$</p>
</blockquote>
<blockquote>
<p>The function is only computed by lookup in the relation. We look for a tuple with the given <em><strong>title</strong></em> and <em><strong>year</strong></em> values and see what value that tuple has for <em><strong>length</strong></em>.</p>
</blockquote>
<p>The following statement is false and it is not a functional dependency:<br>$$\textrm{title year} \to \textrm{starName}$$</p>
<h4 id="1-2-Keys-of-Relations"><a href="#1-2-Keys-of-Relations" class="headerlink" title="1.2. Keys of Relations"></a>1.2. Keys of Relations</h4><blockquote>
<p>We say a set of one or more attributes {$A_1, A_2, \dots, A_n$} is a key for a relation $R$ if:  </p>
</blockquote>
<ol>
<li>Those attributes functionally determine all other attributes of the relation. That is, it is impossible for two distinct tuples of $R$ to agree on all of $A_1, A_2, \dots, A_n$.  </li>
<li>No proper subset of {$A_1, A_2, \dots, A_n$} functionally determines all other attributes of $R$; i.e., a key must be minimal.<br>When a key consists of a single attribute $A$, we often say that $A$ (rather than {$A$}) is a key.</li>
</ol>
<h4 id="1-3-SuperKeys"><a href="#1-3-SuperKeys" class="headerlink" title="1.3. SuperKeys"></a>1.3. SuperKeys</h4><blockquote>
<p>A set of attributes that contains a key is called a <em><strong>superkey</strong></em>, short for “superset of a key.” Thus, every key is a superkey. However, some superkeys are not (minimal) keys. Note that every superkey satisfies the first condition of a key: it functionally determines all other attributes of the relation. However, a superkey need not satisfy the second condition: minimality</p>
</blockquote>
<p>e.g.<br>Not only is the key {$\textrm{title, year, starName}$} a superkey, but any superset of this set of attributes, such as {$\textrm{title, year, starName, length, studioName}$} is a superkey</p>
<h3 id="2-Rules-About-Functional-Dependencies"><a href="#2-Rules-About-Functional-Dependencies" class="headerlink" title="2. Rules About Functional Dependencies"></a>2. Rules About Functional Dependencies</h3><h4 id="2-1-The-Splitting-x2F-Combining-Rule"><a href="#2-1-The-Splitting-x2F-Combining-Rule" class="headerlink" title="2.1. The Splitting&#x2F;Combining Rule"></a>2.1. The Splitting&#x2F;Combining Rule</h4><p>$$A_1 A_2 \dots A_n \to B_1 B_2 \dots B_m$$<br>is equivalent to<br>$$A_1 A_2 \dots A_n \to B_i ; \textrm{for i &#x3D; 1,2,…,m}$$</p>
<h4 id="2-2-Trivial-Functional-Dependencies"><a href="#2-2-Trivial-Functional-Dependencies" class="headerlink" title="2.2. Trivial Functional Dependencies"></a>2.2. Trivial Functional Dependencies</h4><p>The FD $A_1 A_2 \dots A_n \to B_1 B_2 \dots B_m$ is equivalent to<br>$$A_1 A_2 \dots A_n \to C_1 C_2 \dots C_k$$<br>where the $C$’s are all those $B$’s that are not also $A$’s</p>
<h4 id="2-3-Computing-the-Closure-of-Attributes"><a href="#2-3-Computing-the-Closure-of-Attributes" class="headerlink" title="2.3. Computing the Closure of Attributes"></a>2.3. Computing the Closure of Attributes</h4><blockquote>
<p><em><strong>Algorithm 7</strong></em>: Closure of a Set of Attributes<br><em><strong>INPUT</strong></em>: A set of attributes ${A_1, A_2, \dots, A_n}$ and a set of FD’s $S$.<br><em><strong>OUTPUT</strong></em>: The closure ${A_1, A_2, \dots, A_n}^{+}$  </p>
</blockquote>
<ol>
<li>If necessary, split the FD’s of $S$, so each FD in $S$ has a single attribute on the right.  </li>
<li>Let $X$ be a set of attributes that eventually will become the closure. Initialize $X$ to be ${A_1, A_2, \dots, A_n}$.  </li>
<li>Repeatedly search for some FD<br>$$B_1 B_2 \dots B_m \to C$$<br>such that all of $B_1, B_2, \dots, B_m$ are in the set of attributes $X$, but $C$ is not. Add $C$ to the set $X$ and repeat the search. Since $X$ can only grow, and the number of attributes of any relation schema must be finite, eventually nothing more can be added to $X$, and this step ends.  </li>
<li>The set $X$, after no more attributes can be added to it, is the correct value of ${A_1, A_2, \dots, A_n}^{+}$.</li>
</ol>
<h4 id="2-4-The-Transitive-Rule"><a href="#2-4-The-Transitive-Rule" class="headerlink" title="2.4. The Transitive Rule"></a>2.4. The Transitive Rule</h4><h4 id="2-5-Closing-Sets-of-Functional-Dependencies"><a href="#2-5-Closing-Sets-of-Functional-Dependencies" class="headerlink" title="2.5. Closing Sets of Functional Dependencies"></a>2.5. Closing Sets of Functional Dependencies</h4><h4 id="2-6-Projecting-Functional-Dependencies"><a href="#2-6-Projecting-Functional-Dependencies" class="headerlink" title="2.6. Projecting Functional Dependencies"></a>2.6. Projecting Functional Dependencies</h4><h3 id="3-Design-of-Relational-Database-Schemas"><a href="#3-Design-of-Relational-Database-Schemas" class="headerlink" title="3. Design of Relational Database Schemas"></a>3. Design of Relational Database Schemas</h3><h4 id="3-1-Anomalies"><a href="#3-1-Anomalies" class="headerlink" title="3.1. Anomalies"></a>3.1. Anomalies</h4><h4 id="3-2-Decomposing-Relations"><a href="#3-2-Decomposing-Relations" class="headerlink" title="3.2. Decomposing Relations"></a>3.2. Decomposing Relations</h4><h4 id="3-3-Boyce-Codd-Normal-Form"><a href="#3-3-Boyce-Codd-Normal-Form" class="headerlink" title="3.3. Boyce-Codd Normal Form"></a>3.3. Boyce-Codd Normal Form</h4><blockquote>
<p>A relation $R$ is in BCNF if and only if: whenever there is a nontrivial FD $A_1 A_2 \dots A_n \to B_1 B_2 \dots B_m$ for $R$, it is the case that ${A_1, A_2, \dots, A_n}$ is a superkey for $R$.</p>
</blockquote>
<p>E.g. Consider a relation with schema {title, year, length, genre, studioName, starName} has FD:<br>$$\textrm{title} ; \textrm{year} \to \textrm{length} ; \textrm{genre} ; \textrm{studioName}$$<br>The left side of the above FD is not a superkey. In particular, we know that <em>title</em> and <em>year</em> do not functionally determine the sixth attribute, <em>starName</em>. Thus, the existence of this FD violates the BCNF condition and tells us this relation is not in BCNF</p>
<h4 id="3-4-Decomposition-into-BCNF"><a href="#3-4-Decomposition-into-BCNF" class="headerlink" title="3.4. Decomposition into BCNF"></a>3.4. Decomposition into BCNF</h4><blockquote>
<p><em><strong>Algorithm 20</strong></em>: BCNF Decomposition Algorithm<br><em><strong>INPUT</strong></em>: A relation $R_0$ with a set of functional dependencies $S_0$<br><em><strong>OUTPUT</strong></em>: A decomposition of $R_0$ into a collection of relations, all of which are in BCNF.<br><em><strong>METHOD</strong></em>: The following steps can be applied recursively to any relation $R$ and set of FD’s $S$. Initially, apply them with $R$ &#x3D; $R_0$ and $S$ &#x3D; $S_0$.  </p>
</blockquote>
<ol>
<li>Check whether $R$ is in BCNF. If so, nothing more needs to be done. Return ${R}$ as the answer.  </li>
<li>If there are BCNF violations, let one be $X \to Y$ . Use Algorithm 7 to compute $X^+$. Choose $R_1 &#x3D; X^+$ as one relation schema and let $R_2$ have attributes $X$ and those attributes of $R$ that are not in $X^+$.  </li>
<li>Use Algorithm 12 to compute the sets of FD’s for $R_1$ and $R_2$; let these be $S_1$ and $S_2$, respectively.  </li>
<li>Recursively decompose $R_1$ and $R_2$ using this algorithm. Return the union of the results of these decompositions.</li>
</ol>
<p>E.g. Consider<br>$$\textrm{title} ; \textrm{year} \to \textrm{length} ; \textrm{genre} ; \textrm{studioName}$$<br>is a BCNF violation. In this case, the right side already includes all the attributes functionally determined by <em>title</em> and <em>year</em>, so we shall use this BCNF violation to decompose the relation into:  </p>
<ol>
<li>The schema {title, year, length, genre, studioName} consisting of all the attributes on either side of the FD.  </li>
<li>The schema {title, year, starName} consisting of the left side of the FD plus all attributes of the relation that do not appear in either side of the FD (only starName, in this case).</li>
</ol>
<h3 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h3><p>Database Systems-The Complete Book(2nd ed, 2014, Pearson)</p>
]]></content>
      <categories>
        <category>Study Notes</category>
        <category>Database Systems</category>
      </categories>
      <tags>
        <tag>Relational Algebra</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Reading Notes of Database Systems (3)</title>
    <url>/2019/07/28/Notes-of-Database-3/</url>
    <content><![CDATA[<p>Reading notes of <em>Database Systems-The Complete Book (2nd edition)</em></p>
<h3 id="Chapter-5-The-Database-Language-SQL"><a href="#Chapter-5-The-Database-Language-SQL" class="headerlink" title="Chapter 5 - The Database Language SQL"></a>Chapter 5 - The Database Language SQL</h3><h3 id="1-Simple-Queries-in-SQL"><a href="#1-Simple-Queries-in-SQL" class="headerlink" title="1. Simple Queries in SQL"></a>1. Simple Queries in SQL</h3><p>Movies(title, year, length, genre, studioName, producerC#)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--all movies produced by Disney Studios in 1990</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Movies</span><br><span class="line"><span class="keyword">WHERE</span> studioName <span class="operator">=</span> ’Disney’ <span class="keyword">AND</span> <span class="keyword">year</span> <span class="operator">=</span> <span class="number">1990</span>;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h4 id="1-1-Projection-in-SQL"><a href="#1-1-Projection-in-SQL" class="headerlink" title="1.1. Projection in SQL"></a>1.1. Projection in SQL</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--produce only the movie title and length</span></span><br><span class="line"><span class="keyword">SELECT</span> title, length</span><br><span class="line"><span class="keyword">FROM</span> Movies</span><br><span class="line"><span class="keyword">WHERE</span> studioName <span class="operator">=</span> ’Disney’ <span class="keyword">AND</span> <span class="keyword">year</span> <span class="operator">=</span> <span class="number">1990</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--produce a relation with attributes name and duration in place of title and length</span></span><br><span class="line"><span class="keyword">SELECT</span> title <span class="keyword">AS</span> name, length <span class="keyword">AS</span> duration</span><br><span class="line"><span class="keyword">FROM</span> Movies</span><br><span class="line"><span class="keyword">WHERE</span> studioName <span class="operator">=</span> ’Disney’ <span class="keyword">AND</span> <span class="keyword">year</span> <span class="operator">=</span> <span class="number">1990</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--with the length in hours</span></span><br><span class="line"><span class="keyword">SELECT</span> title <span class="keyword">AS</span> name, length<span class="operator">*</span><span class="number">0.016667</span> <span class="keyword">AS</span> lengthInHours</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--allow a constant as an expression in the SELECT clause.</span></span><br><span class="line"><span class="keyword">SELECT</span> title, length<span class="operator">*</span><span class="number">0.016667</span> <span class="keyword">AS</span> length, ’hrs.’ <span class="keyword">AS</span> inHours</span><br><span class="line"><span class="keyword">FROM</span> Movies</span><br><span class="line"><span class="keyword">WHERE</span> studioName <span class="operator">=</span> ’Disney’ <span class="keyword">AND</span> <span class="keyword">year</span> <span class="operator">=</span> <span class="number">1990</span>;</span><br></pre></td></tr></table></figure>

<h4 id="1-2-Selection-in-SQL"><a href="#1-2-Selection-in-SQL" class="headerlink" title="1.2. Selection in SQL"></a>1.2. Selection in SQL</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> title</span><br><span class="line"><span class="keyword">FROM</span> Movies</span><br><span class="line"><span class="keyword">WHERE</span> (<span class="keyword">year</span> <span class="operator">&gt;</span> <span class="number">1970</span> <span class="keyword">OR</span> length <span class="operator">&lt;</span> <span class="number">90</span>) <span class="keyword">AND</span> studioName <span class="operator">=</span> ’MGM’;</span><br></pre></td></tr></table></figure>

<h4 id="1-3-Comparison-of-Strings"><a href="#1-3-Comparison-of-Strings" class="headerlink" title="1.3. Comparison of Strings"></a>1.3. Comparison of Strings</h4><h4 id="1-4-Pattern-Matching-in-SQL"><a href="#1-4-Pattern-Matching-in-SQL" class="headerlink" title="1.4. Pattern Matching in SQL"></a>1.4. Pattern Matching in SQL</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">s <span class="keyword">LIKE</span> p</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--The last four characters may be anything.</span></span><br><span class="line"><span class="keyword">SELECT</span> title</span><br><span class="line"><span class="keyword">FROM</span> Movies</span><br><span class="line"><span class="keyword">WHERE</span> title <span class="keyword">LIKE</span> ’Star ____’;</span><br><span class="line"><span class="comment">--results can be Star Wars and Star Trek.</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--search for all movies with a possessive (’s) in their titles</span></span><br><span class="line"><span class="keyword">SELECT</span> title</span><br><span class="line"><span class="keyword">FROM</span> Movies</span><br><span class="line"><span class="keyword">WHERE</span> title <span class="keyword">LIKE</span> ’<span class="operator">%</span>’’s<span class="operator">%</span>’;</span><br><span class="line"><span class="comment">--’’s in a pattern is matched by a single apostrophe followed by an s.</span></span><br><span class="line"><span class="comment">-- results can be Logan’s Run or Alice’s Restaurant</span></span><br></pre></td></tr></table></figure>

<h4 id="1-5-Dates-and-Times"><a href="#1-5-Dates-and-Times" class="headerlink" title="1.5. Dates and Times"></a>1.5. Dates and Times</h4><h4 id="1-6-Null-Values-and-Comparisons-Involving-NULL"><a href="#1-6-Null-Values-and-Comparisons-Involving-NULL" class="headerlink" title="1.6. Null Values and Comparisons Involving NULL"></a>1.6. Null Values and Comparisons Involving NULL</h4><h4 id="1-7-The-Truth-Value-UNKNOWN"><a href="#1-7-The-Truth-Value-UNKNOWN" class="headerlink" title="1.7. The Truth-Value UNKNOWN"></a>1.7. The Truth-Value UNKNOWN</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Movies</span><br><span class="line"><span class="keyword">WHERE</span> length <span class="operator">&lt;=</span> <span class="number">120</span> <span class="keyword">OR</span> length <span class="operator">&gt;</span> <span class="number">120</span>;</span><br><span class="line"><span class="comment">--the true meaning of the query is “find all the Movies tuples with non-NULL lengths.”</span></span><br></pre></td></tr></table></figure>

<h4 id="1-8-Ordering-the-Output"><a href="#1-8-Ordering-the-Output" class="headerlink" title="1.8. Ordering the Output"></a>1.8. Ordering the Output</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--get the movies listed by length, shortest first, and among movies of equal length, alphabetically</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Movies</span><br><span class="line"><span class="keyword">WHERE</span> studioName <span class="operator">=</span> ’Disney’ <span class="keyword">AND</span> <span class="keyword">year</span> <span class="operator">=</span> <span class="number">1990</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> length, title;</span><br></pre></td></tr></table></figure>

<h3 id="2-Queries-Involving-More-Than-One-Relation"><a href="#2-Queries-Involving-More-Than-One-Relation" class="headerlink" title="2. Queries Involving More Than One Relation"></a>2. Queries Involving More Than One Relation</h3><h4 id="2-1-Products-and-Joins-in-SQL"><a href="#2-1-Products-and-Joins-in-SQL" class="headerlink" title="2.1. Products and Joins in SQL"></a>2.1. Products and Joins in SQL</h4><p>Movies(title, year, length, genre, studioName, producerC#)<br>MovieExec(name, address, cert#, netWorth)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--get the name of the producer of Star Wars</span></span><br><span class="line"><span class="keyword">SELECT</span> name</span><br><span class="line"><span class="keyword">FROM</span> Movies, MovieExec</span><br><span class="line"><span class="keyword">WHERE</span> title <span class="operator">=</span> ’Star Wars’ <span class="keyword">AND</span> producerC# <span class="operator">=</span> cert#;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-Disambiguating-Attributes"><a href="#2-2-Disambiguating-Attributes" class="headerlink" title="2.2. Disambiguating Attributes"></a>2.2. Disambiguating Attributes</h4><p>MovieStar(name, address, gender, birthdate)<br>MovieExec(name, address, cert#, netWorth)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--find pairs consisting of a star and an executive with the same address.</span></span><br><span class="line"><span class="keyword">SELECT</span> MovieStar.name, MovieExec.name</span><br><span class="line"><span class="keyword">FROM</span> MovieStar, MovieExec</span><br><span class="line"><span class="keyword">WHERE</span> MovieStar.address <span class="operator">=</span> MovieExec.address;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--The relation name, followed by a dot, is permissible even in situations where there is no ambiguity.</span></span><br><span class="line"><span class="keyword">SELECT</span> MovieExec.name</span><br><span class="line"><span class="keyword">FROM</span> Movies, MovieExec</span><br><span class="line"><span class="keyword">WHERE</span> Movie.title <span class="operator">=</span> ’Star Wars’</span><br><span class="line"><span class="keyword">AND</span> Movie.producerC# <span class="operator">=</span> MovieExec.cert#;</span><br></pre></td></tr></table></figure>

<h4 id="2-3-Tuple-Variables"><a href="#2-3-Tuple-Variables" class="headerlink" title="2.3. Tuple Variables"></a>2.3. Tuple Variables</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--find two stars who share an address and use tuple variables as aliases for two uses of MovieStar</span></span><br><span class="line"><span class="keyword">SELECT</span> Star1.name, Star2.name</span><br><span class="line"><span class="keyword">FROM</span> MovieStar Star1, MovieStar Star2</span><br><span class="line"><span class="keyword">WHERE</span> Star1.address <span class="operator">=</span> Star2.address</span><br><span class="line"><span class="keyword">AND</span> Star1.name <span class="operator">&lt;</span> Star2.name;</span><br></pre></td></tr></table></figure>

<h4 id="2-4-Interpreting-Multirelation-Queries"><a href="#2-4-Interpreting-Multirelation-Queries" class="headerlink" title="2.4. Interpreting Multirelation Queries"></a>2.4. Interpreting Multirelation Queries</h4><h4 id="2-5-Union-Intersection-and-Difference-of-Queries"><a href="#2-5-Union-Intersection-and-Difference-of-Queries" class="headerlink" title="2.5. Union, Intersection, and Difference of Queries"></a>2.5. Union, Intersection, and Difference of Queries</h4><p>MovieStar(name, address, gender, birthdate)<br>MovieExec(name, address, cert#, netWorth)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--the names and addresses of all female movie stars who are also movie executives with a net worth over $10,000,000</span></span><br><span class="line">(<span class="keyword">SELECT</span> name, address</span><br><span class="line"><span class="keyword">FROM</span> MovieStar</span><br><span class="line"><span class="keyword">WHERE</span> gender <span class="operator">=</span> ’F’)</span><br><span class="line"><span class="keyword">INTERSECT</span></span><br><span class="line">(<span class="keyword">SELECT</span> name, address</span><br><span class="line"><span class="keyword">FROM</span> MovieExec</span><br><span class="line"><span class="keyword">WHERE</span> netWorth <span class="operator">&gt;</span> <span class="number">10000000</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--take the difference of two sets of persons, each selected from a relation.</span></span><br><span class="line">(<span class="keyword">SELECT</span> name, address <span class="keyword">FROM</span> MovieStar)</span><br><span class="line"><span class="keyword">EXCEPT</span></span><br><span class="line">(<span class="keyword">SELECT</span> name, address <span class="keyword">FROM</span> MovieExec);</span><br></pre></td></tr></table></figure>
<p>Movies(title, year, length, genre, studioName, producerC#)<br>StarsIn(movieTitle, movieYear, starName)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--find all the titles and years of movies that appeared in either the Movies or StarsIn relation</span></span><br><span class="line">(<span class="keyword">SELECT</span> title, <span class="keyword">year</span> <span class="keyword">FROM</span> Movie)</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line">(<span class="keyword">SELECT</span> movieTitle <span class="keyword">AS</span> title, movieYear <span class="keyword">AS</span> <span class="keyword">year</span> <span class="keyword">FROM</span> StarsIn);</span><br></pre></td></tr></table></figure>

<h3 id="3-Subqueries"><a href="#3-Subqueries" class="headerlink" title="3. Subqueries"></a>3. Subqueries</h3><h4 id="3-1-Subqueries-that-Produce-Scalar-Values"><a href="#3-1-Subqueries-that-Produce-Scalar-Values" class="headerlink" title="3.1. Subqueries that Produce Scalar Values"></a>3.1. Subqueries that Produce Scalar Values</h4><p>Movies(title, year, length, genre, studioName, producerC#)<br>MovieExec(name, address, cert#, netWorth)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name</span><br><span class="line"><span class="keyword">FROM</span> MovieExec</span><br><span class="line"><span class="keyword">WHERE</span> cert# <span class="operator">=</span></span><br><span class="line">    (<span class="keyword">SELECT</span> producerC#</span><br><span class="line">    <span class="keyword">FROM</span> Movies</span><br><span class="line">    <span class="keyword">WHERE</span> title <span class="operator">=</span> ’Star Wars’</span><br><span class="line">    );</span><br></pre></td></tr></table></figure>
<p>as if it were</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name</span><br><span class="line"><span class="keyword">FROM</span> MovieExec</span><br><span class="line"><span class="keyword">WHERE</span> cert# <span class="operator">=</span> <span class="number">12345</span>;</span><br></pre></td></tr></table></figure>

<h4 id="3-2-Conditions-Involving-Relations"><a href="#3-2-Conditions-Involving-Relations" class="headerlink" title="3.2. Conditions Involving Relations"></a>3.2. Conditions Involving Relations</h4><h4 id="3-3-Conditions-Involving-Tuples"><a href="#3-3-Conditions-Involving-Tuples" class="headerlink" title="3.3. Conditions Involving Tuples"></a>3.3. Conditions Involving Tuples</h4><p>Movies(title, year, length, genre, studioName, producerC#)<br>StarsIn(movieTitle, movieYear, starName)<br>MovieExec(name, address, cert#, netWorth)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--Finding the producers of Harrison Ford’s movies</span></span><br><span class="line"><span class="keyword">SELECT</span> name</span><br><span class="line"><span class="keyword">FROM</span> MovieExec</span><br><span class="line"><span class="keyword">WHERE</span> cert# <span class="keyword">IN</span></span><br><span class="line">    (<span class="keyword">SELECT</span> producerC#</span><br><span class="line">    <span class="keyword">FROM</span> Movies</span><br><span class="line">    <span class="keyword">WHERE</span> (title, <span class="keyword">year</span>) <span class="keyword">IN</span></span><br><span class="line">        (<span class="keyword">SELECT</span> movieTitle, movieYear</span><br><span class="line">        <span class="keyword">FROM</span> StarsIn</span><br><span class="line">        <span class="keyword">WHERE</span> starName <span class="operator">=</span> ’Harrison Ford’</span><br><span class="line">        )</span><br><span class="line">    );</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--Ford’s producers without nested subqueries</span></span><br><span class="line"><span class="keyword">SELECT</span> name</span><br><span class="line"><span class="keyword">FROM</span> MovieExec, Movies, StarsIn</span><br><span class="line"><span class="keyword">WHERE</span> cert# <span class="operator">=</span> producerC# <span class="keyword">AND</span></span><br><span class="line">    title <span class="operator">=</span> movieTitle <span class="keyword">AND</span></span><br><span class="line">    <span class="keyword">year</span> <span class="operator">=</span> movieYear <span class="keyword">AND</span></span><br><span class="line">    starName <span class="operator">=</span> ’Harrison Ford’;</span><br></pre></td></tr></table></figure>

<h4 id="3-4-Correlated-Subqueries"><a href="#3-4-Correlated-Subqueries" class="headerlink" title="3.4. Correlated Subqueries"></a>3.4. Correlated Subqueries</h4><p>Movies(title, year, length, genre, studioName, producerC#)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Finding movie titles that appear more than once</span></span><br><span class="line"><span class="keyword">SELECT</span> title</span><br><span class="line"><span class="keyword">FROM</span> Movies <span class="keyword">Old</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">year</span> <span class="operator">&lt;</span> <span class="keyword">ANY</span></span><br><span class="line">    (<span class="keyword">SELECT</span> <span class="keyword">year</span></span><br><span class="line">    <span class="keyword">FROM</span> Movies</span><br><span class="line">    <span class="keyword">WHERE</span> title <span class="operator">=</span> Old.title</span><br><span class="line">    );</span><br></pre></td></tr></table></figure>

<h4 id="3-5-Subqueries-in-FROM-Clauses"><a href="#3-5-Subqueries-in-FROM-Clauses" class="headerlink" title="3.5. Subqueries in FROM Clauses"></a>3.5. Subqueries in FROM Clauses</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--Finding the producers of Ford’s movies using a subquery in the FROM clause</span></span><br><span class="line"><span class="keyword">SELECT</span> name</span><br><span class="line"><span class="keyword">FROM</span> MovieExec, (<span class="keyword">SELECT</span> producerC#</span><br><span class="line">                <span class="keyword">FROM</span> Movies, StarsIn</span><br><span class="line">                <span class="keyword">WHERE</span> title <span class="operator">=</span> movieTitle <span class="keyword">AND</span></span><br><span class="line">                <span class="keyword">year</span> <span class="operator">=</span> movieYear <span class="keyword">AND</span></span><br><span class="line">                starName <span class="operator">=</span> ’Harrison Ford’</span><br><span class="line">                ) Prod</span><br><span class="line"><span class="keyword">WHERE</span> cert# <span class="operator">=</span> Prod.producerC#;</span><br></pre></td></tr></table></figure>

<h4 id="3-6-SQL-Join-Expressions"><a href="#3-6-SQL-Join-Expressions" class="headerlink" title="3.6. SQL Join Expressions"></a>3.6. SQL Join Expressions</h4><p>Movies(title, year, length, genre, studioName, producerC#)<br>StarsIn(movieTitle, movieYear, starName)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Movies <span class="keyword">JOIN</span> StarsIn <span class="keyword">ON</span></span><br><span class="line">    title <span class="operator">=</span> movieTitle <span class="keyword">AND</span> <span class="keyword">year</span> <span class="operator">=</span> movieYear;</span><br><span class="line"><span class="comment">--a tuple from Movies and one from StarsIn combine to form a tuple of the result only if the two tuples agree on both the title and year.</span></span><br><span class="line"><span class="comment">--two of the columns are redundant, because every tuple of the result will have the same value in both the title and movieTitle components and will have the same value in both year and movieYear.</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--remove redundant components</span></span><br><span class="line"><span class="keyword">SELECT</span> title, <span class="keyword">year</span>, length, genre, studioName,</span><br><span class="line">    producerC#, starName</span><br><span class="line"><span class="keyword">FROM</span> Movies <span class="keyword">JOIN</span> StarsIn <span class="keyword">ON</span></span><br><span class="line">    title <span class="operator">=</span> movieTitle <span class="keyword">AND</span> <span class="keyword">year</span> <span class="operator">=</span> movieYear;</span><br></pre></td></tr></table></figure>

<h4 id="3-7-Natural-Joins"><a href="#3-7-Natural-Joins" class="headerlink" title="3.7. Natural Joins"></a>3.7. Natural Joins</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MovieStar <span class="keyword">NATURAL</span> <span class="keyword">JOIN</span> MovieExec;</span><br></pre></td></tr></table></figure>

<h4 id="3-8-Outerjoins"><a href="#3-8-Outerjoins" class="headerlink" title="3.8. Outerjoins"></a>3.8. Outerjoins</h4><p>MovieStar(name, address, gender, birthdate)<br>MovieExec(name, address, cert#, netWorth)</p>
<table>
<thead>
<tr>
<th>name</th>
<th>address</th>
<th>gender</th>
<th>birthdate</th>
<th>cert#</th>
<th>networth</th>
</tr>
</thead>
<tbody><tr>
<td>Mary</td>
<td>Maple St.</td>
<td>‘F’</td>
<td>9&#x2F;9&#x2F;99</td>
<td>12345</td>
<td>$100..</td>
</tr>
<tr>
<td>Tom</td>
<td>Cherry Ln.</td>
<td>‘M’</td>
<td>8&#x2F;8&#x2F;88</td>
<td>NULL</td>
<td>NULL</td>
</tr>
<tr>
<td>George</td>
<td>Oak Rd.</td>
<td>NULL</td>
<td>NULL</td>
<td>23456</td>
<td>$200..</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- The result of this operation is above, a relation with the same six-attribute schema. The tuples of this relation are of three kinds.</span></span><br><span class="line">MovieStar <span class="keyword">NATURAL</span> <span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> MovieExec;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- yield the first two tuples but not the third</span></span><br><span class="line">MovieStar <span class="keyword">NATURAL</span> <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> MovieExec;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- yield the first and third tuples but not the second</span></span><br><span class="line">MovieStar <span class="keyword">NATURAL</span> <span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> MovieExec;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Next, suppose we want a theta-outerjoin instead of a natural outerjoin. Instead of using the keyword <em>NATURAL</em>, we may follow the join by <em>ON</em> and a condition that matching tuples must obey. If we also specify <em>FULL OUTER JOIN</em>, then after matching tuples from the two joined relations, we pad dangling tuples of either relation with NULL’s and include the padded tuples in the result</p>
</blockquote>
<p>Movies(title, year, length, genre, studioName, producerC#)<br>StarsIn(movieTitle, movieYear, starName)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--  shall get not only tuples for movies that have at least one star mentioned in StarsIn, but we shall get tuples for movies with no listed stars, padded with NULL’s in attributes movieTitle, movieYear, and starName. Likewise, for stars not appearing in any movie listed in relation Movies we get a tuple with NULL’s in the six attributes of Movies.</span></span><br><span class="line">Movies <span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> StarsIn <span class="keyword">ON</span></span><br><span class="line">    title <span class="operator">=</span> movieTitle <span class="keyword">AND</span> <span class="keyword">year</span> <span class="operator">=</span> movieYear;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- gives us the Movies tuples with at least one listed star and NULL-padded Movies tuples without a listed star, but will not include stars without a listed movie</span></span><br><span class="line">Movies <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> StarsIn <span class="keyword">ON</span></span><br><span class="line">    title <span class="operator">=</span> movieTitle <span class="keyword">AND</span> <span class="keyword">year</span> <span class="operator">=</span> movieYear;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- omit the tuples for movies without a listed star but will include tuples for stars not in any listed movies, padded with NULL’s.</span></span><br><span class="line">Movies <span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> StarsIn <span class="keyword">ON</span>  </span><br><span class="line">    title <span class="operator">=</span> movieTitle <span class="keyword">AND</span> <span class="keyword">year</span> <span class="operator">=</span> movieYear;</span><br></pre></td></tr></table></figure>

<h3 id="4-Full-Relation-Operations"><a href="#4-Full-Relation-Operations" class="headerlink" title="4. Full-Relation Operations"></a>4. Full-Relation Operations</h3><h4 id="4-1-Eliminating-Duplicates"><a href="#4-1-Eliminating-Duplicates" class="headerlink" title="4.1. Eliminating Duplicates"></a>4.1. Eliminating Duplicates</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> name</span><br></pre></td></tr></table></figure>

<h4 id="4-2-Duplicates-in-Unions-Intersections-and-Differences"><a href="#4-2-Duplicates-in-Unions-Intersections-and-Differences" class="headerlink" title="4.2. Duplicates in Unions, Intersections, and Differences"></a>4.2. Duplicates in Unions, Intersections, and Differences</h4><blockquote>
<p>Unlike the <em>SELECT</em> statement, which preserves duplicates as a default and only eliminates them when instructed to by the <em>DISTINCT</em> keyword, the union, intersection, and difference operations, normally eliminate duplicates. That is, bags are converted to sets, and the set version of the operation is applied. In order to prevent the elimination of duplicates, we must follow the operator <em>UNION</em>, <em>INTERSECT</em>, or <em>EXCEPT</em> by the keyword <strong>ALL</strong>. If we do, then we get the bag semantics of these operators.</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">SELECT</span> title, <span class="keyword">year</span> <span class="keyword">FROM</span> Movies)</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line">(<span class="keyword">SELECT</span> movieTitle <span class="keyword">AS</span> title, movieYear <span class="keyword">AS</span> <span class="keyword">year</span> <span class="keyword">FROM</span> StarsIn);</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- If R and S are relations, then the result of expression is the relation in which the number of times a tuple t appears is the minimum of the number of times it appears in R and the number of times it appears in S.</span></span><br><span class="line">R <span class="keyword">INTERSECT</span> <span class="keyword">ALL</span> S</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- The result of expression has tuple t as many times as the difference of the number of times it appears in R minus the number of times it appears in S, provided the difference is positive</span></span><br><span class="line">R <span class="keyword">EXCEPT</span> <span class="keyword">ALL</span> S</span><br></pre></td></tr></table></figure>

<h4 id="4-3-Grouping-and-Aggregation-in-SQL"><a href="#4-3-Grouping-and-Aggregation-in-SQL" class="headerlink" title="4.3. Grouping and Aggregation in SQL"></a>4.3. Grouping and Aggregation in SQL</h4><h4 id="4-4-Aggregation-Operators"><a href="#4-4-Aggregation-Operators" class="headerlink" title="4.4. Aggregation Operators"></a>4.4. Aggregation Operators</h4><p>MovieExec(name, address, cert#, netWorth)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(netWorth)</span><br><span class="line"><span class="keyword">FROM</span> MovieExec;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span> StarsIn;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(starName)</span><br><span class="line"><span class="keyword">FROM</span> StarsIn;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> starName)</span><br><span class="line"><span class="keyword">FROM</span> StarsIn;</span><br></pre></td></tr></table></figure>

<h4 id="4-5-Grouping"><a href="#4-5-Grouping" class="headerlink" title="4.5. Grouping"></a>4.5. Grouping</h4><p>Movies(title, year, length, genre, studioName, producerC#)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> studioName, <span class="built_in">SUM</span>(length)</span><br><span class="line"><span class="keyword">FROM</span> Movies</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> studioName;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>In a <em>SELECT</em> clause that has aggregations, only those attributes<br>that are mentioned in the <em>GROUP BY</em> clause may appear unaggregated in<br>the <em>SELECT</em> clause.</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> studioName</span><br><span class="line"><span class="keyword">FROM</span> Movies</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> studioName;</span><br></pre></td></tr></table></figure>
<p>the above query has the same effect as</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> studioName</span><br><span class="line"><span class="keyword">FROM</span> Movies;</span><br></pre></td></tr></table></figure>

<p>Movies(title, year, length, genre, studioName, producerC#)<br>MovieExec(name, address, cert#, netWorth)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- print a table listing each producer’s total length of film produced.</span></span><br><span class="line"><span class="keyword">SELECT</span> name, <span class="built_in">SUM</span>(length)</span><br><span class="line"><span class="keyword">FROM</span> MovieExec, Movies</span><br><span class="line"><span class="keyword">WHERE</span> producerC# <span class="operator">=</span> cert# <span class="comment">--taking their theta-join, equating the certificate numbers from the two relations.</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> name;</span><br></pre></td></tr></table></figure>

<h4 id="4-6-Grouping-Aggregation-and-Nulls"><a href="#4-6-Grouping-Aggregation-and-Nulls" class="headerlink" title="4.6. Grouping, Aggregation, and Nulls"></a>4.6. Grouping, Aggregation, and Nulls</h4><blockquote>
<p><code>COUNT(*)</code> is always a count of the number of tuples in a relation, but <code>COUNT(A)</code> is the number of tuples with <em>non-NULL</em> values for attribute <em>A</em>.</p>
</blockquote>
<table>
<thead>
<tr>
<th>A</th>
<th>B</th>
</tr>
</thead>
<tbody><tr>
<td>NULL</td>
<td>NULL</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- the result is the one tuple (NULL, 0)</span></span><br><span class="line"><span class="keyword">SELECT</span> A, <span class="built_in">COUNT</span>(B)</span><br><span class="line"><span class="keyword">FROM</span> R</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> A;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- the result is the one tuple (NULL, NULL).</span></span><br><span class="line"><span class="keyword">SELECT</span> A, <span class="built_in">SUM</span>(B)</span><br><span class="line"><span class="keyword">FROM</span> R</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> A;</span><br></pre></td></tr></table></figure>

<h4 id="4-7-HAVING-Clauses"><a href="#4-7-HAVING-Clauses" class="headerlink" title="4.7. HAVING Clauses"></a>4.7. HAVING Clauses</h4><blockquote>
<p>Sometimes we want to choose our groups based on some aggregate property of the group itself. Then we follow the <em>GROUP BY</em> clause with a <em>HAVING</em> clause. The latter clause consists of the keyword <em>HAVING</em> followed by a condition about the group</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- print the total film length for only those producers who made at least one film prior to 1930</span></span><br><span class="line"><span class="keyword">SELECT</span> name, <span class="built_in">SUM</span>(length)</span><br><span class="line"><span class="keyword">FROM</span> MovieExec, Movies</span><br><span class="line"><span class="keyword">WHERE</span> producerC# <span class="operator">=</span> cert#</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> name;</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">MIN</span>(<span class="keyword">year</span>) <span class="operator">&lt;</span> <span class="number">1930</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>There are several rules about HAVING clauses:  </p>
</blockquote>
<ul>
<li>An aggregation in a <em>HAVING</em> clause applies only to the tuples of the group being tested.  </li>
<li>Any attribute of relations in the <em>FROM</em> clause may be aggregated in the <em>HAVING</em> clause, but only those attributes that are in the <em>GROUP BY</em> list may appear unaggregated in the <em>HAVING</em> clause (the same rule as for the <em>SELECT</em> clause).</li>
</ul>
<blockquote>
<p>We have now met all six clauses that can appear in a SQL “select-fromwhere” query: <em>SELECT</em>, <em>FROM</em>, <em>WHERE</em>, <em>GROUP BY</em>, <em>HAVING</em>, and <em>ORDER BY</em>. Only the <em>SELECT</em> and <em>FROM</em> clauses are required. Whichever additional clauses appear must be in the order listed above.</p>
</blockquote>
<h3 id="5-Database-Modifications"><a href="#5-Database-Modifications" class="headerlink" title="5. Database Modifications"></a>5. Database Modifications</h3><h4 id="5-1-Insertion"><a href="#5-1-Insertion" class="headerlink" title="5.1. Insertion"></a>5.1. Insertion</h4><p><code>INSERT INTO R(A1, . . . , An) VALUES (v1, . . . , vn);</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> StarsIn(movieTitle, movieYear, starName)</span><br><span class="line"><span class="keyword">VALUES</span>(’The Maltese Falcon’, <span class="number">1942</span>, ’Sydney Greenstreet’);</span><br></pre></td></tr></table></figure>
<p>Or</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- must be sure that the order of the values is the same as the standard order of attributes for the relation.</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> StarsIn</span><br><span class="line"><span class="keyword">VALUES</span>(’The Maltese Falcon’, <span class="number">1942</span>, ’Sydney Greenstreet’);</span><br></pre></td></tr></table></figure>

<p>Studio(name, address, presC#)<br>Movies(title, year, length, genre, studioName, producerC#)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- insert with NULL for the attributes address and presC#, into relation Studio</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Studio(name)</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> studioName</span><br><span class="line">    <span class="keyword">FROM</span> Movies</span><br><span class="line">    <span class="keyword">WHERE</span> studioName <span class="keyword">NOT</span> <span class="keyword">IN</span></span><br><span class="line">        (<span class="keyword">SELECT</span> name</span><br><span class="line">        <span class="keyword">FROM</span> Studio);</span><br></pre></td></tr></table></figure>

<h4 id="5-2-Deletion"><a href="#5-2-Deletion" class="headerlink" title="5.2. Deletion"></a>5.2. Deletion</h4><p><code>DELETE FROM R WHERE &lt;condition&gt;;</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- must describe the tuple exactly by a WHERE clause</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> StarsIn</span><br><span class="line"><span class="keyword">WHERE</span> movieTitle <span class="operator">=</span> <span class="string">&#x27;The Maltese Falcon&#x27;</span> <span class="keyword">AND</span></span><br><span class="line">    movieYear <span class="operator">=</span> <span class="number">1942</span> <span class="keyword">AND</span></span><br><span class="line">    starName <span class="operator">=</span> <span class="string">&#x27;Sydney Greenstreet&#x27;</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> MovieExec</span><br><span class="line"><span class="keyword">WHERE</span> netWorth <span class="operator">&lt;</span> <span class="number">10000000</span>;</span><br></pre></td></tr></table></figure>

<h4 id="5-3-Updates"><a href="#5-3-Updates" class="headerlink" title="5.3. Updates"></a>5.3. Updates</h4><p><code>UPDATE R SET &lt;new-value assignments&gt; WHERE &lt;condition&gt;;</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- attach the title Pres. in front of the name of every movie executive who is the president of a studio.</span></span><br><span class="line"><span class="keyword">UPDATE</span> MovieExec</span><br><span class="line"><span class="keyword">SET</span> name <span class="operator">=</span> <span class="string">&#x27;Pres. &#x27;</span> <span class="operator">||</span> name <span class="comment">-- the operator || denotes concatenation of strings</span></span><br><span class="line"><span class="keyword">WHERE</span> cert# <span class="keyword">IN</span> (<span class="keyword">SELECT</span> presC# <span class="keyword">FROM</span> Studio);</span><br></pre></td></tr></table></figure>

<h3 id="6-Transactions-in-SQL"><a href="#6-Transactions-in-SQL" class="headerlink" title="6. Transactions in SQL"></a>6. Transactions in SQL</h3><h4 id="6-1-Serializability"><a href="#6-1-Serializability" class="headerlink" title="6.1. Serializability"></a>6.1. Serializability</h4><h4 id="6-2-Atomicity"><a href="#6-2-Atomicity" class="headerlink" title="6.2. Atomicity"></a>6.2. Atomicity</h4><h4 id="6-3-Transactions"><a href="#6-3-Transactions" class="headerlink" title="6.3. Transactions"></a>6.3. Transactions</h4><h4 id="6-4-Read-Only-Transactionss"><a href="#6-4-Read-Only-Transactionss" class="headerlink" title="6.4. Read-Only Transactionss"></a>6.4. Read-Only Transactionss</h4><h4 id="6-5-Dirty-Reads"><a href="#6-5-Dirty-Reads" class="headerlink" title="6.5. Dirty Reads"></a>6.5. Dirty Reads</h4><h4 id="6-6-Other-Isolation-Levels"><a href="#6-6-Other-Isolation-Levels" class="headerlink" title="6.6. Other Isolation Levels"></a>6.6. Other Isolation Levels</h4><h3 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h3><p>Database Systems-The Complete Book(2nd ed, 2014, Pearson)</p>
]]></content>
      <categories>
        <category>Study Notes</category>
        <category>Database Systems</category>
      </categories>
      <tags>
        <tag>Relational Algebra</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Reading Notes of Database Systems (4)</title>
    <url>/2019/09/07/Notes-of-Database-4/</url>
    <content><![CDATA[<p>Reading notes of <em>Database Systems-The Complete Book (2nd edition)</em></p>
<h3 id="Chapter-6-Constraints-and-Triggers"><a href="#Chapter-6-Constraints-and-Triggers" class="headerlink" title="Chapter 6 - Constraints and Triggers"></a>Chapter 6 - Constraints and Triggers</h3><h3 id="1-Keys-and-Foreign-Key"><a href="#1-Keys-and-Foreign-Key" class="headerlink" title="1. Keys and Foreign Key"></a>1. Keys and Foreign Key</h3><h4 id="1-1-Declaring-Foreign-Key-Constraints"><a href="#1-1-Declaring-Foreign-Key-Constraints" class="headerlink" title="1.1. Declaring Foreign-Key Constraints"></a>1.1. Declaring Foreign-Key Constraints</h4><p>Define an attribute or attributes to be a key for a relation with the keywords <code>PRIMARY KEY</code> or <code>UNIQUE</code>.  </p>
<span id="more"></span>
<p>“foreign-key constraints,” assert that a value appearing in one relation must also appear in the primary-key component(s) of another relation.  </p>
<p><code>REFERENCES &lt;table&gt;(&lt;attribute&gt;)</code><br><code>FOREIGN KEY (&lt;attributes&gt;) REFERENCES &lt;table&gt;(&lt;attributes&gt;)</code>  </p>
<p>Studio(name, address, presC#)<br>MovieExec(name, address, cert#, netWorth)<br>Studio’s primary key is name and has a foreign key presC# that references cert# of relation MovieExec.<br>cert# in MovieExec must be a key of that relation.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- declare presC# directly to reference cert# as follows</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Studio (</span><br><span class="line">    name <span class="type">CHAR</span>(<span class="number">30</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    address <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">    presC# <span class="type">INT</span> <span class="keyword">REFERENCES</span> MovieExec(cert#)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>Or</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Studio (</span><br><span class="line">    name <span class="type">CHAR</span>(<span class="number">30</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    address <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">    presC# <span class="type">INT</span>,</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (presC#) <span class="keyword">REFERENCES</span> MovieExec(cert#)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h4 id="1-2-Maintaining-Referential-Integrity"><a href="#1-2-Maintaining-Referential-Integrity" class="headerlink" title="1.2. Maintaining Referential Integrity"></a>1.2. Maintaining Referential Integrity</h4><ul>
<li>The Default Policy</li>
<li>The Cascade Policy</li>
<li>The Set-Null Policy</li>
</ul>
<p>Studio(name, address, presC#)<br>MovieExec(name, address, cert#, netWorth)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Studio (</span><br><span class="line">    name <span class="type">CHAR</span>(<span class="number">30</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    address <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">    presC# <span class="type">INT</span> <span class="keyword">REFERENCES</span> MovieExec(cert#)</span><br><span class="line">        <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">SET</span> <span class="keyword">NULL</span></span><br><span class="line">        <span class="keyword">ON</span> <span class="keyword">UPDATE</span> CASCADE</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h4 id="1-3-Deferred-Checking-of-Constraints"><a href="#1-3-Deferred-Checking-of-Constraints" class="headerlink" title="1.3. Deferred Checking of Constraints"></a>1.3. Deferred Checking of Constraints</h4><p><code>DEFERRABLE</code> and <code>NOT DEFERRABLE</code><br><code>INITIALLY DEFERRED</code> and <code>INITIALLY IMMEDIATE</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Studio (</span><br><span class="line">    name <span class="type">CHAR</span>(<span class="number">30</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    address <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">    presC# <span class="type">INT</span> <span class="keyword">UNIQUE</span></span><br><span class="line">        <span class="keyword">REFERENCES</span> MovieExec(cert#)</span><br><span class="line">        DEFERRABLE INITIALLY DEFERRED</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- If a constraint has a name, say MyConstraint, then we can change a deferrable constraint from immediate to deferred by the SQL statement, and we can reverse the process by replacing DEFERRED to IMMEDIATE.</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">CONSTRAINT</span> MyConstraint DEFERRED;</span><br></pre></td></tr></table></figure>

<h3 id="2-Constraints-on-Attributes-and-Tuples"><a href="#2-Constraints-on-Attributes-and-Tuples" class="headerlink" title="2. Constraints on Attributes and Tuples"></a>2. Constraints on Attributes and Tuples</h3><h4 id="2-1-Not-Null-Constraints"><a href="#2-1-Not-Null-Constraints" class="headerlink" title="2.1. Not-Null Constraints"></a>2.1. Not-Null Constraints</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Studio (</span><br><span class="line">    name <span class="type">CHAR</span>(<span class="number">30</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    address <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">    presC# <span class="type">INT</span> <span class="keyword">REFERENCES</span> MovieExec(cert#) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h4 id="2-2-Attribute-Based-CHECK-Constraints"><a href="#2-2-Attribute-Based-CHECK-Constraints" class="headerlink" title="2.2. Attribute-Based CHECK Constraints"></a>2.2. Attribute-Based CHECK Constraints</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- require that certificate numbers be at least six digits.</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Studio (</span><br><span class="line">    name <span class="type">CHAR</span>(<span class="number">30</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    address <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">    presC# <span class="type">INT</span> <span class="keyword">REFERENCES</span> MovieExec(cert#)</span><br><span class="line">                <span class="keyword">CHECK</span> (presC# <span class="operator">&gt;=</span> <span class="number">100000</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>MovieStar(name, address, gender, birthdate)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> MovieStar (</span><br><span class="line">    name <span class="type">CHAR</span>(<span class="number">30</span>),</span><br><span class="line">    address <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">    gender <span class="type">CHAR</span>(<span class="number">1</span>) <span class="keyword">CHECK</span> (gender <span class="keyword">IN</span> (<span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;M&#x27;</span>)),</span><br><span class="line">    birthdate <span class="type">DATE</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h4 id="2-3-Tuple-Based-CHECK-Constraints"><a href="#2-3-Tuple-Based-CHECK-Constraints" class="headerlink" title="2.3. Tuple-Based CHECK Constraints"></a>2.3. Tuple-Based CHECK Constraints</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> MovieStar (</span><br><span class="line">    name <span class="type">CHAR</span>(<span class="number">30</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    address <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">    gender <span class="type">CHAR</span>(<span class="number">1</span>),</span><br><span class="line">    birthdate <span class="type">DATE</span>,</span><br><span class="line">    <span class="keyword">CHECK</span> (gender <span class="operator">=</span> ’F’ <span class="keyword">OR</span> name <span class="keyword">NOT</span> <span class="keyword">LIKE</span> ’Ms.<span class="operator">%</span>’)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h4 id="2-4-Comparison-of-Tuple-and-Attribute-Based-Constraints"><a href="#2-4-Comparison-of-Tuple-and-Attribute-Based-Constraints" class="headerlink" title="2.4. Comparison of Tuple- and Attribute-Based Constraints"></a>2.4. Comparison of Tuple- and Attribute-Based Constraints</h4><blockquote>
<p>If a constraint on a tuple involves more than one attribute of that tuple, then it must be written as a tuple-based constraint. However, if the constraint involves only one attribute of the tuple, then it can be written as either a tuple- or attribute-based constraint.</p>
</blockquote>
<h3 id="3-Modification-of-Constraints"><a href="#3-Modification-of-Constraints" class="headerlink" title="3. Modification of Constraints"></a>3. Modification of Constraints</h3><h4 id="3-1-Giving-Names-to-Constraints"><a href="#3-1-Giving-Names-to-Constraints" class="headerlink" title="3.1. Giving Names to Constraints"></a>3.1. Giving Names to Constraints</h4><blockquote>
<p>In order to modify or delete an existing constraint, it is necessary that the constraint have a name. To do so, we precede the constraint by the keyword <strong>CONSTRAINT</strong> and a name for the constraint.</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- write a line to name the constraint that says attribute name is a primary key</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> MovieStar (</span><br><span class="line">    name <span class="type">CHAR</span>(<span class="number">30</span>) <span class="keyword">CONSTRAINT</span> NameIsKey <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    address <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">    gender <span class="type">CHAR</span>(<span class="number">1</span>),</span><br><span class="line">    birthdate <span class="type">DATE</span>,</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- name the attribute-based CHECK constraint</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> MovieStar (</span><br><span class="line">    name <span class="type">CHAR</span>(<span class="number">30</span>),</span><br><span class="line">    address <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">    gender <span class="type">CHAR</span>(<span class="number">1</span>) <span class="keyword">CONSTRAINT</span> NoAndro</span><br><span class="line">                   <span class="keyword">CHECK</span> (gender <span class="keyword">IN</span> (’F’, ’M’)),</span><br><span class="line">    birthdate <span class="type">DATE</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- rewriting of the tuple-based CHECK constraint to give that constraint a name</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> MovieStar (</span><br><span class="line">    name <span class="type">CHAR</span>(<span class="number">30</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    address <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">    gender <span class="type">CHAR</span>(<span class="number">1</span>),</span><br><span class="line">    birthdate <span class="type">DATE</span>,</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> RightTitle</span><br><span class="line">        <span class="keyword">CHECK</span> (gender <span class="operator">=</span> ’F’ <span class="keyword">OR</span> name <span class="keyword">NOT</span> <span class="keyword">LIKE</span> ’Ms.<span class="operator">%</span>’);</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h4 id="3-2-Altering-Constraints-on-Tables"><a href="#3-2-Altering-Constraints-on-Tables" class="headerlink" title="3.2. Altering Constraints on Tables"></a>3.2. Altering Constraints on Tables</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- drop the constraints</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> MovieStar <span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> NameIsKey;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> MovieStar <span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> NoAndro;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> MovieStar <span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> RightTitle;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- add these constraints</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> MovieStar <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> NameIsKey</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (name);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> MovieStar <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> NoAndro</span><br><span class="line">    <span class="keyword">CHECK</span> (gender <span class="keyword">IN</span> (’F’, ’M’));</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> MovieStar <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> RightTitle</span><br><span class="line">    <span class="keyword">CHECK</span> (gender <span class="operator">=</span> ’F’ <span class="keyword">OR</span> name <span class="keyword">NOT</span> <span class="keyword">LIKE</span> ’Ms.<span class="operator">%</span>’);</span><br></pre></td></tr></table></figure>

<h3 id="4-Assertions"><a href="#4-Assertions" class="headerlink" title="4. Assertions"></a>4. Assertions</h3><p>• An assertion is a boolean-valued SQL expression that must be true at all times.<br>• A trigger is a series of actions that are associated with certain events, such as insertions into a particular relation, and that are performed whenever these events arise.</p>
<h4 id="4-1-Creating-Assertions"><a href="#4-1-Creating-Assertions" class="headerlink" title="4.1. Creating Assertions"></a>4.1. Creating Assertions</h4><p><code>CREATE ASSERTION &lt;assertion-name&gt; CHECK (&lt;condition&gt;)</code></p>
<h4 id="4-2-Using-Assertions"><a href="#4-2-Using-Assertions" class="headerlink" title="4.2. Using Assertions"></a>4.2. Using Assertions</h4><blockquote>
<p>Any attributes referred to in the condition must be introduced in the assertion, typically by mentioning their relation in a select-from-where expression.</p>
</blockquote>
<p>MovieExec(name, address, cert#, netWorth)<br>Studio(name, address, presC#)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- require that no one can become the president of a studio unless their net worth is at least $10,000,000</span></span><br><span class="line"><span class="keyword">CREATE</span> ASSERTION RichPres <span class="keyword">CHECK</span></span><br><span class="line">    (<span class="keyword">NOT</span> <span class="keyword">EXISTS</span></span><br><span class="line">        (<span class="keyword">SELECT</span> Studio.name</span><br><span class="line">        <span class="keyword">FROM</span> Studio, MovieExec</span><br><span class="line">        <span class="keyword">WHERE</span> presC# <span class="operator">=</span> cert# <span class="keyword">AND</span> netWorth <span class="operator">&lt;</span> <span class="number">10000000</span></span><br><span class="line">        )</span><br><span class="line">    );</span><br></pre></td></tr></table></figure>

<p>Movies(title, year, length, genre, studioName, producerC#)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- the total length of all movies by a given studio shall not exceed 10,000 minutes.</span></span><br><span class="line"><span class="keyword">CREATE</span> ASSERTION SumLength <span class="keyword">CHECK</span> (<span class="number">10000</span> <span class="operator">&gt;=</span> <span class="keyword">ALL</span></span><br><span class="line">    (<span class="keyword">SELECT</span> <span class="built_in">SUM</span>(length) <span class="keyword">FROM</span> Movies <span class="keyword">GROUP</span> <span class="keyword">BY</span> studioName)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- drop an assertion</span></span><br><span class="line"><span class="keyword">DROP</span> ASSERTION <span class="operator">&lt;</span>assertion name<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-Triggers"><a href="#5-Triggers" class="headerlink" title="5. Triggers"></a>5. Triggers</h3><h4 id="5-1-Triggers-in-SQL"><a href="#5-1-Triggers-in-SQL" class="headerlink" title="5.1. Triggers in SQL"></a>5.1. Triggers in SQL</h4><p>MovieExec(name, address, cert#, netWorth)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- The effect of this trigger is to foil any attempt to lower the net worth of a movie executive</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> NetWorthTrigger</span><br><span class="line">AFTER <span class="keyword">UPDATE</span> <span class="keyword">OF</span> netWorth <span class="keyword">ON</span> MovieExec</span><br><span class="line"><span class="keyword">REFERENCING</span></span><br><span class="line">    <span class="keyword">OLD</span> <span class="type">ROW</span> <span class="keyword">AS</span> OldTuple,</span><br><span class="line">    <span class="keyword">NEW</span> <span class="type">ROW</span> <span class="keyword">AS</span> NewTuple</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span> <span class="comment">-- this trigger is executed once for each updated tuple</span></span><br><span class="line"><span class="keyword">WHEN</span> (OldTuple.netWorth <span class="operator">&gt;</span> NewTuple.netWorth)</span><br><span class="line">    <span class="keyword">UPDATE</span> MovieExec</span><br><span class="line">    <span class="keyword">SET</span> netWorth <span class="operator">=</span> OldTuple.netWorth</span><br><span class="line">    <span class="keyword">WHERE</span> cert# <span class="operator">=</span> NewTuple.cert#;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Besides <em>UPDATE</em>, other possible triggering events are <em>INSERT</em> and <em>DELETE</em>. The <em>OF netWorth</em> clause is optional for <em>UPDATE</em> events, and if present defines the event to be only an update of the attribute(s) listed after the keyword <em>OF</em>. An <em>OF</em> clause is not permitted for <em>INSERT</em> or <em>DELETE</em> events; these events make sense for entire tuples only.</p>
</blockquote>
<blockquote>
<p>If the triggering event is an insertion, then we may use a <em>NEW ROW AS</em> clause to give a name for the inserted tuple, and <em>OLD ROW AS</em> is disallowed. Conversely, on a deletion <em>OLD ROW AS</em> is used to name the deleted tuple and <em>NEW ROW AS</em> is disallowed</p>
</blockquote>
<blockquote>
<p>If we update an entire table with a SQL update statement, a statement-level update trigger would execute only once, while a row-level trigger would execute once for each tuple to which an update was applied.</p>
</blockquote>
<h4 id="5-2-The-Options-for-Trigger-Design"><a href="#5-2-The-Options-for-Trigger-Design" class="headerlink" title="5.2. The Options for Trigger Design"></a>5.2. The Options for Trigger Design</h4><p>MovieExec(name, address, cert#, netWorth)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- prevent the average net worth of movie executives from dropping below $500,000. show the trigger for the update event.</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> AvgNetWorthTrigger</span><br><span class="line">AFTER <span class="keyword">UPDATE</span> <span class="keyword">OF</span> netWorth <span class="keyword">ON</span> MovieExec</span><br><span class="line"><span class="keyword">REFERENCING</span></span><br><span class="line">    <span class="keyword">OLD</span> <span class="keyword">TABLE</span> <span class="keyword">AS</span> OldStuff,</span><br><span class="line">    <span class="keyword">NEW</span> <span class="keyword">TABLE</span> <span class="keyword">AS</span> NewStuff</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> STATEMENT <span class="comment">-- this trigger is executed once for a statement, regardless of how many tuples are modified</span></span><br><span class="line"><span class="keyword">WHEN</span> (<span class="number">500000</span> <span class="operator">&gt;</span> (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(netWorth) <span class="keyword">FROM</span> MovieExec)) <span class="comment">-- This condition is satisfied if the average net worth after the update is less than $500,000.</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DELETE</span> <span class="keyword">FROM</span> MovieExec</span><br><span class="line">    <span class="keyword">WHERE</span> (name, address, cert#, netWorth) <span class="keyword">IN</span> NewStuff; <span class="comment">-- remove all the new tuples</span></span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> MovieExec</span><br><span class="line">        (<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> OldStuff); <span class="comment">-- restore the old relation MovieExec</span></span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<p>Movies(title, year, length, genre, studioName, producerC#)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> FixYearTrigger</span><br><span class="line">BEFORE <span class="keyword">INSERT</span> <span class="keyword">ON</span> Movies</span><br><span class="line"><span class="keyword">REFERENCING</span> <span class="comment">-- define names for both the new row being inserted and a table consisting of only that row</span></span><br><span class="line">    <span class="keyword">NEW</span> <span class="type">ROW</span> <span class="keyword">AS</span> NewRow</span><br><span class="line">    <span class="keyword">NEW</span> <span class="keyword">TABLE</span> <span class="keyword">AS</span> NewStuff</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span> <span class="comment">-- the trigger executes once for each inserted tuple</span></span><br><span class="line"><span class="keyword">WHEN</span> NewRow.year <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">UPDATE</span> NewStuff <span class="keyword">SET</span> <span class="keyword">year</span> <span class="operator">=</span> <span class="number">1915</span>;</span><br></pre></td></tr></table></figure>

<h3 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h3><p>Database Systems-The Complete Book(2nd ed, 2014, Pearson)</p>
]]></content>
      <categories>
        <category>Study Notes</category>
        <category>Database Systems</category>
      </categories>
      <tags>
        <tag>Relational Algebra</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Reading Notes of Database Systems (5)</title>
    <url>/2019/10/06/Notes-of-Database-5/</url>
    <content><![CDATA[<p>Reading notes of <em>Database Systems-The Complete Book (2nd edition)</em></p>
<h3 id="Chapter-7-Views-and-Indexes"><a href="#Chapter-7-Views-and-Indexes" class="headerlink" title="Chapter 7 - Views and Indexes"></a>Chapter 7 - Views and Indexes</h3><h3 id="1-Virtual-Views"><a href="#1-Virtual-Views" class="headerlink" title="1. Virtual Views"></a>1. Virtual Views</h3><p>Virtual views are not stored in the database, but can be queried as if they existed.</p>
<span id="more"></span>
<h4 id="1-1-Declaring-Views"><a href="#1-1-Declaring-Views" class="headerlink" title="1.1. Declaring Views"></a>1.1. Declaring Views</h4><p>Movies(title, year, length, genre, studioName, producerC#)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- have a view that is a part of the relation, specifically, the titles and years of the movies made by Paramount Studios.</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> ParamountMovies <span class="keyword">AS</span></span><br><span class="line">    <span class="keyword">SELECT</span> title, <span class="keyword">year</span></span><br><span class="line">    <span class="keyword">FROM</span> Movies</span><br><span class="line">    <span class="keyword">WHERE</span> studioName <span class="operator">=</span> <span class="string">&#x27;Paramount&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>Movies(title, year, length, genre, studioName, producerC#)<br>MovieExec(name, address, cert#, netWorth)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Define a view MovieProd with movie titles and the names of their producers</span></span><br><span class="line"><span class="comment">-- The following view definition joins the two relations and requires that the certificate numbers match. It then extracts the movie title and producer name from pairs of tuples that agree on the certificates.</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> MovieProd <span class="keyword">AS</span></span><br><span class="line">    <span class="keyword">SELECT</span> title, name</span><br><span class="line">    <span class="keyword">FROM</span> Movies, MovieExec</span><br><span class="line">    <span class="keyword">WHERE</span> producerC# <span class="operator">=</span> cert#;</span><br></pre></td></tr></table></figure>

<h4 id="1-2-Querying-Views"><a href="#1-2-Querying-Views" class="headerlink" title="1.2. Querying Views"></a>1.2. Querying Views</h4><p>A view may be queried exactly as if it were a stored table. We mention its name in a <em>FROM</em> clause and rely on the DBMS to produce the needed tuples by operating on the relations used to define the virtual view.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> title</span><br><span class="line"><span class="keyword">FROM</span> ParamountMovies</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">year</span> <span class="operator">=</span> <span class="number">1979</span>;</span><br></pre></td></tr></table></figure>

<p>It is also possible to write queries involving both views and base tables</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> starName</span><br><span class="line"><span class="keyword">FROM</span> ParamountMovies, StarsIn</span><br><span class="line"><span class="keyword">WHERE</span> title <span class="operator">=</span> movieTitle <span class="keyword">AND</span> <span class="keyword">year</span> <span class="operator">=</span> movieYear;</span><br></pre></td></tr></table></figure>

<h4 id="1-3-Renaming-Attributes"><a href="#1-3-Renaming-Attributes" class="headerlink" title="1.3. Renaming Attributes"></a>1.3. Renaming Attributes</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Its columns are headed by attributes movieTitle and prodName instead of title and name.</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> MovieProd(movieTitle, prodName) <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> title, name</span><br><span class="line"><span class="keyword">FROM</span> Movies, MovieExec</span><br><span class="line"><span class="keyword">WHERE</span> producerC# <span class="operator">=</span> cert#;</span><br></pre></td></tr></table></figure>

<h3 id="2-Modifying-Views"><a href="#2-Modifying-Views" class="headerlink" title="2. Modifying Views"></a>2. Modifying Views</h3><p>An update on the updatable view can be applied directly to the underlying relation <em>R</em></p>
<h4 id="2-1-View-Removal"><a href="#2-1-View-Removal" class="headerlink" title="2.1. View Removal"></a>2.1. View Removal</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> ParamountMovies;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-Updatable-Views"><a href="#2-2-Updatable-Views" class="headerlink" title="2.2. Updatable Views"></a>2.2. Updatable Views</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> ParamountMovies</span><br><span class="line"><span class="keyword">VALUES</span>(’Star Trek’, <span class="number">1979</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> ParamountMovies</span><br><span class="line"><span class="keyword">WHERE</span> title <span class="keyword">LIKE</span> ’<span class="operator">%</span>Trek<span class="operator">%</span>’;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> ParamountMovies</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">year</span> <span class="operator">=</span> <span class="number">1979</span></span><br><span class="line"><span class="keyword">WHERE</span> title <span class="operator">=</span> ’Star Trek the Movie’;</span><br></pre></td></tr></table></figure>

<h4 id="2-3-Instead-Of-Triggers-on-Views"><a href="#2-3-Instead-Of-Triggers-on-Views" class="headerlink" title="2.3. Instead-Of Triggers on Views"></a>2.3. Instead-Of Triggers on Views</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> ParamountInsert</span><br><span class="line">    INSTEAD <span class="keyword">OF</span> <span class="keyword">INSERT</span> <span class="keyword">ON</span> ParamountMovies</span><br><span class="line">    <span class="keyword">REFERENCING</span> <span class="keyword">NEW</span> <span class="type">ROW</span> <span class="keyword">AS</span> NewRow</span><br><span class="line">        <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line">        <span class="keyword">INSERT</span> <span class="keyword">INTO</span> Movies(title, <span class="keyword">year</span>, studioName)</span><br><span class="line">        <span class="keyword">VALUES</span>(NewRow.title, NewRow.year, ’Paramount’);</span><br></pre></td></tr></table></figure>

<h3 id="3-Indexes-in-SQL"><a href="#3-Indexes-in-SQL" class="headerlink" title="3. Indexes in SQL"></a>3. Indexes in SQL</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- have an index on attribute year for the relation Movies</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX YearIndex <span class="keyword">ON</span> Movies(<span class="keyword">year</span>);</span><br></pre></td></tr></table></figure>

<p>DBMS allows us to build a single index on multiple attributes. This type of index takes values for several attributes and efficiently finds the tuples with the given values for these attributes.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX KeyIndex <span class="keyword">ON</span> Movies(title, <span class="keyword">year</span>);</span><br></pre></td></tr></table></figure>

<p>If we were more likely to specify a year than a title for a movie, then we would prefer to order the attributes as:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX KeyIndex <span class="keyword">ON</span> Movies(<span class="keyword">year</span>, title);</span><br></pre></td></tr></table></figure>

<p>If we wish to delete the index, we simply use its name in a statement like:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> INDEX YearIndex;</span><br></pre></td></tr></table></figure>

<h3 id="4-Selection-of-Indexes"><a href="#4-Selection-of-Indexes" class="headerlink" title="4. Selection of Indexes"></a>4. Selection of Indexes</h3><h3 id="5-Materialized-Views"><a href="#5-Materialized-Views" class="headerlink" title="5. Materialized Views"></a>5. Materialized Views</h3><h3 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h3><p>Database Systems-The Complete Book(2nd ed, 2014, Pearson)</p>
]]></content>
      <categories>
        <category>Study Notes</category>
        <category>Database Systems</category>
      </categories>
      <tags>
        <tag>Relational Algebra</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Study Notes of JUnit Testing (1)</title>
    <url>/2022/02/27/Notes-of-JUnit-Testing-1/</url>
    <content><![CDATA[<p>This post records some utilities of JUnit 4, which is legacy now.<br>For the latest JUnit version and its changes, check the offical document <a href="https://junit.org/junit5/docs/current/user-guide/#overview">Junit 5</a></p>
<span id="more"></span>
<h3 id="1-Assert"><a href="#1-Assert" class="headerlink" title="1. Assert"></a>1. Assert</h3><p><code>JUnit</code> provides overloaded assertion methods.<br>Parameter order is (optional message, expected value, actual value).<br>The <code>String</code> type failure message is optional to be added as the first parameter.<br>Value types that can be compared: Arrays, single values, Objects, <code>null</code> values.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SampleAssertionsTest.java file in the test folder, </span></span><br><span class="line"><span class="comment">// not the SampleAssertions.java file with main() in the source folder</span></span><br><span class="line"><span class="keyword">package</span> sampleassertions;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SampleAssertionsTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// all tests pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// compare arrays</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAssertArrayEquals</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] expected = <span class="string">&quot;test&quot;</span>.getBytes();</span><br><span class="line">        <span class="type">byte</span>[] actual = <span class="string">&quot;test&quot;</span>.getBytes();</span><br><span class="line">        assertArrayEquals(<span class="string">&quot;failure - byte arrays not same&quot;</span>, expected, actual);</span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line">    <span class="comment">// compare String</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAssertEquals</span><span class="params">()</span> &#123;</span><br><span class="line">        assertEquals(<span class="string">&quot;failure - Strings are not equal&quot;</span>, <span class="string">&quot;test&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// compare Integers</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAssertSame</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">aNumber</span> <span class="operator">=</span> Integer.valueOf(<span class="number">62</span>);</span><br><span class="line">        assertSame(<span class="string">&quot;failure - Integers are same&quot;</span>, aNumber, aNumber);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// compare Objects</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAssertNotSame</span><span class="params">()</span> &#123;</span><br><span class="line">        assertNotSame(<span class="string">&quot;failure - should not be same object&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>(), <span class="keyword">new</span> <span class="title class_">Object</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// assert null</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAssertNull</span><span class="params">()</span> &#123;</span><br><span class="line">        assertNull(<span class="string">&quot;failure - should be null&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// assert not null</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAssertNotNull</span><span class="params">()</span> &#123;</span><br><span class="line">        assertNotNull(<span class="string">&quot;failure - should not be null&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// assert False</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAssertFalse</span><span class="params">()</span> &#123;</span><br><span class="line">        assertFalse(<span class="string">&quot;failure - should be false&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// assert True</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAssertTrue</span><span class="params">()</span> &#123;</span><br><span class="line">        assertTrue(<span class="string">&quot;failure - should be true&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-Suite"><a href="#2-Suite" class="headerlink" title="2. Suite"></a>2. Suite</h3><p>Run tests in different test classes at the same time.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> testsuite;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.AfterClass;</span><br><span class="line"><span class="keyword">import</span> org.junit.BeforeClass;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Suite;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(Suite.class)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// SuiteTest1 class and SuiteTest2 class are similar to the above SampleAssertionsTest class</span></span><br><span class="line"><span class="meta">@Suite</span>.SuiteClasses(&#123;</span><br><span class="line">   SuiteTest1.class,</span><br><span class="line">   SuiteTest2.class</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSuiteTest</span> &#123;   </span><br><span class="line">    <span class="meta">@BeforeClass</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setUpClass</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterClass</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">tearDownClass</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMain</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<p>Explanation for these annotations from the JUnit 4 offical doc:</p>
<ul>
<li><a href="https://junit.org/junit4/javadoc/4.12/org/junit/BeforeClass.html">@BeforeClass</a></li>
<li><a href="https://junit.org/junit4/javadoc/4.12/org/junit/AfterClass.html">@AfterClass</a></li>
<li><a href="https://junit.org/junit4/javadoc/4.12/org/junit/Test.html">@Test</a></li>
</ul>
<h3 id="3-Exception-Handling"><a href="#3-Exception-Handling" class="headerlink" title="3. Exception Handling"></a>3. Exception Handling</h3><p>The <code>@Test</code> annotation supports two optional parameters.<br>The first, <code>expected</code>, declares that a test method should throw an exception. If it doesn’t throw an exception or if it throws a different exception than the one declared, the test fails.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test(expected=IndexOutOfBoundsException.class)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">outOfBounds</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Object&gt;().get(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The second optional parameter, <code>timeout</code>, causes a test to fail if it takes longer than a specified amount of clock time (measured in milliseconds). The following test fails:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test(timeout=100)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">infinity</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-Ignore-Tests"><a href="#4-Ignore-Tests" class="headerlink" title="4. Ignore Tests"></a>4. Ignore Tests</h3><p>Sometimes you want to temporarily disable a test or a group of tests.<br>Methods annotated with <code>@Test</code> that are also annotated with <code>@Ignore</code> will not be executed as tests:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Ignore</span> </span><br><span class="line"><span class="meta">@Test</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">something</span><span class="params">()</span> &#123; ... &#125;</span><br></pre></td></tr></table></figure>

<p><code>@Ignore</code> takes an optional default parameter if you want to record why a test is being ignored:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Ignore(&quot;not ready yet&quot;)</span> </span><br><span class="line"><span class="meta">@Test</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">something</span><span class="params">()</span> &#123; ... &#125;</span><br></pre></td></tr></table></figure>

<p>Also, you can annotate a <em>class</em> containing test methods with <code>@Ignore</code> and none of the containing tests will be executed:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Ignore</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IgnoreMe</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123; ... &#125;</span><br><span class="line">    <span class="meta">@Test</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-Parameterized-Tests"><a href="#5-Parameterized-Tests" class="headerlink" title="5. Parameterized Tests"></a>5. Parameterized Tests</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.runners.Parameterized;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Parameterized.Parameters;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(value = Parameterized.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FibonacciTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Parameters(name= &quot;&#123;index&#125;: fib[&#123;0&#125;]=&#123;1&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Iterable&lt;Object[]&gt; data() &#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(<span class="keyword">new</span> <span class="title class_">Object</span>[][] &#123; &#123; <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">1</span>, <span class="number">1</span> &#125;, &#123; <span class="number">2</span>, <span class="number">1</span> &#125;,</span><br><span class="line">                &#123; <span class="number">3</span>, <span class="number">2</span> &#125;, &#123; <span class="number">4</span>, <span class="number">3</span> &#125;, &#123; <span class="number">5</span>, <span class="number">5</span> &#125;, &#123; <span class="number">6</span>, <span class="number">8</span> &#125; &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> fInput;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> fExpected;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FibonacciTest</span><span class="params">(<span class="type">int</span> input, <span class="type">int</span> expected)</span> &#123;</span><br><span class="line">        fInput= input;</span><br><span class="line">        fExpected= expected;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        assertEquals(fExpected, Fibonacci.compute(fInput));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>In the above example, each instance of <code>FibonacciTest</code> will be constructed using the two-argument constructor and the data values in the <code>@Parameters</code> method.</p>
<p>In order to easily identify the individual tests, we can provide a name for the <code>@Parameters</code> annotation.<br>This name is allowed to contain placeholders, which are replaced at runtime. The placeholders are:</p>
<ul>
<li><code>&#123;index&#125;</code>: the current parameter index</li>
<li><code>&#123;0&#125;</code>: the first parameter value</li>
<li><code>&#123;1&#125;</code>: the second parameter value</li>
</ul>
<p>In the example given above, the <code>Parameterized</code> runner creates names like <code>test[3: fib(3)=2]</code>. <code>test</code> is the method name of the <code>@Test</code>. </p>
<h3 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h3><p><a href="https://www.linkedin.com/learning/java-testing-with-junit-2016">Java: Testing with JUnit (2016)</a><br><a href="https://junit.org/junit4/javadoc/4.12/overview-summary.html">JUnit 4.12 API</a></p>
]]></content>
      <categories>
        <category>Study Notes</category>
        <category>JUnit</category>
      </categories>
      <tags>
        <tag>Testing</tag>
        <tag>JUnit</tag>
      </tags>
  </entry>
  <entry>
    <title>Study Notes of React (1) - JSX</title>
    <url>/2023/01/30/Notes-of-React-1/</url>
    <content><![CDATA[<p>JSX is a syntax extension for JavaScript. It was written to be used with React. JSX code looks a lot like HTML.</p>
<p>If a JavaScript file contains JSX code, then that file will have to be compiled. That means that before the file reaches a web browser, a JSX compiler will translate any JSX into regular JavaScript.</p>
<span id="more"></span>
<h3 id="1-JSX-Elements"><a href="#1-JSX-Elements" class="headerlink" title="1. JSX Elements"></a>1. JSX Elements</h3><p>A basic unit of JSX is called a JSX element:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;<span class="title class_">Hello</span> world&lt;/h1&gt;</span><br></pre></td></tr></table></figure>
<p>This JSX element looks exactly like HTML. The only noticeable difference is that it is in a JavaScript file, instead of in an HTML file.</p>
<h3 id="2-JSX-Elements-And-Their-Surroundings"><a href="#2-JSX-Elements-And-Their-Surroundings" class="headerlink" title="2. JSX Elements And Their Surroundings"></a>2. JSX Elements And Their Surroundings</h3><p>JSX elements are treated as JavaScript expressions. They can go anywhere that JavaScript expressions can go.</p>
<p>A JSX element can be saved in a variable, passed to a function, stored in an object or array…</p>
<p>A JSX element being saved in a variable:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> navBar = <span class="language-xml"><span class="tag">&lt;<span class="name">nav</span>&gt;</span>I am a nav bar<span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure>

<p>Several JSX elements being stored in an object:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myTeam = &#123;</span><br><span class="line">  <span class="attr">center</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Benzo Walli<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>,</span><br><span class="line">  <span class="attr">powerForward</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Rasha Loa<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>,</span><br><span class="line">  <span class="attr">smallForward</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Tayshaun Dasmoto<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>,</span><br><span class="line">  <span class="attr">shootingGuard</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Colmar Cumberbatch<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>,</span><br><span class="line">  <span class="attr">pointGuard</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Femi Billon<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="3-Attributes-In-JSX"><a href="#3-Attributes-In-JSX" class="headerlink" title="3. Attributes In JSX"></a>3. Attributes In JSX</h3><p>JSX elements can have attributes, just like HTML elements can.</p>
<p>A JSX attribute is written using HTML-like syntax: a name, followed by an equals sign, followed by a value. The value should be wrapped in quotes:</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">my-attribute-name</span><span class="operator">=</span><span class="string">&quot;my-attribute-value&quot;</span></span><br></pre></td></tr></table></figure>

<p>Examples:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;http://www.example.com&quot;</span>&gt;<span class="title class_">Welcome</span> to the <span class="title class_">Web</span>&lt;/a&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> title = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;title&quot;</span>&gt;</span>Introduction to React.js: Part I<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> panda = <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;images/panda.jpg&#x27;</span> <span class="attr">alt</span>=<span class="string">&#x27;panda&#x27;</span> <span class="attr">width</span>=<span class="string">&#x27;500px&#x27;</span> <span class="attr">height</span>=<span class="string">&#x27;500px&#x27;</span> /&gt;</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="4-Nested-JSX"><a href="#4-Nested-JSX" class="headerlink" title="4. Nested JSX"></a>4. Nested JSX</h3><p>JSX elements can be nested inside of other JSX elements, just like in HTML.</p>
<p>A JSX <code>&lt;h1&gt;</code> element, nested inside of a JSX <code>&lt;a&gt;</code> element:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;https://www.example.com&quot;</span>&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Click me!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p>Use HTML-style line breaks and indentation:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;https://www.example.com&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    Click me!</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p>JSX expression taking up more than one line must be wrapped in parentheses:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.example.com&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      Click me!</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>Nested JSX expressions can be saved as variables, passed to functions, etc., just like non-nested JSX expressions can:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> theExample = (</span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.example.com&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">     <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">       Click me!</span></span><br><span class="line"><span class="language-xml">     <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="5-JSX-Outer-Elements"><a href="#5-JSX-Outer-Elements" class="headerlink" title="5. JSX Outer Elements"></a>5. JSX Outer Elements</h3><p>A JSX expression must have exactly one outermost element.</p>
<p>This code will work:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> paragraphs = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;i-am-the-outermost-element&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>I am a paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>I, too, am a paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>This code will not work:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> paragraphs = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>I am a paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>I, too, am a paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>The first opening tag and the final closing tag of a JSX expression must belong to the same JSX element.</p>
<p>If a JSX expression has multiple outer elements, the solution is usually simple: wrap the JSX expression in a <code>&lt;div&gt;&lt;/div&gt;</code>.</p>
<h3 id="6-Rendering-JSX"><a href="#6-Rendering-JSX" class="headerlink" title="6. Rendering JSX"></a>6. Rendering JSX</h3><p>To <em>render</em> a JSX expression means to make it appear onscreen.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;app&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p>JavaScript is case-sensitive, so <code>ReactDOM</code> needs to be capitalized correctly.</p>
<p><code>ReactDOM</code> is the name of a JavaScript library. This library contains several React-specific methods, all of which deal with the <code>DOM</code>.</p>
<p>One of <code>ReactDOM</code> methods, <code>ReactDOM.render()</code>,  is the most common way to render JSX. It takes a JSX expression, creates a corresponding tree of <code>DOM</code> nodes, and adds that tree to the <code>DOM</code>. </p>
<p><code>ReactDOM.render()</code> first argument should be a JSX expression, and it will be rendered to the screen.</p>
<p>The first argument is appended to whatever element is selected by the second argument, which acts as a container for <code>ReactDOM.render()</code> first argument.</p>
<p><code>ReactDOM.render()</code> first argument should evaluate to a JSX expression, it doesn’t have to literally be a JSX expression.</p>
<p>The first argument could also be a variable, so long as that variable evaluates to a JSX expression:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> toDoList = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Learn React<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Become a Developer<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  toDoList,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;app&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>ReactDOM</code> is not included in the generic React library. When we include the generic React library as a <code>&lt;script&gt;</code> tag in our HTML we will also have to include a <code>&lt;script&gt; </code>tag for the <code>ReactDOM</code> library if we want to use <code>ReactDOM</code>.</p>
</blockquote>
<blockquote>
<p>We can have multiple calls to <code>ReactDOM.render()</code> in a single JavaScript file without issue - having multiple calls to <code>ReactDOM.render()</code> may be especially useful when using React in an exisiting application&#x2F;site. However, when we build an application using only React, we’ll usually use a single call to <code>ReactDOM.render()</code>, not multiple.</p>
</blockquote>
<h3 id="7-The-Virtual-DOM"><a href="#7-The-Virtual-DOM" class="headerlink" title="7. The Virtual DOM"></a>7. The Virtual DOM</h3><p>One special thing about <code>ReactDOM.render()</code> is that it only updates DOM elements that have changed.</p>
<p>That means that if we render the exact same thing twice in a row, the second render will do nothing:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> hello = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This will add &quot;Hello world&quot; to the screen:</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(hello, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;app&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// This won&#x27;t do anything at all:</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(hello, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;app&#x27;</span>));</span><br></pre></td></tr></table></figure>
<p>Only updating the necessary DOM elements is a large part of what makes React so successful.</p>
<h3 id="Nice-Articles"><a href="#Nice-Articles" class="headerlink" title="Nice Articles"></a>Nice Articles</h3><p><a href="https://www.codecademy.com/article/react-virtual-dom">React: The Virtual DOM</a><br><a href="https://reactkungfu.com/2015/10/the-difference-between-virtual-dom-and-dom/">The difference between Virtual DOM and DOM</a></p>
<h3 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h3><p><a href="https://www.codecademy.com/learn/react-101">Learn React</a></p>
]]></content>
      <categories>
        <category>Study Notes</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>Study Notes of React (2) - Advanced JSX</title>
    <url>/2023/01/31/Notes-of-React-2/</url>
    <content><![CDATA[<h3 id="1-class-vs-className"><a href="#1-class-vs-className" class="headerlink" title="1. class vs className"></a>1. class vs className</h3><p>In HTML, it’s common to use <code>class</code> as an attribute name:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;big&quot;</span>&gt;</span>Hey<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>In JSX, we can’t use the word <code>class</code>. We have to use <code>className</code> instead:</p>
<span id="more"></span>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;h1 className=<span class="string">&quot;big&quot;</span>&gt;<span class="title class_">Hey</span>&lt;/h1&gt;</span><br></pre></td></tr></table></figure>
<p>This is because JSX gets translated into JavaScript, and <code>class</code> is a reserved word in JavaScript.</p>
<p>When JSX is rendered, JSX <code>className</code> attributes are automatically rendered as <code>class</code> attributes.</p>
<h3 id="2-Self-Closing-Tags"><a href="#2-Self-Closing-Tags" class="headerlink" title="2. Self-Closing Tags"></a>2. Self-Closing Tags</h3><p>Most HTML elements use two tags: <em>an opening tag</em> (<code>&lt;div&gt;</code>), and <em>a closing tag</em> (<code>&lt;/div&gt;</code>). However, some HTML elements such as <code>&lt;img&gt;</code> and <code>&lt;input&gt;</code> use only one tag. The tag that belongs to <em>a single-tag element</em> isn’t an opening tag nor a closing tag; it’s a <em>self-closing tag</em>.</p>
<p>When we write a self-closing tag in HTML, it is optional to include a <em>forward-slash</em> immediately before the final angle-bracket:</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">Fine <span class="keyword">in</span> HTML <span class="keyword">with</span> <span class="keyword">a</span> slash:</span><br><span class="line"> </span><br><span class="line">  &lt;br /&gt;</span><br><span class="line"> </span><br><span class="line">Also fine, <span class="keyword">without</span> <span class="keyword">the</span> slash:</span><br><span class="line"> </span><br><span class="line">  &lt;br&gt;</span><br></pre></td></tr></table></figure>

<p>but in JSX, we have to include the slash. If we write a self-closing tag in JSX and forget the slash, we will raise an error:</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Fine</span> in JSX:</span><br><span class="line"> </span><br><span class="line">  <span class="section">&lt;br /&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="attribute">NOT</span> FINE AT <span class="literal">ALL</span> in JSX:</span><br><span class="line"> </span><br><span class="line">  <span class="section">&lt;br&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-Curly-Braces-in-JSX"><a href="#3-Curly-Braces-in-JSX" class="headerlink" title="3. Curly Braces in JSX"></a>3. Curly Braces in JSX</h3><p>Any code in between the tags of a JSX element will be read as JSX, not as regular JavaScript. </p>
<p>Between JSX tags, code wrapped in curly braces will be treated as regular JavaScript.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;2 + 3&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;app&#x27;</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">// 5</span></span><br></pre></td></tr></table></figure>

<p>The <em>curly braces</em> themselves won’t be treated as JSX nor as JavaScript. They are markers that signal the beginning and end of a JavaScript injection into JSX, similar to the quotation marks that signal the boundaries of a string.</p>
<p>We can access variables while inside of a JSX expression, even if those variables were declared on the outside:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Declare a variable:</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;Gerdo&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Access your variable </span></span><br><span class="line"><span class="comment">// from inside of a JSX expression:</span></span><br><span class="line"><span class="keyword">const</span> greeting = <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, &#123;name&#125;!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure>

<p>When writing JSX, it’s common to use variables to set attributes:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Use a variable to set the `height` and `width` attributes:</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> sideLength = <span class="string">&quot;200px&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> panda = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">src</span>=<span class="string">&quot;images/panda.jpg&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">alt</span>=<span class="string">&quot;panda&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">height</span>=<span class="string">&#123;sideLength&#125;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">width</span>=<span class="string">&#123;sideLength&#125;</span> /&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>Notice that each attribute in <code>&lt;img /&gt;</code> gets their own line. This can make the code more readable if there are lot of attributes on one element.</p>
<p>Object properties are also often used to set attributes:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> pics = &#123;</span><br><span class="line">  <span class="attr">panda</span>: <span class="string">&quot;http://bit.ly/1Tqltv5&quot;</span>,</span><br><span class="line">  <span class="attr">owl</span>: <span class="string">&quot;http://bit.ly/1XGtkM3&quot;</span>,</span><br><span class="line">  <span class="attr">owlCat</span>: <span class="string">&quot;http://bit.ly/1Upbczi&quot;</span></span><br><span class="line">&#125;; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> panda = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">src</span>=<span class="string">&#123;pics.panda&#125;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">alt</span>=<span class="string">&quot;Lazy Panda&quot;</span> /&gt;</span></span></span><br><span class="line">);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> owl = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">src</span>=<span class="string">&#123;pics.owl&#125;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">alt</span>=<span class="string">&quot;Unimpressed Owl&quot;</span> /&gt;</span></span></span><br><span class="line">);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> owlCat = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">src</span>=<span class="string">&#123;pics.owlCat&#125;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">alt</span>=<span class="string">&quot;Ghastly Abomination&quot;</span> /&gt;</span></span></span><br><span class="line">); </span><br></pre></td></tr></table></figure>

<h3 id="4-Event-Listeners-in-JSX"><a href="#4-Event-Listeners-in-JSX" class="headerlink" title="4. Event Listeners in JSX"></a>4. Event Listeners in JSX</h3><p>Create an event listener by giving a JSX element a special attribute:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;img onClick=&#123;myFunc&#125; /&gt;</span><br></pre></td></tr></table></figure>

<p>An event listener attribute’s name should be something like <code>onClick</code> or <code>onMouseOver</code>: the word <code>on</code>, plus the type of event that we’re listening for. See a list of valid event names <a href="http://facebook.github.io/react/docs/events.html#supported-events">here</a>.</p>
<p>An event listener attribute’s <em>value</em> should be a function. The above example would only work if <code>myFunc</code> were a valid function that had been defined elsewhere:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myFunc</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;Make myFunc the pFunc... omg that was horrible i am so sorry&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&lt;img onClick=&#123;myFunc&#125; /&gt;</span><br></pre></td></tr></table></figure>
<p>Note that in HTML, event listener names are written in all lowercase, such as <code>onclick</code> or <code>onmouseover</code>. In JSX, event listener names are written in camelCase, such as <code>onClick</code> or <code>onMouseOver</code>.</p>
<h3 id="5-JSX-Conditionals"><a href="#5-JSX-Conditionals" class="headerlink" title="5. JSX Conditionals"></a>5. JSX Conditionals</h3><p>We can not inject an <code>if</code> statement into a JSX expression.</p>
<p>This code will break:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;</span></span><br><span class="line"><span class="language-xml">      if (purchase.complete) &#123;</span></span><br><span class="line"><span class="language-xml">        &#x27;Thank you for placing an order!&#x27;</span></span><br><span class="line"><span class="language-xml">      &#125;</span></span><br><span class="line"><span class="language-xml">    &#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>Use the <em>ternary operator</em> in a JSX expression:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> headline = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123; age &gt;= drinkingAge ? &#x27;Buy Drink&#x27; : &#x27;Do Teen Stuff&#x27; &#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>Use the <code>&amp;&amp;</code> operator:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> tasty = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Applesauce<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123; !baby &amp;&amp; <span class="tag">&lt;<span class="name">li</span>&gt;</span>Pizza<span class="tag">&lt;/<span class="name">li</span>&gt;</span> &#125;</span></span><br><span class="line"><span class="language-xml">    &#123; age &gt; 15 &amp;&amp; <span class="tag">&lt;<span class="name">li</span>&gt;</span>Brussels Sprouts<span class="tag">&lt;/<span class="name">li</span>&gt;</span> &#125;</span></span><br><span class="line"><span class="language-xml">    &#123; age &gt; 20 &amp;&amp; <span class="tag">&lt;<span class="name">li</span>&gt;</span>Oysters<span class="tag">&lt;/<span class="name">li</span>&gt;</span> &#125;</span></span><br><span class="line"><span class="language-xml">    &#123; age &gt; 25 &amp;&amp; <span class="tag">&lt;<span class="name">li</span>&gt;</span>Grappa<span class="tag">&lt;/<span class="name">li</span>&gt;</span> &#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>If the expression on the left of the <code>&amp;&amp;</code> evaluates as <code>true</code>, then the JSX on the right of the <code>&amp;&amp;</code> will be rendered. If the first expression is <code>false</code>, however, then the JSX to the right of the <code>&amp;&amp;</code> will be ignored and not rendered.</p>
<h3 id="6-map-in-JSX"><a href="#6-map-in-JSX" class="headerlink" title="6. .map in JSX"></a>6. .map in JSX</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> strings = [<span class="string">&#x27;Home&#x27;</span>, <span class="string">&#x27;Shop&#x27;</span>, <span class="string">&#x27;About Me&#x27;</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> listItems = strings.<span class="title function_">map</span>(<span class="function"><span class="params">string</span> =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;string&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>);</span><br><span class="line"> </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;listItems&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// This is fine in JSX, not in an explicit array:</span></span><br><span class="line"> </span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// This is also fine!</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> liArray = [</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>, </span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>, </span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">];</span><br><span class="line"> </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;liArray&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="7-Keys"><a href="#7-Keys" class="headerlink" title="7. Keys"></a>7. Keys</h3><p>When we make a list in JSX, sometimes our list will need to include something called keys:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&quot;li-01&quot;</span>&gt;</span>Example1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&quot;li-02&quot;</span>&gt;</span>Example2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&quot;li-03&quot;</span>&gt;</span>Example3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>

<p>A <code>key</code> is a JSX attribute. The attribute’s name is <code>key</code>. The attribute’s value should be something unique, similar to an <em>id</em> attribute.</p>
<p>keys don’t do anything that you can see! React uses them internally to keep track of lists. If you don’t use keys when you’re supposed to, React might accidentally scramble your list-items into the wrong order.</p>
<p>Not all lists need to have keys. A list needs keys if either of the following are true:</p>
<ol>
<li><p>The list-items have memory from one render to the next. For instance, when a to-do list renders, each item must “remember” whether it was checked off. The items shouldn’t get amnesia when they render.</p>
</li>
<li><p>A list’s order might be shuffled. For instance, a list of search results might be shuffled from one render to the next.</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> people = [<span class="string">&#x27;Rowe&#x27;</span>, <span class="string">&#x27;Prevost&#x27;</span>, <span class="string">&#x27;Gare&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> peopleLis = people.<span class="title function_">map</span>(<span class="function">(<span class="params">person, i</span>) =&gt;</span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;</span>&#x27;<span class="attr">person_</span>&#x27; + <span class="attr">i</span>&#125;&gt;</span>&#123;person&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;peopleLis&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;app&#x27;</span>));</span><br></pre></td></tr></table></figure>

<h3 id="8-React-createElement"><a href="#8-React-createElement" class="headerlink" title="8. React.createElement"></a>8. React.createElement</h3><p>It is possible to write React code without JSX.</p>
<p>The following JSX expression:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> h1 = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure>
<p>can be rewritten without JSX, like this:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> h1 = <span class="title class_">React</span>.<span class="title function_">createElement</span>(</span><br><span class="line">  <span class="string">&quot;h1&quot;</span>,</span><br><span class="line">  <span class="literal">null</span>,</span><br><span class="line">  <span class="string">&quot;Hello world&quot;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>When a JSX element is compiled, the compiler transforms the JSX element into the method <code>React.createElement()</code>. Every JSX element is secretly a call to <a href="https://beta.reactjs.org/reference/react/createElement">React.createElement()</a>.</p>
<p>We would use <code>React.createElement()</code> instead of JSX when we do not want to set up compilation for our project, which the use of JSX requires.</p>
<h3 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h3><p><a href="https://www.codecademy.com/learn/react-101">Learn React</a></p>
]]></content>
      <categories>
        <category>Study Notes</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>Study Notes of React (3) - Class Component</title>
    <url>/2023/02/14/Notes-of-React-3/</url>
    <content><![CDATA[<p>A component is a small, reusable chunk of code that is responsible for one job. That job is often to render some HTML.</p>
<p>We can use a JavaScript class to define a new React component. We can also define components with JavaScript functions.</p>
<span id="more"></span>
<p>All class components will have some methods and properties in common. Rather than rewriting those same properties over and over again every time, we extend the <code>Component</code> class from the React library.</p>
<p><code>React.Component</code> is a JavaScript class. To create our own component class, we must subclass <code>React.Component</code>.</p>
<h3 id="1-Class-Component"><a href="#1-Class-Component" class="headerlink" title="1. Class Component"></a>1. Class Component</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyComponentClass</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">MyComponentClass</span> /&gt;</span></span>, </span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;app&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>On line 1, <code>import React from &#39;react&#39;</code> creates a JavaScript object. This object contains properties that are needed to make <code>React</code> work, such as <code>React.createElement()</code> and <code>React.Component</code>.</p>
</li>
<li><p>On line 2, <code>import ReactDOM from &#39;react-dom&#39;</code> creates another JavaScript object. This object contains methods that help <code>React</code> interact with the <code>DOM</code>, such as <code>ReactDOM.render()</code>.</p>
</li>
<li><p>On line 4, by subclassing <code>React.Component</code>, we create a new component class. <strong>This is not a component</strong>. A component class is more like a factory that produces components. When we start making components, each one will come from a component class.</p>
</li>
<li><p>Whenever we create a component class, we need to give that component class a name. That name should be written in <strong>UpperCamelCase</strong>. In this case, the name is <code>MyComponentClass</code>.</p>
</li>
</ul>
<h3 id="2-react-vs-react-dom"><a href="#2-react-vs-react-dom" class="headerlink" title="2. react vs react-dom"></a>2. <code>react</code> vs <code>react-dom</code></h3><p>The methods imported from <code>&#39;react-dom&#39;</code> are meant for interacting with the <code>DOM</code>. For example, <code>ReactDOM.render()</code>.</p>
<p>The methods imported from <code>&#39;react&#39;</code> don’t deal with the <code>DOM</code> at all. They don’t engage directly with anything that isn’t part of <code>React</code>.</p>
<p>The <code>DOM</code> is used in <code>React</code> applications, but it isn’t part of <code>React</code>. After all, the <code>DOM</code> is also used in countless non-React applications. Methods imported from <code>&#39;react&#39;</code> are only for pure <code>React</code> purposes, such as creating components or writing <code>JSX</code> elements.</p>
<h3 id="3-Render-Function"><a href="#3-Render-Function" class="headerlink" title="3. Render Function"></a>3. <code>Render</code> Function</h3><p>A component class is like a factory that builds components. It builds these components by consulting a set of instructions</p>
<p>There is one property that we have to include in instructions: a <code>render</code> method.</p>
<p>A <code>render</code> method is a property whose name is <code>render</code>, and whose value is a function.</p>
<p>A <code>render</code> method must contain a <code>return</code> statement. Usually, this <code>return</code> statement returns a JSX expression:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ComponentFactory</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-1-Multiline-JSX"><a href="#3-1-Multiline-JSX" class="headerlink" title="3.1 Multiline JSX"></a>3.1 Multiline JSX</h4><p>The <code>return</code> statement needs parentheses to wrap multiline JSX expression.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">QuoteMaker</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">cite</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">cite</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="3-2-Variable-Attribute"><a href="#3-2-Variable-Attribute" class="headerlink" title="3.2 Variable Attribute"></a>3.2 Variable Attribute</h4><p>We can inject the curly-brace JavaScript into JSX inside of the <code>render</code> function:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> redPanda = &#123;</span><br><span class="line">  <span class="attr">src</span>: <span class="string">&#x27;https://...&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RedPanda</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;redPanda.src&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-3-Contain-Logic"><a href="#3-3-Contain-Logic" class="headerlink" title="3.3 Contain Logic"></a>3.3 Contain Logic</h4><p>A <code>render()</code> function can also be a fine place to put simple calculations that need to happen right before a component renders:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Random</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// First, some logic that must happen</span></span><br><span class="line">    <span class="comment">// before rendering:</span></span><br><span class="line">    <span class="keyword">const</span> n = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">10</span> + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// Next, a return statement</span></span><br><span class="line">    <span class="comment">// using that logic:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>The number is &#123;n&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The line with the <code>const n</code> declaration should not be part of the class declaration, and it will cause a syntax error. It should occur in a method like <code>render()</code>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Random</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="comment">// This should be in the render function:</span></span><br><span class="line">  <span class="keyword">const</span> n = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">10</span> + <span class="number">1</span>);</span><br><span class="line"> </span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>The number is &#123;n&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="3-4-Conditional"><a href="#3-4-Conditional" class="headerlink" title="3.4 Conditional"></a>3.4 Conditional</h4><p>To use conditional inside of the <code>render</code> function, put the <code>if</code> statement before the <code>return</code> statement:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TodaysPlan</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> task;</span><br><span class="line">    <span class="keyword">if</span> (!condition) &#123;</span><br><span class="line">      task = <span class="string">&#x27;...&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      task = <span class="string">&#x27;...&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>...<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-This-in-Component"><a href="#4-This-in-Component" class="headerlink" title="4. This in Component"></a>4. <code>This</code> in Component</h3><p><code>this</code> refers to the object on which <code>this</code>‘s enclosing method is called.<br>In most cases, <code>this</code> refers to an instance of the component class.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">IceCreamGuy</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">food</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;ice cream&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>I like &#123;this.food&#125;.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Notice it calls <code>this.food</code> instead of <code>this.food()</code>, since <code>.food</code> is a getter method. The getter method is marked with <code>get</code> in its declaration.</p>
<h3 id="5-Event-Listener-in-a-Component"><a href="#5-Event-Listener-in-a-Component" class="headerlink" title="5. Event Listener in a Component"></a>5. Event Listener in a Component</h3><p>In React, define event handlers as methods on a component class:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">myFunc</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;...&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onHover</span>=<span class="string">&#123;this.myFunc&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Notice that the component class has two methods: <code>.myFunc()</code> and <code>.render()</code>. <code>.myFunc()</code> is being used as an event handler. <code>.myFunc()</code> will be called any time that a user hovers over the rendered <code>&lt;div&gt;&lt;/div&gt;</code>.</p>
<h3 id="6-Component-Instance"><a href="#6-Component-Instance" class="headerlink" title="6. Component Instance"></a>6. Component Instance</h3><p>To make a React component, we write a JSX element, and give it the same name as the component class:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">MyComponentClass</span> /&gt;</span><br></pre></td></tr></table></figure>

<p>JSX elements can be either HTML-like, or <em>component instances</em>. JSX uses <em>capitalization</em> to distinguish between the two. That is the React-specific reason why component class names must begin with capital letters. </p>
<p>Whenever we make a component, that component inherits all of the methods of its component class. <code>MyComponentClass</code> has one method: <code>MyComponentClass.render()</code>. Therefore, <code>&lt;MyComponentClass /&gt;</code> also has a method named <code>render</code>.</p>
<p>We could make different <code>&lt;MyComponentClass /&gt;</code> instances, and each one would inherit this same exact <code>render</code> method.</p>
<p>In order to render a component, that component needs to have the <code>render</code> method. To call a component’s <code>render</code> method, we pass that component to <code>ReactDOM.render()</code>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">MyComponentClass</span> /&gt;</span></span>,</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;app&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><code>ReactDOM.render()</code> will tell <code>&lt;MyComponentClass /&gt;</code> to call its render method. <code>&lt;MyComponentClass /&gt;</code> will call its render method, which will return the JSX element <code>&lt;h1&gt;Hello world&lt;/h1&gt;</code>. <code>ReactDOM.render()</code> will then take that resulting JSX element, and add it to the virtual DOM. This will make “<code>Hello world</code>” appear on the screen.</p>
<h3 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h3><p><a href="https://www.codecademy.com/learn/react-101">Learn React</a></p>
]]></content>
      <categories>
        <category>Study Notes</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>Study Notes of React (4) - React Configs</title>
    <url>/2023/02/15/Notes-of-React-4/</url>
    <content><![CDATA[<p>The following is the file structure of an initialized React app:</p>
<span id="more"></span>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">myfirstreact</span><br><span class="line">├── node_modules</span><br><span class="line">├── public</span><br><span class="line">│   ├── favicon<span class="selector-class">.ico</span></span><br><span class="line">│   ├── index<span class="selector-class">.html</span></span><br><span class="line">│   ├── logo192<span class="selector-class">.png</span></span><br><span class="line">│   ├── logo512<span class="selector-class">.png</span></span><br><span class="line">│   ├── manifest<span class="selector-class">.json</span></span><br><span class="line">│   └── robots<span class="selector-class">.txt</span></span><br><span class="line">├── <span class="attribute">src</span></span><br><span class="line">│   ├── App<span class="selector-class">.css</span></span><br><span class="line">│   ├── App<span class="selector-class">.js</span></span><br><span class="line">│   ├── App<span class="selector-class">.test</span><span class="selector-class">.js</span></span><br><span class="line">│   ├── index<span class="selector-class">.css</span></span><br><span class="line">│   ├── index<span class="selector-class">.js</span></span><br><span class="line">│   ├── logo<span class="selector-class">.svg</span></span><br><span class="line">│   ├── serviceWorker<span class="selector-class">.js</span></span><br><span class="line">│   └── setupTests<span class="selector-class">.js</span></span><br><span class="line">├── <span class="selector-class">.gititgnore</span></span><br><span class="line">├── package<span class="selector-class">.json</span></span><br><span class="line">├── package-lock<span class="selector-class">.json</span></span><br><span class="line">└── README.md</span><br></pre></td></tr></table></figure>

<h3 id="1-webpack"><a href="#1-webpack" class="headerlink" title="1. webpack"></a>1. <em>webpack</em></h3><p>Most files above will not be visible to the visitor of the web app. React uses a tool called <em>webpack</em> which transforms the directories and files here into static assets. Visitors to the site are served those static assets. More details in this article: <a href="https://webpack.js.org/concepts/">High-level overview of webpack’s core concepts</a></p>
<h3 id="2-package-json"><a href="#2-package-json" class="headerlink" title="2. package.json"></a>2. <code>package.json</code></h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;myfirstreact&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@testing-library/jest-dom&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.16.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@testing-library/react&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^13.4.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@testing-library/user-event&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^13.5.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;react&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^18.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;react-dom&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^18.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;react-scripts&quot;</span><span class="punctuation">:</span> <span class="string">&quot;5.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;web-vitals&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.1.4&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react-scripts start&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react-scripts build&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react-scripts test&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;eject&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react-scripts eject&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;eslintConfig&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;react-app&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;react-app/jest&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;browserslist&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;production&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;&gt;0.2%&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;not dead&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;not op_mini all&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;development&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;last 1 chrome version&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;last 1 firefox version&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;last 1 safari version&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>This file outlines all the settings for the React app:</p>
<ul>
<li><p><code>name</code> is the name of the app</p>
</li>
<li><p><code>version</code> is the current version</p>
</li>
<li><p>“<code>private</code>“: <code>true</code> is a failsafe setting to avoid accidentally publishing the app as a public package within the npm ecosystem.</p>
</li>
<li><p><code>dependencies</code> contains all the required Node modules and versions required for the application. In the configures above, the first three are for the purpose of testing. The next two dependencies allow us to use <code>react</code> and <code>react-dom</code> in our JavaScript. Finally, <code>react-scripts</code> provides a useful set of development scripts for working with React. The react version specified is <code>^18.2.0</code>. This means that npm will install the most recent major version matching <code>18.x.x</code>. In contrast, something like <code>~1.2.3</code> in <code>package.json</code> will only install the most recent minor version matching <code>1.2.x</code>.</p>
</li>
<li><p><code>scripts</code> specifies aliases that we can use to access some of the <code>react-scripts</code> commands in a more efficient manner. For example, running <code>npm test</code> in the command line will run <code>react-scripts test --env=jsdom</code> behind the scenes.</p>
</li>
<li><p>There are two more attributes, <code>eslintConfig</code> and <code>browserslist</code>. Both of these are Node modules having their own set of values. <code>browserslist</code> provides information about browser compatibility of the app, while <code>eslintConfig</code> takes care of the <a href="https://stackoverflow.com/questions/8503559/what-is-linting">code linting</a>.</p>
</li>
</ul>
<h3 id="3-node-modules"><a href="#3-node-modules" class="headerlink" title="3. node_modules"></a>3. <code>node_modules</code></h3><p>This directory contains dependencies and sub-dependencies of packages used by the current React app, as specified by <code>package.json</code>.</p>
<p>Running <code>ls -1 | wc -l</code> within the <code>node_modules/</code> directory will yield the number of subfolders. This folder is automatically added to the <code>.gitignore</code>. Even with all these dependencies, the basic app will only be around 50 KB after being <a href="https://techterms.com/definition/minification">minified</a> and compressed for production.</p>
<h3 id="4-package-lock-json"><a href="#4-package-lock-json" class="headerlink" title="4. package-lock.json"></a>4. <code>package-lock.json</code></h3><p>This file contains the exact dependency tree installed in <code>node_modules/</code>. This provides a way for teams working on private apps to ensure that they have the same version of dependencies and sub-dependencies. It also contains a history of changes to <code>package.json</code>, so we can quickly look back at dependency changes.</p>
<h3 id="5-public"><a href="#5-public" class="headerlink" title="5. public"></a>5. <code>public</code></h3><p>This directory contains assets that will be served directly without additional processing by <em>webpack</em>. <code>index.html</code> provides the entry point for the web app. There is also a <code>favicon</code> (header icon) and a <code>manifest.json</code>.</p>
<p>The <code>manifest</code> file configures how the web app will behave if it is added to an Android user’s home screen (Android users can “shortcut” web apps and load them directly from the Android UI). Read more about it <a href="https://developers.google.com/web/fundamentals/engage-and-retain/web-app-manifest/">here</a>.</p>
<h3 id="6-src"><a href="#6-src" class="headerlink" title="6. src"></a>6. <code>src</code></h3><p>This contains the JavaScript that will be processed by <em>webpack</em> and is the heart of the React app. </p>
<p>This folder has the main App JavaScript component (<code>App.js</code>), its associated styles (<code>App.css</code>), and test suite (<code>App.test.js</code>). </p>
<p><code>index.js</code> and its styles (<code>index.css</code>) provide an entry into the App and also kick off the <code>registerServiceWorker.js</code>. This service worker takes care of caching and updating files for the end-user. It allows for offline capability and faster page loads after the initial visit. More of this methodology is available <a href="https://developers.google.com/web/fundamentals/primers/service-workers">here</a>.</p>
<p>As the React app grows, it is common to add a <code>components/</code> directory to organize components and component-related files and a <code>views/</code> directory to organize React views and view-related files.</p>
<h3 id="Articles"><a href="#Articles" class="headerlink" title="Articles"></a>Articles</h3><p><a href="https://create-react-app.dev/docs/getting-started/">Getting Started</a><br><a href="https://www.codecademy.com/paths/web-development/tracks/front-end-applications-with-react/modules/react-development-setup-and-ravenous-part-1/informationals/ready-react-developer-tools">React Developer Tools article</a></p>
<h3 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h3><p><a href="https://www.codecademy.com/learn/react-101">Learn React</a></p>
]]></content>
      <categories>
        <category>Study Notes</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>Study Notes of React (5) - Import and Export Components</title>
    <url>/2023/02/16/Notes-of-React-5/</url>
    <content><![CDATA[<h3 id="1-Import-Component-from-a-File"><a href="#1-Import-Component-from-a-File" class="headerlink" title="1. Import Component from a File"></a>1. Import Component from a File</h3><p>In <code>React.js</code>, every JavaScript file in the application is invisible to each other by default.</p>
<p>To use a variable that’s declared in a different file, we have to import the variable:</p>
<span id="more"></span>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NavBar</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./NavBar.js&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>Notice the difference bewteen the above <code>import</code> and <code>import React</code>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>the curly braces around <code>&#123; NavBar &#125;</code></li>
<li><code>&#39;./NavBar.js&#39;</code> vs <code>&#39;react&#39;</code></li>
</ul>
<p><code>import</code> will treat the string at the end that begins with either a dot or a slash as a filepath. <code>import</code> will follow that filepath, and import the file that it finds.</p>
<p>If the filepath doesn’t have a file extension, then <code>.js</code> is assumed. So the above example could be shortened:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NavBar</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./NavBar&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>Note that none of this behavior is specific to React. <a href="http://eloquentjavascript.net/10_modules.html">Module systems</a> of independent, importable files are a very popular way to organize code. </p>
<p>React specific module system comes from <a href="https://hacks.mozilla.org/2015/08/es6-in-depth-modules/">ES6</a>.</p>
<h3 id="2-Export"><a href="#2-Export" class="headerlink" title="2. Export"></a>2. Export</h3><p>An <code>export</code> statement is also needed in the file, to export the variable that will be imported in a different file.</p>
<p><code>export</code> comes from <a href="http://exploringjs.com/es6/ch_modules.html">ES6 module system</a>, just like <code>import</code> does. <code>export</code> and <code>import</code> are meant to be used together.</p>
<p>There are a few different ways to use <code>export</code>, and one of them is <em>named exports</em> - In one file, place the keyword <code>export</code> before a <code>var</code>, <code>let</code>, <code>const</code>, <code>function</code>, or <code>class</code>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Manifestos.js:</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> faveManifestos = &#123;</span><br><span class="line">  <span class="attr">futurist</span>: <span class="string">&#x27;..&#x27;</span>,</span><br><span class="line">  <span class="attr">agile</span>: <span class="string">&#x27;..&#x27;</span>,</span><br><span class="line">  <span class="attr">cyborg</span>:   <span class="string">&#x27;...&#x27;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>Multiple variables can be imported in the same file:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Manifestos.js:</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> faveManifestos = &#123;</span><br><span class="line">  <span class="attr">futurist</span>: <span class="string">&#x27;..&#x27;</span>,</span><br><span class="line">  <span class="attr">agile</span>: <span class="string">&#x27;..&#x27;</span>,</span><br><span class="line">  <span class="attr">cyborg</span>:   <span class="string">&#x27;...&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> alsoRan = <span class="string">&#x27;...&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>In a different file, <code>import</code> the name of the exported variable:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// App.js:</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// Import faveManifestos and alsoRan from ./Manifestos.js:</span></span><br><span class="line"><span class="keyword">import</span> &#123; faveManifestos, alsoRan &#125; <span class="keyword">from</span> <span class="string">&#x27;./Manifestos&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Use faveManifestos:</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;faveManifestos.cyborg&#125;</span>`</span>); </span><br></pre></td></tr></table></figure>

<p>The imported names need to be wrapped in curly braces in the named exports.</p>
<p><a href="http://exploringjs.com/es6/ch_modules.html">JavaScript ES6 module system</a> goes beyond named exports and has several advanced syntax features.</p>
<h3 id="3-Component-in-render-Function"><a href="#3-Component-in-render-Function" class="headerlink" title="3. Component in render Function"></a>3. Component in <code>render</code> Function</h3><p>Inside components, <code>render</code> methods can also return other component instances:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Whooaa!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">A</span> /&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>In above, <code>B</code>‘s render method returns an instance of the <code>A</code> component class, or <code>B</code> renders an <code>&lt;A /&gt;</code>.</p>
<p>By nesting components inside of other components, we can build complex architectures. This relationship is the fundamental relationship of <code>React.js</code>.</p>
<h3 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h3><p><a href="https://www.codecademy.com/learn/react-101">Learn React</a></p>
]]></content>
      <categories>
        <category>Study Notes</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>Study Notes of React (6) - this.props</title>
    <url>/2023/02/16/Notes-of-React-6/</url>
    <content><![CDATA[<p>A component can pass information to another component. Information that gets passed from one component to another is known as <code>props</code>.</p>
<p>Every component has <code>props</code>. A component’s <code>props</code> is an object. It holds information about that component.</p>
<span id="more"></span>
<p>To see a component’s <code>props</code> object, use the expression <code>this.props</code>. Here’s an example of <code>this.props</code> being used inside of a <code>render</code> method:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">props</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-pass-props-to-a-Component"><a href="#1-pass-props-to-a-Component" class="headerlink" title="1. pass props to a Component"></a>1. pass <code>props</code> to a Component</h3><p>Pass information to a React component by giving that component an attribute:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">MyComponent</span> name=<span class="string">&quot;information&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>

<p>To pass information to a component, we need a name for the information.<br>To pass information that isn’t a string, wrap that information in curly braces. Here’s how to pass an array:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Greeting</span> myInfo=&#123;[<span class="string">&quot;top&quot;</span>, <span class="string">&quot;secret&quot;</span>, <span class="string">&quot;lol&quot;</span>]&#125; /&gt;</span><br></pre></td></tr></table></figure>

<p>Pass several pieces of information to <code>&lt;Greeting /&gt;</code>. The values that aren’t strings are wrapped in curly braces:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Greeting</span> name=<span class="string">&quot;Frarthur&quot;</span> town=<span class="string">&quot;Flundon&quot;</span> age=&#123;<span class="number">2</span>&#125; haunted=&#123;<span class="literal">false</span>&#125; /&gt;</span><br></pre></td></tr></table></figure>

<p>To make a component display passed-in information, find the component class that is going to receive that information, and include <code>this.props.name-of-information</code> in the return statement of that component class’s render method.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Greeting</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hi there, &#123;this.props.firstName&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Greeting</span> <span class="attr">firstName</span>=<span class="string">&#x27;Vivian&#x27;</span> /&gt;</span></span>, </span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;app&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="2-Pass-props-From-Component-To-Component"><a href="#2-Pass-props-From-Component-To-Component" class="headerlink" title="2. Pass props From Component To Component"></a>2. Pass props From Component To Component</h3><p>The most common use of props is to pass information to a component, <em>from a different component</em>. </p>
<p><code>props</code> is the name of the object that stores passed-in information. <code>this.props</code> refers to that storage object. At the same time, each piece of passed-in information is called a <code>prop</code>. This means that <code>props</code> could refer to <em>two pieces of passed-in information</em>, or it could refer to <em>the object that stores those pieces of information</em>.</p>
<p>For example, if <code>&lt;App /&gt;</code> is going to pass a prop to <code>&lt;Greeting /&gt;</code>, then <code>&lt;App /&gt;</code> can do that by rendering <code>&lt;Greeting /&gt;</code>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Greeting.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Greeting</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hi there, &#123;this.props.name&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Greeting</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./Greeting&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Greeting</span> <span class="attr">name</span>=<span class="string">&quot;Vivian&quot;</span> /&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;app&quot;</span>));</span><br></pre></td></tr></table></figure>

<h3 id="3-Render-Different-UI-Based-on-props"><a href="#3-Render-Different-UI-Based-on-props" class="headerlink" title="3. Render Different UI Based on props"></a>3. Render Different UI Based on <code>props</code></h3><p>The passed-in variable is not displayed, and is used to decide what will be displayed.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Greeting</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  	<span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">signedIn</span> === <span class="literal">false</span>) &#123;</span><br><span class="line">  	  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>text1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">  	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  	  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>text2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">  	&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Notice that <code>this.props.signedIn</code> is not located inside of a <code>return</code> statement. </p>
<h3 id="4-Pass-an-Event-Handler-as-a-prop"><a href="#4-Pass-an-Event-Handler-as-a-prop" class="headerlink" title="4. Pass an Event Handler as a prop"></a>4. Pass an Event Handler as a <code>prop</code></h3><p>Functions can be passed as <code>props</code>. It is common to pass <em>event handler</em> functions.</p>
<p>Event handler can be defined as a method in the component class, just like the <code>render</code> method, without the <code>function</code> keyword.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Talker</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;...&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;/</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Button</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.props.onClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Click me!</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>prop</code> attributes will work with names that follow the <a href="https://mathiasbynens.be/notes/javascript-identifiers">JavaScript variable name rules</a>.</p>
<p>The naming convention for a event handler is adding <code>handle</code> before the event type, like <code>handleClick</code>, and for a <code>prop</code>, it is adding <code>on</code> before the event type, like <code>onClick</code>.</p>
<p>Names like <code>onClick</code> only create event listeners if they’re used on HTML-like JSX elements. Otherwise, they’re just ordinary <code>prop</code> names.</p>
<h3 id="5-this-props-children"><a href="#5-this-props-children" class="headerlink" title="5. this.props.children"></a>5. <code>this.props.children</code></h3><p>Every component’s <code>props</code> object has a property named <code>children</code>. <code>this.props.children</code> will return everything in between a component’s opening and closing JSX tags.</p>
<p>Components can be self-closing tags, such as <code>&lt;MyComponentClass /&gt;</code>, and they can also be <code>&lt;MyComponentClass&gt;&lt;/MyComponentClass&gt;</code>.</p>
<p><code>this.props.children</code> would return everything in between <code>&lt;MyComponentClass&gt;</code> and <code>&lt;/MyComponentClass&gt;</code>.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BigButton</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">children</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>big<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Example 1</span></span><br><span class="line">&lt;<span class="title class_">BigButton</span>&gt;</span><br><span class="line">  A child <span class="keyword">of</span> <span class="title class_">BigButton</span>.</span><br><span class="line">&lt;/<span class="title class_">BigButton</span>&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Example 2</span></span><br><span class="line">&lt;<span class="title class_">BigButton</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">LilButton</span> /&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">BigButton</span>&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Example 3</span></span><br><span class="line">&lt;<span class="title class_">BigButton</span> /&gt;</span><br></pre></td></tr></table></figure>

<p>In Example 1, <code>&lt;BigButton&gt;</code>‘s <code>this.props.children</code> would equal the text, “A child of BigButton.”<br>In Example 2, <code>&lt;BigButton&gt;</code>‘s <code>this.props.children</code> would equal a <code>&lt;LilButton /&gt;</code> component.<br>In Example 3, <code>&lt;BigButton&gt;</code>‘s <code>this.props.children</code> would equal <code>undefined</code>.</p>
<p>If a component has more than one child between its JSX tags, then <code>this.props.children</code> will return those children in an <strong>array</strong>. However, if a component has only one child, then <code>this.props.children</code> will return the single child, not wrapped in an array.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">List</span> <span class="attr">type</span>=<span class="string">&#x27;Musician&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>musician1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>musician2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">List</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">List</span> <span class="attr">type</span>=<span class="string">&#x27;Cat&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>cat1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">List</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">List</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> titleText = <span class="string">`Favorite <span class="subst">$&#123;<span class="variable language_">this</span>.props.type&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">children</span> <span class="keyword">instanceof</span> <span class="title class_">Array</span>) &#123;</span><br><span class="line">    	titleText += <span class="string">&#x27;s&#x27;</span>; <span class="comment">// &quot;Musicians&quot; and &quot;Cat&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;titleText&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;this.props.children&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>&#123;this.props.children&#125;</code> between <code>&lt;ul&gt;&lt;/ul&gt;</code> tags inside the <code>return</code> function of the <code>List</code> component makes the list-items display. </p>
<h3 id="6-defaultProps"><a href="#6-defaultProps" class="headerlink" title="6. defaultProps"></a>6. defaultProps</h3><p>If no <code>props</code> passed to a component, <code>defaultProps</code> can be used to set a default value:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;this.props.text&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="title class_">Example</span>.<span class="property">defaultProps</span> = &#123; <span class="attr">text</span>: <span class="string">&#x27;default&#x27;</span> &#125;; </span><br></pre></td></tr></table></figure>
<p>Notice that the <code>defaultProps</code> property should be equal to an object, and inside of this object, write properties for any default <code>prop</code>s that we’d like to set.</p>
<p>In the above example, if an<code> &lt;Example /&gt;</code> doesn’t get passed any text, then it will display <code>default</code>.</p>
<p>If an <code>&lt;Example /&gt;</code> does get passed some text, then it will display that passed-in text.</p>
]]></content>
      <categories>
        <category>Study Notes</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>Study Notes of Software Testing (1)</title>
    <url>/2022/02/19/Notes-of-Software-Testing-1/</url>
    <content><![CDATA[<h3 id="Concepts"><a href="#Concepts" class="headerlink" title="Concepts"></a>Concepts</h3><h4 id="Verification"><a href="#Verification" class="headerlink" title="Verification"></a>Verification</h4><blockquote>
<p>The software should conform to its specification  </p>
</blockquote>
<span id="more"></span> 
<p>e.g.</p>
<ol>
<li>Unit tests maps requirements (or User Stories in Agile development) to class behaviors</li>
<li>Refactoring is a technique that modifies the structure of software to improve the design (or some non-functional attribute such as performance) without changing the functionality of the software. Regression testing after refactoring the system is to determine whether it behaves the same as the non-refactored version</li>
</ol>
<!-- more -->

<h4 id="Validation"><a href="#Validation" class="headerlink" title="Validation"></a>Validation</h4><blockquote>
<p>The software should do what the user really required  </p>
</blockquote>
<p>e.g.</p>
<ol>
<li>Design and prototype walk-throughs with users</li>
<li>User interviews to see if requirements&#x2F;User Stories match the user’s expectations of how the system will perform</li>
</ol>
<h4 id="Other-Concepts"><a href="#Other-Concepts" class="headerlink" title="Other Concepts"></a>Other Concepts</h4><blockquote>
<p>An <em><strong>oracle</strong></em> can be a human or a program. The function of an oracle is to check that the output of the program under test matches the expected output of the test case.</p>
</blockquote>
<blockquote>
<p>The <em><strong>setup</strong></em> step for a test case is important to establish a specific state for the program to run the test.</p>
</blockquote>
<blockquote>
<p>Tasks that can be part of the <em><strong>tear down</strong></em> phase are<br>clean up any data that is used during testing; clean up everything after testing is done including closing connections that might have been opened.</p>
</blockquote>
<blockquote>
<p><em><strong>Assessment</strong></em> phase: Part of the assessment is to compare the output of the software under test with the expected output. This can be done manually, with a human checking that the result meets his&#x2F;her expectations, or automatically, with an oracle.</p>
</blockquote>
<h3 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h3><ol>
<li><a href="https://www.coursera.org/specializations/software-testing-automation">Software Testing and Automation</a></li>
</ol>
]]></content>
      <categories>
        <category>Study Notes</category>
        <category>Software Testing</category>
      </categories>
      <tags>
        <tag>Testing</tag>
      </tags>
  </entry>
  <entry>
    <title>Study Notes of Spring (1) - How Spring works</title>
    <url>/2023/02/02/Notes-of-Spring-1/</url>
    <content><![CDATA[<h3 id="1-Making-GET-Requests"><a href="#1-Making-GET-Requests" class="headerlink" title="1. Making GET Requests"></a>1. Making GET Requests</h3><p>Let’s imagine we’re building a web application that allows users to search for restaurants based on their food allergies. In order to send a <code>GET</code> request that returns a complete list of restaurants in our database, we first need to add an internal <code>GET</code> method to our Spring code.</p>
<span id="more"></span>
<p>Notice this <code>GET</code> method:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="keyword">public</span> Iterable&lt;Restaurant&gt; <span class="title function_">getAllRestaurants</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> restaurantRepository.findAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Alternatively, we can make <code>GET</code> requests using <code>curl</code>. <code>CURL</code>, short for <em>Client for URLs</em>, is a command line tool that allows us to transfer data to and from a server. It supports multiple protocols, including HTTP:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl localhost:4001/restaurants</span><br></pre></td></tr></table></figure>
<p><code>curl</code> sends <code>GET</code> requests by default, so we don’t need to use the <code>-X</code> option.</p>
<h3 id="2-Making-POST-Requests"><a href="#2-Making-POST-Requests" class="headerlink" title="2. Making POST Requests"></a>2. Making POST Requests</h3><p>To append a new restaurant item to our existing restaurant database, we’re going to send a POST request by submitting an HTML form. But first we’ll need to add a <code>POST</code> method to our Spring code:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="meta">@ResponseStatus(HttpStatus.CREATED)</span></span><br><span class="line"><span class="keyword">public</span> Restaurant <span class="title function_">addRestaurant</span><span class="params">(<span class="meta">@RequestBody</span> Restaurant restaurant)</span> &#123;</span><br><span class="line">  validateNewRestaurant(restaurant);</span><br><span class="line">  <span class="keyword">return</span> restaurantRepository.save(restaurant);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>In addition, we can make POST requests using the curl command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X POST -d <span class="string">&quot;&#123;\&quot;name\&quot;:\&quot;Pizza Hut\&quot;, \&quot;line1\&quot;:\&quot;123 Main St.\&quot;, \&quot;city\&quot;:\&quot;San Diego\&quot;, \&quot;state\&quot;:\&quot;CA\&quot;, \&quot;zipCode\&quot;:\&quot;90029\&quot;&#125;&quot;</span> -H <span class="string">&quot;Content-Type: application/json&quot;</span> http://localhost:4001/restaurants/</span><br></pre></td></tr></table></figure>
<ul>
<li><code>-X POST</code> tells the server that the client is making a <code>POST</code> request, where <code>-X</code> (short for <code>--request</code>) is the curl parameter specifying the type of request method to use. HTTP methods are case-sensitive.</li>
<li><code>-d</code> (short for <code>--data</code>) indicates to the server that the client is sending new data to an existing application.</li>
<li>The content inside “<code>&#123; &#125;</code>“, is the data that the client wants to send (as indicated by the preceding <code>-d</code>). We use the <code>&quot;&#123;\&quot;key1\&quot;:\&quot;value1\&quot;, \&quot;key2\&quot;:\&quot;value2\&quot;&#125;&quot;</code> syntax, or <code>&#39;&#123;&quot;key1&quot;:&quot;value1&quot;, &quot;key2&quot;:&quot;value2&quot;&#125;&#39;</code>.</li>
<li><code>-H &quot;Content-Type: application/json&quot;</code> specifies that we are sending data in JSON format. <code>-H</code> is short for <code>--header</code>.</li>
<li>Finally, the URL <code>http://localhost:4001/restaurants/</code> tells the server where to send this new data.</li>
</ul>
<p>An example to update data without using json:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X PUT -d <span class="string">&quot;username=Lily&amp;height=180&quot;</span> http://sample-api.com/users/1</span><br></pre></td></tr></table></figure>
<p>Note that if we include the <code>-d</code> option and do not specify an HTTP verb, <code>curl</code> will default to sending a <code>POST</code> request.</p>
<p>Adding the <code>-i</code> option (short for <code>--include</code>) to <code>curl</code> commands will cause <code>curl</code> to print the response header to the command shell in addition to the response body:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -i https://api.coinbase.com/v2/prices/BTC-USD/buy</span><br><span class="line"> </span><br><span class="line">HTTP/2 200</span><br><span class="line"><span class="built_in">date</span>: ...</span><br><span class="line">content-type: ...</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>Status codes in the <code>500s</code> indicate server errors, whereas status codes in the <code>400s</code> indicate client errors.</p>
<p>Some of the client errors:</p>
<ul>
<li>401, which indicates that the client is not authenticated and therefore not allowed to access the specified resource</li>
<li>403, which indicates that the client is authenticated but not permitted to view the specified resource</li>
<li>404, which indicates that the specified resource cannot be found on the server</li>
</ul>
<h3 id="3-Spring-files"><a href="#3-Spring-files" class="headerlink" title="3. Spring files"></a>3. Spring files</h3><p>The Spring Web dependency ensures that Maven will build your web application using <em>Spring MVC</em> – a framework that organizes application code by their function.</p>
<h4 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h4><p>POM stands for <em>Project Object Model</em> – an XML file that specifies and loads important project data, such as configuration, build profiles, and dependencies. All Maven projects are built using its own POM.</p>
<h4 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h4><p>Under <code>src/main/resources</code> navigate to and open the file <code>application.properties</code>. <code>application.properties</code> is a configuration file that specifies the properties of the Spring application. Examples of application properties can include JSON properties, data properties, server properties, and more. A Spring application will read and load properties specified in <code>application.properties</code> during project build.</p>
<h3 id="4-A-Note-about-Annotations"><a href="#4-A-Note-about-Annotations" class="headerlink" title="4. A Note about Annotations"></a>4. A Note about Annotations</h3><p><code>@RestController</code> and <code>@GetMapping</code> are examples of different kinds of annotations. </p>
<p><em>Annotations</em>, recognized by their starting <code>@</code> symbol, are built-in units of Spring code that make complex functionality readily available in Spring applications. </p>
<p>For example, the <code>@GetMapping(&quot;/helloworld&quot;)</code> annotation means that the annotated method will be executed every time the app receives a <code>GET</code> request to the <code>/helloworld</code> endpoint. </p>
<h3 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h3><p><a href="https://www.codecademy.com/learn/learn-spring">Learn Spring</a></p>
]]></content>
      <categories>
        <category>Study Notes</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Study Notes of Shell</title>
    <url>/2022/01/07/Notes-of-Shell/</url>
    <content><![CDATA[<p><code>command &gt;file</code> runs <code>command</code> but with its standard output redirected into the file <code>file</code><br><code>cmd1 | cmd2</code> runs both commands, with the standard output of <code>cmd1</code> connected into the <code>pipe</code>, and the standard input of <code>cmd2</code> connected so as to come out of the <code>pipe</code>.</p>
<span id="more"></span> 
<h3 id="case"><a href="#case" class="headerlink" title="case"></a>case</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#t4</span></span><br><span class="line"><span class="keyword">for</span> i</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$i</span> <span class="keyword">in</span></span><br><span class="line">        hello*)</span><br><span class="line">            <span class="built_in">echo</span> Nice to meet you!</span><br><span class="line">            ;;</span><br><span class="line">        goodbye)</span><br><span class="line">            <span class="built_in">echo</span> Thanks <span class="keyword">for</span> visiting!</span><br><span class="line">            ;;</span><br><span class="line">        *)</span><br><span class="line">            <span class="built_in">echo</span> well, <span class="variable">$i</span> to you too!</span><br><span class="line">            ;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment">#$ sh t4 hellooo</span></span><br><span class="line"><span class="comment"># Nice to meet you!</span></span><br><span class="line"><span class="comment">#$ sh t4 bye</span></span><br><span class="line"><span class="comment"># well, bye to you too!</span></span><br></pre></td></tr></table></figure>

<h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> hello.c <span class="comment">#display codes line by line</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> hello &gt; newhello <span class="comment">#redirect output of hello to new hello</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="comment">#−n to number the lines, −s to eliminate multiple blank lines.</span></span></span><br></pre></td></tr></table></figure>

<h3 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h3><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cp</span> hello bloop/nothello <span class="comment">#copy hello to bloop/nothello</span></span></span><br></pre></td></tr></table></figure>

<h3 id="comm"><a href="#comm" class="headerlink" title="comm"></a>comm</h3><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">comm</span> file1.txt file2.txt <span class="comment">#1st col:lines unique in 1st file; 2st col:lines unique in 2nd file; 3rd column:lines in common</span></span></span><br></pre></td></tr></table></figure>

<h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">find mydir -name file.txt -<span class="built_in">print</span> <span class="comment">#find a file by name in a directory tree</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">find mydir/file.txt</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">find mydir -mtime -30 -<span class="built_in">exec</span> <span class="built_in">ls</span> -ld <span class="string">&#x27;&#123;&#125;&#x27;</span> <span class="string">&#x27;;&#x27;</span> <span class="comment">#Find files which are modified within the last 30 days, and execute the &quot;ls −l&quot; command on them. But they might be directories, so we need the &quot;−d&quot; option to ls as well.</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">find mydir -<span class="built_in">type</span> f -mtime -30 -<span class="built_in">exec</span> <span class="built_in">ls</span> -ld <span class="string">&#x27;&#123;&#125;&#x27;</span> <span class="string">&#x27;;&#x27;</span> <span class="comment">#only finding plain files (e.g. excluding directories) (so the &quot;−d&quot; option to ls is no longer important, but doesn&#x27;t hurt either)</span></span></span><br></pre></td></tr></table></figure>

<h3 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h3><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> hello &gt; newhello <span class="comment">#&quot;hello&quot; as plaintext in newhello, or rewrite newhello with &quot;hello&quot;</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> -n <span class="string">&#x27;Please enter repeat count: &#x27;</span> <span class="comment">#−n means not to output the terminating newline.</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> foo; <span class="built_in">echo</span> bar; <span class="built_in">echo</span> baz &gt;fbb <span class="comment">#Only &quot;echo baz&quot; is redirected.It&#x27;s an operator precedence issue (precedence of &quot;;&quot; versus &quot;&gt;&quot;).</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">(<span class="built_in">echo</span> foo; <span class="built_in">echo</span> bar; <span class="built_in">echo</span> baz) &gt;fbb <span class="comment">#The shell implements parentheses to change the precedence</span></span></span><br></pre></td></tr></table></figure>

<h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> hello goodbye</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span>, world</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment">#hello, world</span></span><br><span class="line"><span class="comment">#goodbye,world</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `<span class="built_in">seq</span> 1 4`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment"># 1 2 3 4</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `<span class="built_in">seq</span> 1 100`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">sum</span>=`<span class="built_in">expr</span> <span class="variable">$sum</span> + <span class="variable">$i</span>`</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment">#sum: 5050</span></span><br></pre></td></tr></table></figure>

<h3 id="gcc"><a href="#gcc" class="headerlink" title="gcc"></a>gcc</h3><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gcc hello.c <span class="comment">#compile c codes</span></span></span><br></pre></td></tr></table></figure>

<h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">grep H composers <span class="comment">#outputs lines which match &#x27;H&#x27; in the file &#x27;composers&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">who</span> | grep ajr <span class="comment">#outputs lines which match `ajr` in log of `who`</span></span></span><br></pre></td></tr></table></figure>

<h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> 5 -lt 2</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> 5 less than 2</span><br><span class="line"><span class="keyword">else</span> <span class="comment">#or elif</span></span><br><span class="line">    <span class="built_in">echo</span> 2 less than 5</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<h3 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h3><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">kill</span> -STOP [pid]</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">kill</span> -CONT [pid]</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">kill</span> -INT [pid]</span></span><br></pre></td></tr></table></figure>

<h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -a <span class="comment">#check files begin with &#x27;.&#x27;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h3><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mv</span> bloop/nothello bloop/yeshello <span class="comment">#move bloop/nothello to bloop/yeshello</span></span></span><br></pre></td></tr></table></figure>

<h3 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h3><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">pwd</span> <span class="comment">#get current absolute path</span></span></span><br></pre></td></tr></table></figure>

<h3 id="read"><a href="#read" class="headerlink" title="read"></a>read</h3><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">read</span> x y</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">foo bar baz <span class="comment">#random inputs</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="variable">$x</span> <span class="comment">#-&gt; foo</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="variable">$y</span> <span class="comment">#-&gt; bar baz</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">read</span> x y</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">foo <span class="comment">#random inputs</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="variable">$x</span> <span class="comment">#-&gt; foo</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="variable">$y</span> <span class="comment">#-&gt; (empty)</span></span></span><br></pre></td></tr></table></figure>

<h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">\<span class="built_in">rm</span> -r x <span class="comment">#\ -&gt; bypass alias: alias rm=&#x27;rm -i&#x27;. -i -&gt; interactive</span></span></span><br></pre></td></tr></table></figure>

<h3 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h3><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> composers | sed s/ee/EEE/ g <span class="comment">#replace &quot;ee&quot; by &quot;EEE&quot;. sed - stream editor(line by line). g - global (if not, only 1st)</span></span>  </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> composers | sed <span class="string">&#x27;s/\(.*\) \(.*\)/\2, \1/&#x27;</span> | <span class="built_in">sort</span> <span class="comment">#&quot;A B&quot; -&gt; &quot;B, A&quot;</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sed <span class="string">&#x27;s/Fred[a-z]*/Wilma/g&#x27;</span> people <span class="comment">#&quot;[a-z]*&quot; above means &quot;any number of lower-case letters&quot;, whereas in the glob notation it would mean one lower-case letter followed by anything.</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sed 5d people <span class="comment">#delete the 5th line in &quot;people&quot; file</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sed /pattern/d people <span class="comment">#/pattern/d will remove lines matching the pattern.</span></span></span><br></pre></td></tr></table></figure>

<h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> composers | <span class="built_in">sort</span> <span class="comment">#sort by 1st letter</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> composers | <span class="built_in">sort</span> -k2 -f <span class="comment">#-k2 sort by 2nd field. -f case insensitive. −n does a numeric sort (12 after 2)</span></span></span><br></pre></td></tr></table></figure>

<h3 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h3><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">tail</span> -40 /var/log/messages <span class="comment">#head or tail-the first or last n lines of a file (n=10 by default). Here n=40</span></span></span><br></pre></td></tr></table></figure>

<h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">x=5</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">test</span> <span class="variable">$x</span> -lt 3</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> $? <span class="comment">#-&gt; 1 (fail)</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">test</span> 3 -lt <span class="variable">$x</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> $? <span class="comment">#-&gt; 0 (succeed)</span></span></span><br></pre></td></tr></table></figure>

<h3 id="tr"><a href="#tr" class="headerlink" title="tr"></a>tr</h3><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">tr</span> A-Z a-z <span class="comment">#tr-character-level substitution. convert from lower case to upper case</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">tr</span> -cs a-zA-Z0-9 <span class="string">&#x27;\012&#x27;</span> &lt;file <span class="comment">#replace all the characters except a-zA-Z0-9 to &#x27;\012&#x27; and squeeze. -c a-zA-Z0-9 -&gt; all the characters except a-zA-Z0-9. -s &#x27;\012&#x27; -&gt; Repeated continuous &#x27;\012&#x27; should be squeezed to a single &#x27;\012&#x27;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="uniq"><a href="#uniq" class="headerlink" title="uniq"></a>uniq</h3><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">tr</span> -cs a-zA-Z0-9 <span class="string">&#x27;\012&#x27;</span> &lt;file | <span class="built_in">tr</span> A-Z a-z | <span class="built_in">sort</span> | <span class="built_in">uniq</span> -c | <span class="built_in">sort</span> -n <span class="comment">#uniq -&gt; Collapse adjacent identical lines. Used in the example to give us a word-frequency count in a document</span></span></span><br></pre></td></tr></table></figure>

<h3 id="variables"><a href="#variables" class="headerlink" title="variables"></a>variables</h3><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">i=4 <span class="comment">#if spaces between, like &quot;i = 4&quot; -&gt; &quot;i: Command not found&quot;</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="variable">$i</span> <span class="comment">#echo 4</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> <span class="variable">$i</span> <span class="comment">#-&gt; &quot;cat: 4: No such file or directory&quot;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">i=i+1</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="variable">$i</span> <span class="comment">#-&gt; i+1 (Here, i+1 is string &quot;i+1&quot;)</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">i=4</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">i=<span class="variable">$i</span>+1</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="variable">$i</span> <span class="comment">#-&gt; 4+1 (Here, 4+1 is string &quot;4+1&quot;)</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">expr</span> 4 + 1 <span class="comment">#-&gt; 5</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">i=`<span class="built_in">expr</span> 4 + 1`</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="variable">$i</span> <span class="comment">#-&gt; 5</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">i = `<span class="built_in">expr</span> <span class="variable">$i</span> + 1`</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="variable">$i</span> <span class="comment">#-&gt; 6</span></span></span><br></pre></td></tr></table></figure>

<h3 id="wc"><a href="#wc" class="headerlink" title="wc"></a>wc</h3><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">wc</span> -l hello.c <span class="comment">#show number of lines of codes</span></span></span><br></pre></td></tr></table></figure>

<h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">i=0</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">test</span> <span class="variable">$i</span> -lt 10</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    i=`<span class="built_in">expr</span> <span class="variable">$i</span> + 1`</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment">#1 ... 10</span></span><br></pre></td></tr></table></figure>

<h3 id="xargs"><a href="#xargs" class="headerlink" title="xargs"></a>xargs</h3><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">fakelpq | <span class="built_in">cut</span> -f1 | xargs fakelprm <span class="comment">#get 1st column of text fakelpq, and pass as arguments of fakelprm (one time per line)</span></span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Study Notes</category>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Study Notes of Spring (3) - Spring Bean</title>
    <url>/2023/02/04/Notes-of-Spring-3/</url>
    <content><![CDATA[<p>The Spring framework defines a <em>Spring bean</em> as an object managed by the Spring <a href="https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/beans.html">Inversion of Control (IoC) container</a>.</p>
<h3 id="1-Beans"><a href="#1-Beans" class="headerlink" title="1. Beans"></a>1. Beans</h3><p>Without the <em>Spring Beans</em> feature, instantiating an <em>object</em> from a <em>class</em> requires the use of the <code>new</code> keyword:</p>
<span id="more"></span>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RaceTrack</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> String location;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> miles;</span><br><span class="line">  <span class="keyword">private</span> String trackType;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Driver</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> String team;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> yearsExperience;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RaceRound</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> String startTime;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">RaceTrack</span> <span class="variable">currentRaceTrack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RaceTrack</span>();</span><br><span class="line">  <span class="keyword">private</span> <span class="type">Driver</span> <span class="variable">currentDriver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Driver</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Any changes to those <code>RaceTrack</code> and <code>Driver</code> classes would require additional changes in the <code>RaceRound</code> class.</p>
<p>Below instantiates the nested objects with <em>Spring beans</em>. Mark <code>RaceTrack</code> and <code>Driver</code> classes as <em>Spring beans</em> using the <code>@Component</code> annotation:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RaceTrack</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> String location;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> miles;</span><br><span class="line">  <span class="keyword">private</span> String trackType;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Driver</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> String team;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> yearsExperience;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Remove the actual instantiation code from <code>RaceRound</code>, instead using the <code>@Autowired</code> annotation:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RaceRound</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> String startTime;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> RaceTrack currentRaceTrack;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> Driver currentDriver;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The dependent classes <code>RaceTrack</code> and <code>Driver</code> are <em>Spring beans</em>, which allows the <em>IoC container</em> to manage them, i.e. instantiate them and inject them into our <code>RaceRound</code> class.</p>
<p>We didn’t have to edit the existing code in <code>RaceTrack</code> and <code>Driver</code> classes to turn them into <em>Spring beans</em>. All we had to add was the <code>@Component</code> annotation. </p>
<p>Note: <code>@Component</code> and <code>@Autowired</code> are just two of many annotations for working with <em>Spring beans</em> and the <em>IoC container</em>. </p>
<h3 id="2-Load-Beans"><a href="#2-Load-Beans" class="headerlink" title="2. Load Beans"></a>2. Load Beans</h3><p>The fully-automatic annotations approach is facilitated using three annotations:</p>
<ul>
<li><code>@Configuration</code>, which notifies the framework that <em>beans</em> may be created via the <em>annotated class</em>.</li>
<li><code>@ComponentScan</code>, which tells the framework to scan our code for components such as <em>classes</em>, <em>controllers</em>, <em>services</em>, etc.</li>
<li><code>@EnableAutoConfiguration</code>, which tells the <em>container</em> to auto-create <em>beans</em> from the found components.</li>
</ul>
<p>These three significant annotations have been wrapped up into one - The <code>@SpringBootApplication</code> annotation is a compilation of <code>@Configuration</code>, <code>@ComponentScan</code>, and <code>@EnableAutoConfiguration</code>. When we apply the <code>@SpringBootApplication</code> annotation to the class containing the <em>main method</em>, our application runs with all of this built-in functionality. Therefore, when our application starts up, the <em>container</em> scans our code for components from which <em>beans</em> should be instantiated.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RecipeApplication</span> &#123;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    SpringApplication.run(RecipeApplication.class, args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-BeanDefinition-and-IoC"><a href="#3-BeanDefinition-and-IoC" class="headerlink" title="3. BeanDefinition and IoC"></a>3. <code>BeanDefinition</code> and IoC</h3><p>The Spring framework represents <em>beans</em> as a <code>BeanDefinition</code> object. The <code>BeanDefinition</code> object has several properties including <code>class</code> and <code>properties</code>.</p>
<ol>
<li><p>When the container instantiates a <em>bean</em> from a class, it populates the <em>class</em> property of that bean with the fully qualified name:<br><code>RaceRound</code> -&gt; <code>com.package.RacingGame.RaceRound</code><br>The <code>class</code> property is Spring’s way of representing the bean’s underlying Java type so it knows what to instantiate.</p>
</li>
<li><p>The <code>properties</code> property of the <em>bean</em> is populated from the properties of a class.<br>If the class has built-in types such as <code>int</code> or <code>string</code>, the <em>container</em> converts them into the same type of property for the <em>bean</em>.<br>If the class has a custom type, such as <code>RaceTrack</code> or <code>Driver</code>, there are <em>dependencies</em> and the <em>container</em> has to create <code>BeanDefinition</code> object for each of these types.</p>
</li>
</ol>
<p>When a class encapsulates other objects, the referenced objects become a <em>dependency</em> for the outer class. The container instantiates <em>beans</em> for the referenced objects before the outer classes. This process is known as <em>dependency injection</em>. The outer class no longer has to instantiate dependencies by themselves. The control of dependencies has been inverted back to the <em>container</em>, and this why it is called an <strong>Inversion of Control (IoC) container</strong>.</p>
<h3 id="4-Inject-Dependency-without-Annotation"><a href="#4-Inject-Dependency-without-Annotation" class="headerlink" title="4. Inject Dependency without Annotation"></a>4. Inject Dependency without Annotation</h3><p>Dependencies injected via the constructor:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CoffeeController</span> &#123;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> CoffeeRepository coffeeRepository;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">CoffeeController</span><span class="params">(CoffeeRepository coffeeRepo)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.coffeeRepository = coffeeRepo;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This shows that there are many ways that the <em>IoC container</em> can use <em>Spring beans</em> in an application.</p>
<h3 id="5-Summary"><a href="#5-Summary" class="headerlink" title="5. Summary"></a>5. Summary</h3><p><em>Spring beans</em> are objects managed by the <em>IoC container</em>.</p>
<p>When we run our Spring application, the framework searches our code and creates <em>beans</em> from any components it has found.</p>
<p>Part of the <em>bean</em> creation process involves ensuring any nested <em>beans</em> are available for use.</p>
<h3 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h3><p><a href="https://www.codecademy.com/learn/learn-spring">Learn Spring</a></p>
]]></content>
      <categories>
        <category>Study Notes</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Study Notes of Spring (2) - Spring Controllers</title>
    <url>/2023/02/03/Notes-of-Spring-2/</url>
    <content><![CDATA[<h3 id="1-Mapping-Requests-in-Spring"><a href="#1-Mapping-Requests-in-Spring" class="headerlink" title="1. Mapping Requests in Spring"></a>1. Mapping Requests in Spring</h3><p>In order to provide a response to a request, the server maps the request to an endpoint. In Spring, the class is marked as a controller and each of its methods is associated with an endpoint. The method is called to formulate a response to each request. This is facilitated by two important annotations:</p>
<span id="more"></span>
<ul>
<li>The <code>@RestController</code> annotation is used to declare a <em>class</em> as a controller that can provide application-specific types of data as part of an HTTP response</li>
<li>The <code>@RequestMapping</code> annotation is used to wire request types and endpoints to specific class <em>methods</em>. (<code>@RequestMapping</code> is a <em>class</em> level and <em>method</em> level annotation that maps HTTP requests to methods.)</li>
</ul>
<p>The <code>@RestController</code> annotation should be added to each class that will handle responses to HTTP requests. The <code>@RestController</code> combines the functionality of two separate annotations, <code>@Controller</code> and <code>@ResponseBody</code>:</p>
<ul>
<li><code>@Controller</code> is used to make a <em>class</em> identifiable to Spring as a component of the web application.</li>
<li><code>@ResponseBody</code> tells Spring to convert the return values of a controller’s methods to <code>JSON</code> and <em>bind</em> that <code>JSON</code> to the HTTP response body. Since almost every major programming language offers some type of <code>JSON</code> (JavaScript Object Notation) support, we can easily take an object created in Spring and translate it to <code>JSON</code> which can be easily parsed in the HTML and displayed on the page.</li>
</ul>
<p><code>@RequestMapping</code> accepts several arguments. The first, and perhaps most important, is the path. The path argument is used to determine where requests are mapped. For example, if a user makes a request to get a “book” resource, the server will send the request to a method with the annotation <code>@RequestMapping(path = &quot;/book&quot;)</code> and that method would provide the response.</p>
<p>The <code>@RequestMapping</code> annotation also accepts several other arguments including <em>method</em>, <em>params</em>, and <em>consumes</em>:</p>
<ul>
<li><code>method</code>: allows the developer to specify which HTTP method should be used when accessing the controller method. The most common are <code>RequestMethod.GET</code>, <code>...POST</code>, <code>...PUT</code>, and <code>...DELETE</code>. Since this is an optional argument, if we do not specify an HTTP method it will be defaulted to <code>GET</code>.</li>
<li><code>params</code>: filters requests based on given parameters.</li>
<li><code>consumes</code>: used to specify which media type can be consumed; some common media types are <code>&quot;text/plain&quot;</code>, <code>&quot;application/JSON&quot;</code>, etc.<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VirtualLibrary</span>&#123;</span><br><span class="line"> </span><br><span class="line">  <span class="meta">@RequestMapping(&quot;/books/all&quot;, RequestMethod.GET)</span></span><br><span class="line">  <span class="keyword">public</span> Book <span class="title function_">getAllBooks</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getBook();</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-Defining-Base-Paths"><a href="#2-Defining-Base-Paths" class="headerlink" title="2. Defining Base Paths"></a>2. Defining Base Paths</h3><p>When the <code>@RequestMapping</code> data annotation is used at the class level, the specified path argument will become the base path. For example, a class with the data annotation <code>@RequestMapping(&quot;/books&quot;)</code> will map all appropriate requests to this class, and in this case, <code>“/books”</code> becomes the base path. In the example shown below, <code>“/books”</code> is now the base path and the <code>getBookThumbnails</code> method is associated with the endpoint <code>“/books/thumbnails”</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VirtualLibrary</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="meta">@RequestMapping(value = &quot;/thumbnails&quot;, method = RequestMethod.GET)</span></span><br><span class="line">  <span class="keyword">public</span> String[] getBookThumbnails() &#123;</span><br><span class="line">    <span class="comment">//returns thumbnails for all available titles</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Note: When specifying a selection from the <code>RequestMethod</code> enum, be sure to import the annotation using:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">org.springframework.web.bind.annotation.RequestMethod</span><br></pre></td></tr></table></figure>

<p>Parameters of <code>@RequestMapping</code> can be removed if it is the endpoint of the GET request to the base path:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/superHeroes&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SuperHeroController</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@RequestMapping</span></span><br><span class="line">    <span class="keyword">public</span> Iterable&lt;SuperHero&gt; <span class="title function_">getSuperHeros</span><span class="params">()</span> &#123;</span><br><span class="line">        Iterable&lt;SuperHero&gt; superHeroes = superHeroRepository.findAll();</span><br><span class="line">        <span class="keyword">return</span> superHeroes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-Using-HTTP-Method-Annotations"><a href="#3-Using-HTTP-Method-Annotations" class="headerlink" title="3. Using HTTP Method Annotations"></a>3. Using HTTP Method Annotations</h3><p>In addition to using the method argument of the <code>@RequestMapping</code> annotation, Spring also offers several annotations which can be used to map to common request types. These annotations perform the same function as <code>@RequestMapping</code>. As shown in the example below, using the path and method argument of the <code>@RequestMapping</code> annotation is equivalent to just passing in a path to one of the HTTP method annotations. The four common HTTP methods we use to interact with resources are <code>GET</code>, <code>POST</code>, <code>PUT</code>, and <code>DELETE</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/about&quot;, method = RequestMethod.GET)</span></span><br></pre></td></tr></table></figure>
<p>…is equivalent to…</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/about&quot;)</span></span><br></pre></td></tr></table></figure>
<p>See below for a table of helper methods and the requests to which they map.</p>
<table>
<thead>
<tr>
<th>HTTP Method Annotation</th>
<th>Usage</th>
</tr>
</thead>
<tbody><tr>
<td>@GetMapping</td>
<td>Used to specify GET requests to retrieve resources</td>
</tr>
<tr>
<td>@PostMapping</td>
<td>Used to specify POST requests to create new resources</td>
</tr>
<tr>
<td>@PutMapping</td>
<td>Used to specify PUT requests to update existing resources</td>
</tr>
<tr>
<td>@DeleteMapping</td>
<td>Used to specify DELETE requests to remove specific resources</td>
</tr>
</tbody></table>
<p>Parameters of <code>@GetMapping</code> can be removed if it is the endpoint of the GET request to the base path:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/superHeroes&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SuperHeroController</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@GetMapping()</span></span><br><span class="line">    <span class="keyword">public</span> Iterable&lt;SuperHero&gt; <span class="title function_">getSuperHeros</span><span class="params">()</span> &#123;</span><br><span class="line">        Iterable&lt;SuperHero&gt; superHeroes = superHeroRepository.findAll();</span><br><span class="line">    <span class="keyword">return</span> superHeroes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-Using-Query-Parameters"><a href="#4-Using-Query-Parameters" class="headerlink" title="4. Using Query Parameters"></a>4. Using Query Parameters</h3><p>When users need to pass data to the server, the term we use to describe the process is called binding. When the user submits their request, we need a way to bind their entry to the endpoint that will provide the response. </p>
<p><code>@RequestParam</code> is an annotation that can be used at the <em>method</em> parameter level. It allows us to parse query parameters and capture those parameters as method arguments. We also have the option of defining a default value for the method argument in case a value is not received from the client.</p>
<p>In this example, let’s say the user submits their request for a book with 2 authors and a publishing year of 1995.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">libraryapp.com/book?author_count=2&amp;published_year=1995</span><br></pre></td></tr></table></figure>
<p>The <code>author_count</code> and <code>published_year</code> values would map to the method parameters as follows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/book&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Book <span class="title function_">isBookAvailable</span><span class="params">(<span class="meta">@RequestParam</span> <span class="type">int</span> author_count, <span class="meta">@RequestParam</span> <span class="type">int</span> published_year)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> books.find(author_count, published_year);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-Using-Template-Path-Variables"><a href="#5-Using-Template-Path-Variables" class="headerlink" title="5. Using Template Path Variables"></a>5. Using Template Path Variables</h3><p><code>@PathVariable</code> maps template variables in the request URI directly to a method’s parameters. For example, we could define a template path:</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/books/</span>&#123;id&#125;</span><br></pre></td></tr></table></figure>
<p>and use the URI</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">localhost</span>:<span class="number">4001</span>/books/<span class="number">28937</span></span><br></pre></td></tr></table></figure>
<p>to pass the path variable “28937” to a method’s id parameter. On the server side, we would have an endpoint that looks up books by ID as follows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Book <span class="title function_">isBookAvailable</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> id)</span>  &#123;</span><br><span class="line">  <span class="keyword">return</span> book.findByID(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>@RequestParam</code> captures the id included in the URI <code>/books?id=28937</code>, and <code>@PathVariable</code> captures the id included in the URI <code>/books/28937</code> as long as the path includes the <code>&#123;id&#125;</code> variable in <code>books/&#123;id&#125;</code>.</p>
<h3 id="6-Deserializing-into-Objects"><a href="#6-Deserializing-into-Objects" class="headerlink" title="6. Deserializing into Objects"></a>6. Deserializing into Objects</h3><p>We can use the <code>@RequestBody</code> annotation on the parameters of a method. When used, this annotation allows Spring to automatically deserialize the HTTP request body into a Java object which can be bound to the method and further processed. The objects can be created by matching attributes with values in JSON.</p>
<p>For example, we can rewrite the previous book example with <code>@RequestBody</code> if we define a <code>Book</code> object:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> authorCount;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> publishedYear;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The new controller will have a single <code>Book</code> parameter instead of separate <code>authorCount</code> and <code>publishedYear</code> parameters:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/book&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Book <span class="title function_">isBookAvailable</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> book.find(book.authorCount, book.publishedYear);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>It also works for a POST request like this:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X POST -d <span class="string">&quot;&#123;\&quot;authorCount\&quot;: \&quot;2\&quot;, \&quot;publishedYear\&quot;: \&quot;1995\&quot;&#125;&quot;</span> localhost:4001/book/addNew -H <span class="string">&quot;Content-Type: application/json&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="7-HTTP-Status-Code"><a href="#7-HTTP-Status-Code" class="headerlink" title="7. HTTP Status Code"></a>7. HTTP Status Code</h3><p>The Spring framework uses an HttpStatus enumeration (enum) to represent different HTTP status codes. </p>
<p>The actual constants in the <code>HttpStatus</code> enum loosely match the status code name, e.g. a <code>201 Created code</code> corresponds to <code>HttpStatus.CREATED</code> and a <code>400 Bad Request code</code> corresponds to <code>HttpStatus.BAD_REQUEST</code>. </p>
<h3 id="8-Fine-Tuning-Responses-with-ResponseStatus"><a href="#8-Fine-Tuning-Responses-with-ResponseStatus" class="headerlink" title="8. Fine Tuning Responses with @ResponseStatus"></a>8. Fine Tuning Responses with <code>@ResponseStatus</code></h3><p>The <code>@ResponseStatus</code> annotation can be applied to methods to help with fine-tuning HTTP responses. The annotation accepts parameters for the status <code>code</code> and <code>reason</code>.</p>
<p>This can be used to customize messages in both failure and success responses. Consider the scenario when an admin adds a new book to the collection. When they enter all of the required information and click submit, we can use <code>@ResponseStatus</code> to return an HTTP status showing the request was successful and a reason indicating the entry was created:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PutMapping(path=&quot;/book&quot;)</span></span><br><span class="line"><span class="meta">@ResponseStatus(code = HttpStatus.CREATED, reason = &quot;Book was successfully added&quot;)</span></span><br><span class="line"><span class="keyword">public</span> string <span class="title function_">addNewBook</span><span class="params">(<span class="meta">@RequestParam</span> string title)</span> &#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>When used for an exception class:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ResponseStatus(value = HttpStatus.BAD_REQUEST, reason = &quot;Bad Request. Please try again.&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InvalidEntryException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InvalidEntryException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/testException&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInvalidEntryException</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidEntryException</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="9-Exception-Handling-in-Spring"><a href="#9-Exception-Handling-in-Spring" class="headerlink" title="9. Exception Handling in Spring"></a>9. Exception Handling in Spring</h3><p>If an error is encountered, we can use <code>ResponseStatusException</code> to exert even more control over the exception handling process.</p>
<p><code>ResponseStatusException</code> accepts up to 3 arguments:</p>
<ul>
<li><code>HttpStatus code</code></li>
<li><code>String reason</code></li>
<li><code>Throwable cause</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Book <span class="title function_">isBookAvailable</span><span class="params">(<span class="meta">@PathVariable</span> string id)</span> </span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (id.isNumeric()) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">id_int</span> <span class="operator">=</span> Integer.parseInt(id)</span><br><span class="line">    <span class="keyword">return</span> book.findByID(id_int)</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ResponseStatusException</span>(HttpStatus.BAD_REQUEST, <span class="string">&quot;The ID contained a non-numerical value.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Both the <code>ResponseStatusException</code> class and <code>@ResponseStatus</code> annotation can be used to specify an HTTP status code. <code>ResponseStatusException</code> is used to create specific responses dynamically, while a <code>@ResponseStatus</code> determines the status code for any response returned by the method.</p>
<h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>With the annotations, we can now:</p>
<ul>
<li>Map HTTP requests to controllers and methods (<code>@RestController</code> and <code>@RequestMapping</code>)</li>
<li>Specify a path attribute to become a base path (<code>@RequestMapping</code> at the class level)</li>
<li>Declare request types using HTTP method annotations (<code>@GetMapping</code>, <code>@PostMapping</code>, <code>@PutMapping</code>, and <code>@DeleteMapping</code>)</li>
<li>Access request parameters in a method (<code>@RequestParam</code>)</li>
<li>Bind data using template variables (<code>@PathVariable</code>)</li>
<li>Fine-tune the status code returned by a method (<code>@ResponseStatus</code>)</li>
</ul>
<p>All of these annotations and <code>ResponseStatusException</code> are imported from the <code>org.springframework.web.bind.annotation</code> package.</p>
<h3 id="Articles"><a href="#Articles" class="headerlink" title="Articles"></a>Articles</h3><p><a href="https://www.codecademy.com/learn/learn-spring/modules/spring-controllers/cheatsheet">Spring Controllers</a><br><a href="https://github.com/spring-projects/spring-framework/blob/main/spring-web/src/main/java/org/springframework/http/HttpStatus.java">The list of HttpStatus values</a></p>
<h3 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h3><p><a href="https://www.codecademy.com/learn/learn-spring">Learn Spring</a></p>
]]></content>
      <categories>
        <category>Study Notes</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Study Notes of Spring (4) - Spring Boot</title>
    <url>/2023/02/04/Notes-of-Spring-4/</url>
    <content><![CDATA[<p><em>Spring Boot</em> is a collection of tools that extends the Spring framework and makes it easier to build applications quickly.</p>
<p>When the app is run, this <em>controller</em> class will be registered as a <em>bean</em> and used to define routes available in the API.</p>
<span id="more"></span>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@RequestMapping(&quot;/restaurants&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestaurantController</span> &#123; ... &#125;</span><br></pre></td></tr></table></figure>
<p>The app is doing a lot more than running the controller code:</p>
<ul>
<li>A <code>Spring Data JPA</code> repository is bootstrapped</li>
<li>A <code>Tomcat</code> server is initialized</li>
<li>A <code>WebApplicationContext</code> is initialized</li>
<li>An <code>H2Dialect</code> is used</li>
<li>An option to <code>Explicitly configure spring.jpa.open-in-view</code></li>
<li>The Tomcat server is started on port(s): <code>4000</code></li>
</ul>
<h3 id="1-“Starters”"><a href="#1-“Starters”" class="headerlink" title="1. “Starters”"></a>1. “Starters”</h3><p>In the <code>pom.xml</code> of the Spring Boot application, see the <code>spring-boot-start-jpa</code> and <code>spring-boot-starter-web</code> dependencies:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>These are called <a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#using.build-systems.starters">Spring Boot “starters”</a>. Each one represents a set of <em>dependencies</em> with which to run the application. </p>
<p>The <code>spring-boot-starter-web</code> dependency instructs Spring Boot to configure Tomcat for running a server, and configure Spring MVC (Model-View-Controller) for routing HTTP requests. </p>
<p><code>spring-boot-starter-data-jpa</code> sets up <em>JPA</em> and <em>Hibernate</em> for database access.</p>
<p>There are other starters like <code>spring-boot-starter-test</code> which includes common testing libraries such as <code>JUnit Jupiter</code>, <code>Hamcrest</code>, and <code>Mockito</code>; and <code>spring-boot-starter-parent</code>, which provides the <code>spring-boot:run</code> command.</p>
<h3 id="2-Auto-Configuration"><a href="#2-Auto-Configuration" class="headerlink" title="2. Auto-Configuration"></a>2. Auto-Configuration</h3><p>See the <code>SpringApplication</code> class and <code>@SpringBootApplication</code> annotation from the <code>org.springframework.boot</code> package:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codecademy.springcap;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringCapstoneApplication</span> &#123;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    SpringApplication.run(SpringCapstoneApplication.class, args);</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="SpringApplication"><a href="#SpringApplication" class="headerlink" title="SpringApplication"></a>SpringApplication</h4><p>The <code>SpringApplication</code> class is responsible for starting up the IoC container:</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="params">...</span><span class="params">...</span>.. Initializing Spring embedded WebApplicationContext</span><br></pre></td></tr></table></figure>
<p>In Java, the IoC container is represented by an application context. It receives beans and enables Spring to inject them into other components. </p>
<p>In Java, the application context appears as a <code>ApplicationContext</code> interface. In the above line, the app is using the class <code>WebApplicationContext</code>, a web-specific implementation of <code>ApplicationContext</code>.</p>
<h4 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h4><p><code>@Configuration</code> and <code>@ComponentScan</code> are from the Spring framework. <code>@EnableAutoConfiguration</code> is from Spring Boot.</p>
<blockquote>
<p><code>@EnableAutoConfiguration</code> … tells Spring Boot to “guess” how you want to configure Spring, based on the jar dependencies that you have added. Since <code>spring-boot-starter-web</code> added Tomcat and Spring MVC, the auto-configuration assumes that you are developing a web application and sets up Spring accordingly. </p>
</blockquote>
<p>Spring Boot knows to bootstrap <code>JPA</code> repositories, start a <code>Tomcat</code> server, and use an <code>H2</code> dialect because <code>spring-boot-starter-jpa</code>, <code>spring-boot-starter-web</code>, and <code>h2</code> are listed as dependencies in the <code>pom.xml</code>.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.h2database<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-Custom-Configuration-with-application-properties"><a href="#3-Custom-Configuration-with-application-properties" class="headerlink" title="3. Custom Configuration with application.properties"></a>3. Custom Configuration with <code>application.properties</code></h3><p>When starting the application with <code>./mvnw spring-boot:run</code>, Spring Boot checks for additional configuration instructions in the <code>application.properties</code> file.</p>
<p>For examples,<br>override the default 8080 port:</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">4000</span></span><br></pre></td></tr></table></figure>
<p>disable JPA warnings:</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.jpa.open-in-view</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure>
<p>customize the level of logging:</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging.level.org.springframework</span>=<span class="string">DEBUG</span></span><br></pre></td></tr></table></figure>
<p>customize the database behavior to use local files for storage:</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:h2:file:~/springcap</span></span><br></pre></td></tr></table></figure>
<p>A longer list of <code>application properties</code> are available in the <a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#appendix.application-properties">Spring docs</a></p>
<h3 id="4-Distribution-of-the-Application"><a href="#4-Distribution-of-the-Application" class="headerlink" title="4. Distribution of the Application"></a>4. Distribution of the Application</h3><p>Java applications are often packaged into an executable file called a <code>jar</code>. Spring Boot provides an easy way to bundle the code and dependencies into a <code>jar</code> via the <code>spring-boot-maven-plugin</code> dependency:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>This is included by default when we download a project from <a href="https://start.spring.io/">start.spring.io</a></p>
<p>Spring Boot bundles the code and dependencies into a <code>jar</code> for running applications to the cloud.</p>
<h3 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h3><p><a href="https://www.codecademy.com/learn/learn-spring">Learn Spring</a></p>
]]></content>
      <categories>
        <category>Study Notes</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Study Notes of Spring (5) - Spring Data JPA</title>
    <url>/2023/02/05/Notes-of-Spring-5/</url>
    <content><![CDATA[<h3 id="1-Spring-Data-JPA-and-JDBC"><a href="#1-Spring-Data-JPA-and-JDBC" class="headerlink" title="1. Spring Data JPA and JDBC"></a>1. Spring Data JPA and JDBC</h3><p><code>Spring Data JPA</code> wraps around an implementation of the <code>JPA</code> to make it a seamless process to integrate a database into the Spring Boot Application.</p>
<p><code>JPA</code> stands for <em>Java Persistence API</em>, which is the underlying standard used to translate objects from Java into queries that can be sent directly to the underlying database.</p>
<span id="more"></span>
<p><code>JPA</code> does this by wrapping around another standard, <code>JDBC</code> (Java Database Connectivity). This is the layer that sends raw database queries to the underlying database.</p>
<p><code>JPA</code> is a standard that can be implemented by an <code>ORM</code> (object-relational mapping). </p>
<p>Application developers implements the required interactions with objects and the <code>ORM</code> maps them into database queries against the underlying database relations.</p>
<p>For example, instead of defining a database table in SQL:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> plants (</span><br><span class="line">  name <span class="type">varchar</span>,</span><br><span class="line">  type <span class="type">varchar</span>,</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>we can define a Java class:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Plant</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> string name;</span><br><span class="line">  <span class="keyword">private</span> string type;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Instead of writing SQL queries:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name</span><br><span class="line"><span class="keyword">FROM</span> plants</span><br><span class="line"><span class="keyword">WHERE</span> name<span class="operator">=</span><span class="string">&#x27;ficus&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>we can use Java methods:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Plant</span> <span class="variable">ficusName</span> <span class="operator">=</span> plantRepository.findByName(<span class="string">&#x27;ficus&#x27;</span>).name;</span><br></pre></td></tr></table></figure>

<h4 id="Hibernate-an-ORM"><a href="#Hibernate-an-ORM" class="headerlink" title="Hibernate, an ORM"></a>Hibernate, an ORM</h4><p>The <code>ORM</code> most commonly used with Spring Data JPA is called <code>Hibernate</code>, and it comes packaged along with Spring Data JPA as part of the dependency, <code>spring-boot-starter-data-jpa</code>.</p>
<h3 id="2-Database-Types"><a href="#2-Database-Types" class="headerlink" title="2. Database Types"></a>2. Database Types</h3><p>Spring Data JPA supports many different kinds of databases right out of the box, such as MySQL and PostgreSQL. </p>
<p>If the underlying database technology changes, the application developer would update the configuration to point to the new database, and the code may remain the same.</p>
<p>As long as appropriate <code>JDBC</code> drivers exist for a given database, implementations of the <code>JPA</code> will be able to translate Java objects to the right SQL queries.</p>
<h4 id="H2-a-Database-Type"><a href="#H2-a-Database-Type" class="headerlink" title="H2, a Database Type"></a>H2, a Database Type</h4><p><code>H2</code> is a relational database written in Java. It can run on the same kind of infrastructure as the application and can run entirely <em>in-memory</em>. </p>
<p><em>Infrastructure</em> is the generic term for the machines that applications and databases run on.</p>
<p>To connect to an embedded <code>H2</code> database using Spring Data JPA, update the <code>application.properties</code>:</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:h2:~/plants.db</span></span><br><span class="line"><span class="attr">spring.datasource.driverClassName</span>=<span class="string">org.h2.Driver</span></span><br></pre></td></tr></table></figure>
<p>This example adds a <code>plants.db</code> database, which might be used by a botanist to track their inventory.</p>
<h3 id="3-Conclusion"><a href="#3-Conclusion" class="headerlink" title="3. Conclusion"></a>3. Conclusion</h3><p>Spring Data JPA simplifies the setup and querying of a database.</p>
<ul>
<li>Spring Data JPA is available in the <code>spring-boot-starter-data-jpa</code> dependency.</li>
<li>Spring Data JPA is an implementation of the <code>Java Persistence API</code>, or <code>JPA</code>.</li>
<li>The object-relational mapping tool, or <code>ORM</code>, provided by Spring Data JPA is called <code>Hibernate</code>. It provides Java methods that can be translated into SQL queries:<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Plant</span> <span class="variable">ficusName</span> <span class="operator">=</span> plantRepository.findByName(<span class="string">&#x27;ficus&#x27;</span>).name;</span><br></pre></td></tr></table></figure></li>
<li>The standard that defines the relationship between Java code and SQL queries is called Java Database Connectivity, or <code>JDBC</code>.</li>
<li>There are many different databases that Spring Data JPA can work with. <code>H2</code> is one of those. It differs from the other databases in that it can run in-memory, meaning that developers don’t have to set up and connect to a separate database to get their app working.</li>
<li>The database type is specified in <code>application.properties</code></li>
</ul>
<h3 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h3><p><a href="https://www.codecademy.com/learn/learn-spring">Learn Spring</a></p>
]]></content>
      <categories>
        <category>Study Notes</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Study Notes of Spring (6) - CRUD with JPA</title>
    <url>/2023/02/05/Notes-of-Spring-6/</url>
    <content><![CDATA[<h3 id="1-Settings"><a href="#1-Settings" class="headerlink" title="1. Settings"></a>1. Settings</h3><p>Add the <code>spring-boot-starter-data-jpa</code> dependency in <code>pom.xml</code>:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>To use the embedded <code>H2</code> database, add the dependency to <code>pom.xml</code>:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.h2database<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>To connect the embedded <code>H2</code> database with the application, add the correct properties to the <code>application.properties</code>:</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:h2:~/plants.db</span></span><br><span class="line"><span class="attr">spring.datasource.driverClassName</span>=<span class="string">org.h2.Driver</span></span><br></pre></td></tr></table></figure>
<p>This will tell Spring: where the database is stored, what library it should use to “translate” the Java objects into SQL queries that <code>H2</code> can understand.</p>
<h3 id="2-Model"><a href="#2-Model" class="headerlink" title="2. Model"></a>2. Model</h3><p>Spring Data JPA is an abstraction layer that allows developers to interact with objects in code rather than SQL queries. </p>
<p>These objects, are referred to as <em>models</em> (or <em>entities</em>). </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.persistence.Entity;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Column;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Table;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name=&quot;PEOPLE&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Column(name=&quot;NAME&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Column(name=&quot;AGE&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Column(name=&quot;EYE_COLOR&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String eyeColor;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>A model corresponds to a database table, and a field in a model corresponds to a column in that table. </p>
<p>The annotations come from the JPA library, which comes along with the <code>spring-boot-starter-data-jpa</code> dependency:</p>
<ul>
<li><code>@Entity</code>: tells ORM that this model will be used to represent a <em>table</em> or <em>relation</em> in the database</li>
<li><code>@Table</code>: tells ORM the table name in the underlying database that this model corresponds to. </li>
<li><code>@Id</code>: tells ORM that this field (<code>id</code>) will be used to uniquely identify a single entry in the table.</li>
<li><code>@GeneratedValue</code>: tells ORM that this field should be “auto-generated” by the database, to guarantee that the ID will always be unique.</li>
<li><code>@Column</code>: tells ORM the column in the underlying table that the annotated field corresponds to.</li>
</ul>
<p>Spring Data JPA sends instructions to the <code>Hibernate</code> ORM to execute the correct SQL statements.</p>
<p>We additionally need to add <code>getter</code> and <code>setter</code> methods for every field to ensure that the ORM can access and modify fields in the model as required:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Column(name=&quot;AGE&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.age;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-Repository"><a href="#3-Repository" class="headerlink" title="3. Repository"></a>3. Repository</h3><p>A repository is a data access and manipulation layer that wraps around the data model. </p>
<p>Spring Data JPA uses repositories to enable the interaction between the model and the database, and it comes with the <code>CrudRepository</code> repository interface that gives developers full <em>CRUD</em> functionality for the model: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.data.repository.CrudRepository;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.codecademy.people.entities.Person;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// creating an extension of the CrudRepository that can manage our Person model</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PersonRepository</span> <span class="keyword">extends</span> <span class="title class_">CrudRepository</span>&lt;Person, Integer&gt; &#123;</span><br><span class="line">  <span class="comment">// no method declarations are required! </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>In this example, the new interface extends the <code>CrudRepository</code> interface, and parameterize it with the <code>Person</code> model and the type of its ID field, <code>Integer</code>.</p>
<p>The first type parameter is used to ensure that the <code>PersonRepository</code> knows it is responsible for managing instances of the <code>Person</code> object. The second type parameter is used to tell the repository the type of the ID field, which enables methods like <code>.findById</code>.</p>
<p>Some methods that the <code>CrudRepository</code> interface offers us to enable CRUD functionality are:</p>
<ul>
<li><code>.findById(Integer id)</code>: query the database to find an instance of the model by its ID field</li>
<li><code>.findAll()</code>: retrieve ALL the entries in the database for a given model</li>
<li><code>.save(Object p)</code>: create AND modify instances of the model in the database</li>
<li><code>.delete(Object p)</code>: delete instances of the model from the database</li>
</ul>
<h3 id="4-Connect-the-Repository-to-a-Controller"><a href="#4-Connect-the-Repository-to-a-Controller" class="headerlink" title="4. Connect the Repository to a Controller"></a>4. Connect the Repository to a Controller</h3><p>A <code>RestController</code> is used as the layer of the application that takes requests from the user and accordingly sends commands to the repository or data access layer to accomplish what task the user requested in their <code>REST</code> call.</p>
<p>Since the extension of the <code>CrudRepository</code> will be used in the “Spring context,” it is implicitly a bean.</p>
<p>The repository must be a dependency of the controller, and we can make the <em>repository bean</em> available to the controller class using dependency injection:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.codecademy.people.repositories.PersonRepository;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonController</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> PersonRepository personRepository;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">PersonController</span><span class="params">(<span class="keyword">final</span> PersonRepository personRepository)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.personRepository = personRepository;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ... all REST endpoint mappings</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>In this example, to make the <code>PersonRepository</code> available to the <code>PersonController</code> as a dependency:</p>
<ol>
<li>Import the <code>PersonRepository</code> from the correct package</li>
<li>Add the <code>PersonRepository</code> as a field in the <code>PersonController</code> class</li>
<li>Assign the field with <code>PersonRepository</code> in the constructor</li>
</ol>
<h3 id="5-Make-Queries"><a href="#5-Make-Queries" class="headerlink" title="5. Make Queries"></a>5. Make Queries</h3><h4 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h4><p>A <code>GET</code> request triggers repository methods like <code>.findAll()</code> or <code>.findById(Integer id)</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/people&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Iterable&lt;Person&gt; <span class="title function_">getAllPeople</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.personRepository.findAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>.findAll()</code> method offered by the <code>CrudRepository</code> returns an <code>Iterable</code>, with a type parameter <code>Person</code>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/people/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Optional&lt;Person&gt; <span class="title function_">getPersonById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.personRepository.findById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>.findById(Integer id)</code> returns an <code>Optional&lt;Person&gt;</code>. In case a user may pass an ID that does not exist in the database, the <code>Optional</code> type from Java will allow the response to return <code>null</code> in the response body.</p>
<h4 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h4><p>A <code>POST</code> request is used to create new information in the database. In <code>CrudRepository</code>, the <code>.save()</code> method accepts the model as a parameter, and uses the column annotations as its basis when using the ORM to create the underlying SQL <code>INSERT</code> statement.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/people&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Person <span class="title function_">createNewPerson</span><span class="params">(<span class="meta">@RequestBody</span> Person person)</span> &#123;</span><br><span class="line">  <span class="type">Person</span> <span class="variable">newPerson</span> <span class="operator">=</span> <span class="built_in">this</span>.personRepository.save(person);</span><br><span class="line">  <span class="keyword">return</span> newPerson;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>In this example, the end user of the API would pass in a <code>Person</code> using the body of their <code>POST</code> request. </p>
<p>The <code>.save</code> method returns a <code>Person</code> and it will have an <code>id</code> field, generated by means of the <code>@GeneratedValue</code> annotation from the model definition.</p>
<h4 id="PUT"><a href="#PUT" class="headerlink" title="PUT"></a>PUT</h4><p>The <code>.save</code> method from the <code>CrudRepository</code> interface can also be used for updating existing entries.</p>
<p>A common flow is to fetch an entry from the database by its ID, set new attribute value of the entry, and then call <code>.save</code> to save the entry:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PutMapping(&quot;/people/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Person <span class="title function_">updatePerson</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id, <span class="meta">@RequestBody</span> Person p)</span> &#123;</span><br><span class="line">  Optional&lt;Person&gt; personToUpdateOptional = <span class="built_in">this</span>.personRepository.findById(id);</span><br><span class="line">  <span class="keyword">if</span> (!personToUpdateOptional.isPresent()) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Since isPresent() was true, we can .get() the Person object out of the Optional</span></span><br><span class="line">  <span class="type">Person</span> <span class="variable">personToUpdate</span> <span class="operator">=</span> personToUpdateOptional.get();</span><br><span class="line">  <span class="keyword">if</span> (p.getName() != <span class="literal">null</span>) &#123;</span><br><span class="line">    personToUpdate.setName(p.getName());</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">  <span class="type">Person</span> <span class="variable">updatedPerson</span> <span class="operator">=</span> <span class="built_in">this</span>.personRepository.save(personToUpdate);</span><br><span class="line">  <span class="keyword">return</span> updatedPerson;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The <code>Person</code> object passed in the request body does not need to have ALL the fields that a <code>Person</code> has. When Spring Boot converts the request body to a Person object, it sets any fields that are missing to <code>null</code>. </p>
<p>Update a field of the target database entry ONLY IF the corresponding field in the request body object was not <code>null</code>.</p>
<h4 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h4><p>The <code>CrudRepository</code> offers a <code>delete</code> method that accepts the instance of the model:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping(&quot;/people/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Person <span class="title function_">deletePerson</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;</span><br><span class="line">  Optional&lt;Person&gt; personToDeleteOptional = <span class="built_in">this</span>.personRepository.findById(id);</span><br><span class="line">  <span class="keyword">if</span> (!personToDeleteOptional.isPresent()) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">Person</span> <span class="variable">personToDelete</span> <span class="operator">=</span> personToDeleteOptional.get();</span><br><span class="line">  <span class="built_in">this</span>.personRepository.delete(personToDelete);</span><br><span class="line">  <span class="keyword">return</span> personToDelete;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The <code>.delete</code> method does not return anything.</p>
<p><code>pipe</code> the output of <code>curl</code> into <code>json_pp</code> to make it easier to read:</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">curl localhost:<span class="number">4001</span>/plants <span class="string">| json_pp</span></span><br></pre></td></tr></table></figure>

<h3 id="6-Custom-Queries"><a href="#6-Custom-Queries" class="headerlink" title="6. Custom Queries"></a>6. Custom Queries</h3><p>Custom filter queries can be added as methods to the interface extension of the <code>CrudRepository</code> with properly formatted name, and they don’t need to be implemented.</p>
<p>The rules for the method names are detailed in the <a href="https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods.query-creation">Spring documentation</a>.</p>
<p>For example, to query people with a certain eye color:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PersonRepository</span> <span class="keyword">extends</span> <span class="title class_">CrudRepository</span>&lt;Person, Integer&gt; &#123;</span><br><span class="line">  <span class="comment">// this declaration is all we need:</span></span><br><span class="line">  List&lt;Person&gt; <span class="title function_">findByEyeColor</span><span class="params">(String eyeColor)</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Based on the method name (<code>findByEyeColor</code>), Spring Data JPA will automatically generate the “implementation” of the method when the application is compiled. </p>
<p>To use the newly defined <code>findByEyeColor</code> method, we could implement a new <code>GET /people/search</code> endpoint in the <code>PersonController</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/people/search&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Person&gt; <span class="title function_">searchPeople</span><span class="params">(</span></span><br><span class="line"><span class="params">  <span class="meta">@RequestParam(name = &quot;eyeColor&quot;, required = false)</span> String eyeColor)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (eyeColor != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.personRepository.findByEyeColor(eyeColor)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>A request to this endpoint would look like:</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">curl localhost:<span class="number">4001</span><span class="regexp">/people/</span>search?eyeColor=brown</span><br></pre></td></tr></table></figure>

<p>Notice the <code>required = false</code> inside the <code>@RequestParam</code> annotation, it allows us to optionally add more query parameters if the user would like to search by a different field value instead. </p>
<p>For example, add another method to the <code>PersonRepository</code> interface:</p>
<figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="built_in">List</span><span class="operator">&lt;</span><span class="variable">Person</span><span class="operator">&gt;</span> <span class="variable">findByAgeLessThan</span><span class="punctuation">(</span><span class="built_in">Integer</span> <span class="variable">age</span><span class="punctuation">)</span><span class="operator">;</span></span><br></pre></td></tr></table></figure>
<p>and update the <code>searchPeople</code> method accordingly:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/people/search&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Person&gt; <span class="title function_">searchPeople</span><span class="params">(</span></span><br><span class="line"><span class="params">  <span class="meta">@RequestParam(name = &quot;eyeColor&quot;, required = false)</span> String eyeColor,</span></span><br><span class="line"><span class="params">  <span class="meta">@RequestParam(name = &quot;maxAge&quot;, required = false)</span> Integer maxAge)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (eyeColor != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.personRepository.findByEyeColor(eyeColor)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (maxAge != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.personRepository.findByAgeLessThan(maxAge);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Example using <code>And</code> queries:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Person&gt; <span class="title function_">findByEyeColorAndAgeLessThan</span><span class="params">(String eyeColor, Integer age)</span>;</span><br></pre></td></tr></table></figure>
<p>The updated <code>searchPeople</code> method would look like:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/people/search&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Person&gt; <span class="title function_">searchPeople</span><span class="params">(</span></span><br><span class="line"><span class="params">  <span class="meta">@RequestParam(name = &quot;eyeColor&quot;, required = false)</span> String eyeColor,</span></span><br><span class="line"><span class="params">  <span class="meta">@RequestParam(name = &quot;maxAge&quot;, required = false)</span> Integer maxAge)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (eyeColor != <span class="literal">null</span> &amp;&amp; maxAge != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.personRepository.findByEyeColorAndAgeLessThan(eyeColor, maxAge);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (eyeColor != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.personRepository.findByEyeColor(eyeColor);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (maxAge != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.personRepository.findByAgeLessThan(maxAge);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The naming of the method declarations is extremely important. The rules for the method names are detailed in the <a href="https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods.query-creation">Spring documentation</a>.</p>
<h3 id="Articles"><a href="#Articles" class="headerlink" title="Articles"></a>Articles</h3><p><a href="https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods.query-creation">Spring documentation</a><br><a href="https://docs.oracle.com/javaee/7/api/javax/persistence/package-summary.html">Annotation Types Summary</a><br><a href="https://www.baeldung.com/spring-boot-h2-database">Spring Boot With H2 Database</a></p>
<h3 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h3><p><a href="https://www.codecademy.com/learn/learn-spring">Learn Spring</a></p>
]]></content>
      <categories>
        <category>Study Notes</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Build a Website with Flask - Art Style Transfer</title>
    <url>/2020/01/14/Project-Art-Style-Transfer/</url>
    <content><![CDATA[<h4 id="🌟-Screenshots"><a href="#🌟-Screenshots" class="headerlink" title="🌟 Screenshots"></a>🌟 Screenshots</h4><p><img data-src="/images/ast/ast_home1.png"></p>
<span id="more"></span>  
<p style="text-align: center; border-bottom: 1px solid #ddd;"> Home Page </p>  

<p><img data-src="/images/ast/ast_home2.png"></p>
<p style="text-align: center; border-bottom: 1px solid #ddd;"> Home Page </p>  

<p><img data-src="/images/ast/ast_starry.png"></p>
<p style="text-align: center; border-bottom: 1px solid #ddd;"> Example: transfer to <i>Starry Night</i> style </p>  

<p><img data-src="/images/ast/ast_wave.png"></p>
<p style="text-align: center; border-bottom: 1px solid #ddd;"> Example: transfer to <i>The Great Wave off Kanagawa</i> style </p>

<p><img data-src="/images/ast/ast_mosaic.png"></p>
<p style="text-align: center; border-bottom: 1px solid #ddd;"> Example: transfer to <i>Mosaic</i> style </p>

<p><img data-src="/images/ast/ast_cubist.png"></p>
<p style="text-align: center; border-bottom: 1px solid #ddd;"> Example: transfer to <i>Cubism</i> style </p>

<p><img data-src="/images/ast/ast_udine.png"></p>
<p style="text-align: center; border-bottom: 1px solid #ddd;"> Example: transfer to <i>Udnie</i> style </p>

<p><img data-src="/images/ast/ast_feathers.png"></p>
<p style="text-align: center; border-bottom: 1px solid #ddd;"> Example: transfer to <i>Feathers</i> style </p>

<p><img data-src="/images/ast/ast_scream.png"></p>
<p style="text-align: center; border-bottom: 1px solid #ddd;"> Example: transfer to <i>The Scream</i> style </p>

<p><img data-src="/images/ast/ast_album.png"></p>
<p style="text-align: center; border-bottom: 1px solid #ddd;"> Album </p>

<p><img data-src="/images/ast/ast_detail.png"></p>
<p style="text-align: center; border-bottom: 1px solid #ddd;"> Detail of one processed photo </p>

<h4 id="🌟-Built-with"><a href="#🌟-Built-with" class="headerlink" title="🌟 Built with"></a>🌟 Built with</h4><ul>
<li>Python  </li>
<li>Flask  </li>
<li>Amazon Web Services  </li>
<li>Tensorflow</li>
</ul>
<h4 id="🌟-Components"><a href="#🌟-Components" class="headerlink" title="🌟 Components"></a>🌟 Components</h4><ul>
<li>Style Transfer —&gt; Tensorflow (<a href="https://github.com/hzy46/fast-neural-style-tensorflow">Fast Neural Style</a>)  </li>
<li>Database —&gt; <a href="https://aws.amazon.com/dynamodb/">Dynamodb</a>  </li>
<li>Image Storage —&gt; <a href="https://aws.amazon.com/s3/">S3</a></li>
</ul>
<h4 id="🌟-Features"><a href="#🌟-Features" class="headerlink" title="🌟 Features"></a>🌟 Features</h4><p>The user can:</p>
<ul>
<li>Login &#x2F; Sign-up &#x2F; Logout</li>
<li>Choose one of the art styles, upload photos and perform style-transfer to the photos.  </li>
<li>Save processed photos to the album.  </li>
<li>Browse all saved processed photos and also their full-resolution versions in the album.  </li>
<li>Delete one selected photo, or delete all photos at one time in the album.</li>
</ul>
<h4 id="📌-Note"><a href="#📌-Note" class="headerlink" title="📌 Note"></a>📌 Note</h4><ul>
<li>Fast Neural Style models are in reference to <a href="https://github.com/hzy46/fast-neural-style-tensorflow">here</a>  </li>
<li>All images used for style transfer examples were randomly selected from Google Image</li>
</ul>
]]></content>
      <categories>
        <category>Projects</category>
        <category>Website</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Flask</tag>
        <tag>AWS</tag>
        <tag>TensorFlow</tag>
      </tags>
  </entry>
  <entry>
    <title>Build an App on Android - Fakestagram</title>
    <url>/2020/01/15/Project-Fakestagram/</url>
    <content><![CDATA[<h4 id="🌟-Screenshots"><a href="#🌟-Screenshots" class="headerlink" title="🌟 Screenshots"></a>🌟 Screenshots</h4><img data-src="/images/fks/fks_home.png" width="40%"/>

<span id="more"></span>  
<p style="text-align: center; border-bottom: 1px solid #ddd;"> Profile Page - browse photos at the profile page </p>  

<img data-src="/images/fks/fks_global.png" width="40%"/>
<p style="text-align: center; border-bottom: 1px solid #ddd;"> Global Page - browse photos taken by all users at the global page</p>  

<img data-src="/images/fks/fks_other_photo.png" width="40%"/>
<p style="text-align: center; border-bottom: 1px solid #ddd;"> Photo Page - check the detail information of the photo </p>  

<img data-src="/images/fks/fks_other_comment.png" width="40%"/>
<p style="text-align: center; border-bottom: 1px solid #ddd;"> Photo Page - post comments under the photo</p>

<img data-src="/images/fks/fks_other_comment2.png" width="40%"/>
<p style="text-align: center; border-bottom: 1px solid #ddd;"> Photo Page - post comments under the photo</p>

<img data-src="/images/fks/fks_take_photo.png" width="40%"/>
<p style="text-align: center; border-bottom: 1px solid #ddd;"> Take Photo </p>

<img data-src="/images/fks/fks_autotag.png" width="40%"/>
<p style="text-align: center; border-bottom: 1px solid #ddd;"> Take Photo - edit its caption and add tags automatically based on the objects shown in the photo</p>  

<img data-src="/images/fks/fks_self_photo.png" width="40%"/>
<p style="text-align: center; border-bottom: 1px solid #ddd;"> Photo Page - check the detail information of the photo; <br> the "delete" button is enabled if the user browsing the photo is the owner </p>  

<img data-src="/images/fks/fks_personal_comments.png" width="40%"/>
<p style="text-align: center; border-bottom: 1px solid #ddd;"> Photo Page - check updated comments from other users </p>

<h4 id="🌟-Built-with"><a href="#🌟-Built-with" class="headerlink" title="🌟 Built with"></a>🌟 Built with</h4><ul>
<li>Java  </li>
<li>Android Studio  </li>
<li>Google Firebase</li>
</ul>
<h4 id="🌟-Components"><a href="#🌟-Components" class="headerlink" title="🌟 Components"></a>🌟 Components</h4><ul>
<li>Database —&gt; <a href="https://firebase.google.com/">Google Firebase</a></li>
</ul>
<h4 id="🌟-Features"><a href="#🌟-Features" class="headerlink" title="🌟 Features"></a>🌟 Features</h4><p>The user can:</p>
<ul>
<li>Login &#x2F; Sign-up &#x2F; Logout  </li>
<li>Take photos, add the caption and enable auto-tagging to add tags to the photo.</li>
<li>Post photos to both the personal album and global album.    </li>
<li>Browse other users’ photos in the global album.</li>
<li>Browse and write comments under the photo’s page.</li>
<li>Delete their own photos.</li>
</ul>
]]></content>
      <categories>
        <category>Projects</category>
        <category>App</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Android</tag>
        <tag>Google Firebase</tag>
      </tags>
  </entry>
  <entry>
    <title>Build a Chat Program with C - LAN chatroom</title>
    <url>/2020/01/17/Project-LAN-chatroom/</url>
    <content><![CDATA[<h4 id="🌟-Application-Video"><a href="#🌟-Application-Video" class="headerlink" title="🌟 Application Video"></a>🌟 Application Video</h4><iframe src="https://drive.google.com/file/d/1WVjCZBgDepbzkw85w2grPSDVMEgFCST1/preview" width="640" height="480">
</iframe>  
<p style="text-align: center; border-bottom: 0px solid #ddd;"></p>   

<span id="more"></span>  

<h4 id="🌟-Built-with"><a href="#🌟-Built-with" class="headerlink" title="🌟 Built with"></a>🌟 Built with</h4><ul>
<li>C</li>
</ul>
<h4 id="🌟-Components"><a href="#🌟-Components" class="headerlink" title="🌟 Components"></a>🌟 Components</h4><h5 id="Clients"><a href="#Clients" class="headerlink" title="Clients"></a>Clients</h5><ul>
<li>Send requests to the server and get responses from the server  </li>
<li>Multithreading:<br> -detect user’s inputs<br> -receive server’s responses</li>
</ul>
<h5 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h5><ul>
<li>Load and store users, sessions, and invitation information  </li>
<li>Multithreading</li>
<li>Act as the intermediate between clients:<br> -for each newly connected client, create a new thread<br> -receive client’s requests and reply responses in each thread</li>
</ul>
<h4 id="🌟-Features"><a href="#🌟-Features" class="headerlink" title="🌟 Features"></a>🌟 Features</h4><h5 id="Authentication"><a href="#Authentication" class="headerlink" title="Authentication"></a>Authentication</h5><ul>
<li>login &#x2F; logout</li>
</ul>
<h5 id="Session-Chatroom"><a href="#Session-Chatroom" class="headerlink" title="Session (Chatroom)"></a>Session (Chatroom)</h5><ul>
<li>Users can create a new session or join one existing session  </li>
<li>Multiple users can group-chat in one session    </li>
<li>Users can join multiple sessions and chat with multiple groups of people  </li>
<li>Users can leave the session</li>
</ul>
<h5 id="Invitation"><a href="#Invitation" class="headerlink" title="Invitation"></a>Invitation</h5><ul>
<li>Invite other users to join one existing session  </li>
<li>Accept the invitation and join the group chat  </li>
<li>Decline the invitation</li>
</ul>
<h5 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h5><ul>
<li>Users can query the list of online users and valid sessions from the server</li>
</ul>
<h4 id="📌-Note"><a href="#📌-Note" class="headerlink" title="📌 Note"></a>📌 Note</h4><ul>
<li>The example ran clients and the server on the same PC, thus using localhost 127.0.0.1 as the server’s IP address.<br>It can be altered to another IP address if the server ran on a different PC.</li>
</ul>
]]></content>
      <categories>
        <category>Projects</category>
        <category>Program</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>Build a Website with React - Magic Rectangle</title>
    <url>/2020/01/19/Project-Magical-Rectangle/</url>
    <content><![CDATA[<h4 id="🌟-Screenshots"><a href="#🌟-Screenshots" class="headerlink" title="🌟 Screenshots"></a>🌟 Screenshots</h4><p><img data-src="/images/mr/mr_login.png"></p>
<span id="more"></span>  
<p style="text-align: center; border-bottom: 1px solid #ddd;"> Login </p>  

<p><img data-src="/images/mr/mr_home.png"></p>
<p style="text-align: center; border-bottom: 1px solid #ddd;"> Home </p>  

<p><img data-src="/images/mr/mr_album.png"></p>
<p style="text-align: center; border-bottom: 1px solid #ddd;"> Album </p>  

<h4 id="🌟-Built-with"><a href="#🌟-Built-with" class="headerlink" title="🌟 Built with"></a>🌟 Built with</h4><ul>
<li>JavaScript  </li>
<li>React  </li>
<li>Express.js  </li>
<li>OpenCV  </li>
<li>Amazon Web Services</li>
</ul>
<h4 id="🌟-Components"><a href="#🌟-Components" class="headerlink" title="🌟 Components"></a>🌟 Components</h4><ul>
<li>Object Detection —&gt; OpenCV (<a href="https://www.npmjs.com/package/opencv4nodejs/v/4.1.0">opencv4nodejs</a>)  </li>
<li>Database —&gt; <a href="https://aws.amazon.com/dynamodb/">Dynamodb</a>  </li>
<li>Image Storage —&gt; <a href="https://aws.amazon.com/s3/">S3</a>  </li>
<li>Deployment —&gt; <a href="https://aws.amazon.com/ec2/">EC2</a></li>
</ul>
<h4 id="🌟-Features"><a href="#🌟-Features" class="headerlink" title="🌟 Features"></a>🌟 Features</h4><p>The user can:</p>
<ul>
<li>Login &#x2F; Sign-up &#x2F; Logout  </li>
<li>Upload images and get object detection results (where colourful rectangles appear)  </li>
<li>Browse all processed images in the album</li>
</ul>
<h4 id="📌-Note"><a href="#📌-Note" class="headerlink" title="📌 Note"></a>📌 Note</h4><ul>
<li>Objects’ classes that can be detected are listed <a href="https://github.com/justadudewhohacks/opencv4nodejs/blob/master/examples/dnnCocoClassNames.js">here</a>  </li>
<li>All images used for object detection in the example were randomly picked from Google Image  </li>
<li>Original wallpaper was from Google Image and then modified by myself</li>
</ul>
]]></content>
      <categories>
        <category>Projects</category>
        <category>Website</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>AWS</tag>
        <tag>JavaScript</tag>
        <tag>Express.js</tag>
        <tag>OpenCV</tag>
      </tags>
  </entry>
  <entry>
    <title>Build an App on Android - ProTalk</title>
    <url>/2020/01/16/Project-ProTalk/</url>
    <content><![CDATA[<h4 id="🌟-Screenshots"><a href="#🌟-Screenshots" class="headerlink" title="🌟 Screenshots"></a>🌟 Screenshots</h4><img data-src="/images/prt/prt_home.png" width="40%"/>

<span id="more"></span>  
<p style="text-align: center; border-bottom: 1px solid #ddd;"> Home - browse the listing of practice </p>  

<img data-src="/images/prt/prt_history_detail.jpg" width="40%"/>
<p style="text-align: center; border-bottom: 1px solid #ddd;"> History - browse the detail of one practice history </p>  

<img data-src="/images/prt/prt_create_new_talk.png" width="40%"/>
<p style="text-align: center; border-bottom: 1px solid #ddd;"> Create a New Practice </p>  

<img data-src="/images/prt/prt_practice1.png" width="40%"/>
<p style="text-align: center; border-bottom: 1px solid #ddd;"> Practice - enter the practice page </p>  

<img data-src="/images/prt/prt_practice2.png" width="40%"/>
<p style="text-align: center; border-bottom: 1px solid #ddd;"> Practice - set the timer </p>  

<img data-src="/images/prt/prt_practice3.jpg" width="40%"/>
<p style="text-align: center; border-bottom: 1px solid #ddd;"> Practice - start practicing; the timer counts down; speech-to-text works </p>

<img data-src="/images/prt/prt_practice4.jpg" width="40%"/>
<p style="text-align: center; border-bottom: 1px solid #ddd;"> Practice - after pressing the stop button, the "EXTRACT JARGON" button appears </p>

<img data-src="/images/prt/prt_jargons.jpg" width="40%"/>
<p style="text-align: center; border-bottom: 1px solid #ddd;"> Practice Result - show jargon in this speech </p>

<img data-src="/images/prt/prt_jargons_tip1.png" width="40%"/>
<p style="text-align: center; border-bottom: 1px solid #ddd;"> Practice Result - click jargon words in highlighting to get tips </p>

<img data-src="/images/prt/prt_jargons_tip2.png" width="40%"/>
<p style="text-align: center; border-bottom: 1px solid #ddd;"> Practice Result - jargon words in different positions could get different tips </p>

<img data-src="/images/prt/prt_sidebar.png" width="40%"/>
<p style="text-align: center; border-bottom: 1px solid #ddd;"> Side Bar </p>

<img data-src="/images/prt/prt_chart_listing.png" width="40%"/>
<p style="text-align: center; border-bottom: 1px solid #ddd;"> History - browse the listing of practice progress </p>

<img data-src="/images/prt/prt_progress_chart.png" width="40%"/>
<p style="text-align: center; border-bottom: 1px solid #ddd;"> Progress Chart - for one practice</p>

<h4 id="🌟-Built-with"><a href="#🌟-Built-with" class="headerlink" title="🌟 Built with"></a>🌟 Built with</h4><ul>
<li>Java  </li>
<li>Android Studio   </li>
<li>Google Firebase  </li>
<li>Google Cloud Platform</li>
</ul>
<h4 id="🌟-Components"><a href="#🌟-Components" class="headerlink" title="🌟 Components"></a>🌟 Components</h4><ul>
<li>Database —&gt; <a href="https://firebase.google.com/">Google Firebase</a>  </li>
<li>Speech-to-Test —&gt; <a href="https://github.com/GoogleCloudPlatform/android-docs-samples/tree/master/speech/Speech">Google Cloud Speech API</a>  </li>
<li>Token Extraction —&gt; <a href="https://cloud.google.com/natural-language/docs/reference/rest/v1/Token">Google Cloud Platform NLP  API</a></li>
<li>Charts —&gt; <a href="https://github.com/lecho/hellocharts-android">hellocharts</a></li>
</ul>
<h4 id="🌟-Features"><a href="#🌟-Features" class="headerlink" title="🌟 Features"></a>🌟 Features</h4><h5 id="Home-screen"><a href="#Home-screen" class="headerlink" title="Home screen"></a>Home screen</h5><ul>
<li>The Home screen allows users to view their previously saved talks.  </li>
<li>The user may also create a new talk from the Home screen. To do so, they tap the “Create A New Talk” button on the bottom of the screen.  </li>
<li>After tapping “Create and Start”, the app will bring the users to the recording screen, where they can record and save a new talk.  </li>
<li>When a user taps on a talk from the Home screen, they navigate to a transcript of their most recent practice and a list of the jargon words they used during that practice. They may also opt to re-practice the talk by tapping the “Practice Again” button. If they tap this button,<br>the app will bring them to the Recording screen.</li>
<li>Users can also navigate to the Progress Tracker from the Home screen by tapping the hamburger menu in the upper-left corner.</li>
</ul>
<h5 id="Recording-Screen"><a href="#Recording-Screen" class="headerlink" title="Recording Screen"></a>Recording Screen</h5><ul>
<li>The Recording screen allows users to record a new talk and view a transcript of that talk.  </li>
<li>To begin recording, users tap the “Talk” button at the bottom-right hand corner of the screen.  </li>
<li>The user may choose to set a time length for their practice by scrolling to the desired value under the appropriate unit of measurement [hours, minutes, and&#x2F;or seconds].  </li>
<li>Once they have indicated the time length, they may tap “Set” to set the time and begin practicing.</li>
<li>ProTalk transcribes the user’s practice word-for-word (i.e., from speech to text) as they rehearse it.  </li>
<li>Once the user has finished practicing, they may tap the “Stop” button at the bottom of the screen to turn off the microphone. They will, then, be prompted to “Extract Jargon” at the top-right of the screen.</li>
</ul>
<h5 id="Jargon-Extraction-screen"><a href="#Jargon-Extraction-screen" class="headerlink" title="Jargon Extraction screen"></a>Jargon Extraction screen</h5><ul>
<li>Once the user taps “Extract Jargon”, all jargon words used during the practice will be highlighted yellow.  </li>
<li>The jargon words will also be listed below the transcript.  </li>
<li>The user may tap jargon words to view recommendations for replacing them: when the user taps a jargon word that they have used more than twice in their practice, the app will recommend that they describe the word after the first time they use it; If they use a jargon word two times or less, the app will recommend that they use another word or describe the jargon word in simpler words.  </li>
<li>If ProTalk recognizes a common term as jargon, the user may tap “This is not jargon”, and the app will remove the word from the talk’s jargon list and the word will no longer be highlighted in the talk’s transcript.  </li>
<li>Once the user has finished reviewing the transcript of their practice, they may tap “Save This Talk”, and the transcript and listed jargon words will be accessible from the Home screen.</li>
</ul>
<h5 id="Progress-Tracker-screen"><a href="#Progress-Tracker-screen" class="headerlink" title="Progress Tracker screen"></a>Progress Tracker screen</h5><ul>
<li>The user may view their progress — measured as a decrease in the number of jargon words used for each talk — by navigating to the Progress Tracking screen from the Home screen.  </li>
<li>The user may select the talk for which they wish to view their progress.  </li>
<li>The app will show the user a graph of their progress over time, with the number of jargon words used per practice attempt on the y-axis and the date and time of the practice on the x-axis.  </li>
<li>Progress is represented by a downward trend in the graph, representing a decreased use of jargon words over time</li>
</ul>
<h4 id="📌-Note"><a href="#📌-Note" class="headerlink" title="📌 Note"></a>📌 Note</h4><p>This is a team collaborated work. Huge thanks to my  teammates - <a href="https://www.linkedin.com/in/yuting-rebecca-zhang-87ba0b179">Yuting Zhang</a> and <a href="https://www.linkedin.com/in/cath-virelli-a09727a7/">Cath Virelli</a></p>
]]></content>
      <categories>
        <category>Projects</category>
        <category>App</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Android</tag>
        <tag>Google Firebase</tag>
        <tag>GCP</tag>
      </tags>
  </entry>
  <entry>
    <title>Build a Website with Node.js - Second Buy</title>
    <url>/2020/01/18/Project-Second-Buy/</url>
    <content><![CDATA[<h4 id="🌟-Screenshots"><a href="#🌟-Screenshots" class="headerlink" title="🌟 Screenshots"></a>🌟 Screenshots</h4><p><img data-src="/images/sc/sc_index.jpg"></p>
<span id="more"></span>  
<p style="text-align: center; border-bottom: 1px solid #ddd;"> Index </p>  

<p><img data-src="/images/sc/sc_profile.jpg"></p>
<p style="text-align: center; border-bottom: 1px solid #ddd;"> Profile </p>  

<p><img data-src="/images/sc/sc_sell.jpg"></p>
<p style="text-align: center; border-bottom: 1px solid #ddd;"> Sell / Edit </p>  

<p><img data-src="/images/sc/sc_detail.jpg"></p>
<p style="text-align: center; border-bottom: 1px solid #ddd;"> Detail </p>  

<p><img data-src="/images/sc/sc_comment.jpg"></p>
<p style="text-align: center; border-bottom: 1px solid #ddd;"> Comment / Reply </p>  

<p><img data-src="/images/sc/sc_notification.png"></p>
<p style="text-align: center; border-bottom: 1px solid #ddd;"> Notification </p>  

<h4 id="🌟-Built-with"><a href="#🌟-Built-with" class="headerlink" title="🌟 Built with"></a>🌟 Built with</h4><ul>
<li>JavaScript  </li>
<li>HTML &amp; CSS  </li>
<li>Node.js   </li>
<li>Express  </li>
<li>MongoDB  </li>
<li>Heroku</li>
</ul>
<h4 id="🌟-Components"><a href="#🌟-Components" class="headerlink" title="🌟 Components"></a>🌟 Components</h4><ul>
<li>Database —&gt; <a href="https://www.mongodb.com/">MongoDB</a>  </li>
<li>Deployment —&gt; <a href="https://www.heroku.com/platform">Heroku</a></li>
</ul>
<h4 id="🌟-Features"><a href="#🌟-Features" class="headerlink" title="🌟 Features"></a>🌟 Features</h4><p>There are many things a user can do in each page:</p>
<h5 id="Authentication"><a href="#Authentication" class="headerlink" title="Authentication"></a>Authentication</h5><ul>
<li>Login &#x2F; Sign-up &#x2F; Logout</li>
</ul>
<h5 id="Index-Page"><a href="#Index-Page" class="headerlink" title="Index Page"></a>Index Page</h5><ul>
<li>Browse postings of second-hand books on sale published by other users  </li>
<li>Search the sale information of specified second-hand books in the search bar   </li>
<li>Check brief information of one’s profile on the side</li>
</ul>
<h5 id="User’s-Profile-Page"><a href="#User’s-Profile-Page" class="headerlink" title="User’s Profile Page"></a>User’s Profile Page</h5><ul>
<li>Edit username and contact information    </li>
<li>Check the number of the user’s own books on sale and the number of the user’s own books sold  </li>
<li>Browse brief information of the user’s own postings   </li>
<li>Check other people’s profile but only in the guest mode (editing functions are hidden)</li>
</ul>
<h5 id="Sell-Book-Page-also-Edit-Book-information-Page"><a href="#Sell-Book-Page-also-Edit-Book-information-Page" class="headerlink" title="Sell Book Page (also Edit Book information Page)"></a>Sell Book Page (also Edit Book information Page)</h5><ul>
<li>Create a new posting by filling the book’s information and uploading the book’s picture    </li>
<li>Edit the user’s own published postings   </li>
<li>Tag the book with ‘on sale’ or ‘sold’</li>
</ul>
<h5 id="Book-Detail-Page"><a href="#Book-Detail-Page" class="headerlink" title="Book Detail Page"></a>Book Detail Page</h5><ul>
<li>Check the owner of a book and other detailed information  </li>
<li>Claim the book by clicking “I want this” to send a notification to the book’s owner  </li>
<li>Comment and reply under the book’s postings</li>
</ul>
<h5 id="Notification-Page"><a href="#Notification-Page" class="headerlink" title="Notification Page"></a>Notification Page</h5><p>Receive notifications if:</p>
<ul>
<li>some users want to buy the user’s books  </li>
<li>some users commented under the user’s postings  </li>
<li>some users replied to the user’s comments under postings</li>
</ul>
<h4 id="📌-Note"><a href="#📌-Note" class="headerlink" title="📌 Note"></a>📌 Note</h4><ul>
<li>Information of books in the example were randomly selected from <a href="https://search.library.utoronto.ca/index">U of T library</a>    </li>
<li>Background image (and alt image in the ‘upload the picture of the book’ area) was from Google Image  </li>
<li>Modified from my course project. Thanks to teammates <a href="https://github.com/AlexChum">Alex</a>, <a href="https://github.com/ritadi">Rita</a>, <a href="https://github.com/glebka100500">Hlib</a> and our instructor <a href="https://github.com/mark-kazakevich">Mark</a></li>
</ul>
]]></content>
      <categories>
        <category>Projects</category>
        <category>Website</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Express.js</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>Node.js</tag>
        <tag>MongoDB</tag>
        <tag>Heroku</tag>
      </tags>
  </entry>
  <entry>
    <title>Summary - Java Data Structures</title>
    <url>/2018/09/30/Summary-Java-Syntax/</url>
    <content><![CDATA[<p>Summarizing some frequently used Java data structures and make it convenient to review.  </p>
<h3 id="1-Arrays"><a href="#1-Arrays" class="headerlink" title="1. Arrays"></a>1. Arrays</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">type <span class="keyword">var</span>-name[] = <span class="keyword">new</span> <span class="title class_">type</span>[size];</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>OR</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">type[] <span class="keyword">var</span>-name = <span class="keyword">new</span> <span class="title class_">type</span>[size];</span><br></pre></td></tr></table></figure>

<h4 id="Built-in-methods"><a href="#Built-in-methods" class="headerlink" title="Built-in methods"></a>Built-in methods</h4><p><code>Arrays.fill(Object[] array, Object value)</code>,  </p>
<p><code>Arrays.equals(Object[] array1, Object[] array2)</code>    </p>
<hr>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Arrays.sort(<span class="type">int</span>[] array, <span class="keyword">new</span> <span class="title class_">Comparator</span> &lt;<span class="type">int</span>[]&gt; (...)&#123;...&#125;)</span><br></pre></td></tr></table></figure>

<p>for example,</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Arrays.sort(envelopes, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;<span class="type">int</span>[]&gt;()&#123;</span><br><span class="line">           <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2)</span>&#123;</span><br><span class="line">               <span class="keyword">if</span> (nums1[<span class="number">0</span>] == nums2[<span class="number">0</span>])&#123;</span><br><span class="line">                   <span class="keyword">return</span> nums2[<span class="number">1</span>] - nums1[<span class="number">1</span>];</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">return</span> nums1[<span class="number">0</span>] - nums2[<span class="number">0</span>];</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Arrays.sort(array, Collections.reverseOrder());</span><br></pre></td></tr></table></figure>
<hr>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Arrays.binarySearch(<span class="type">int</span>[] array, <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> key)</span><br></pre></td></tr></table></figure>
<p>e.g.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> Arrays.binarySearch(dp, <span class="number">0</span>, len, envelope[<span class="number">1</span>]);</span><br><span class="line"><span class="comment">//index of the search key, if it is contained in the array within the specified range; otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the key would be inserted into the array</span></span><br><span class="line"><span class="comment">//The return value will be &gt;= 0 if and only if the key is found.</span></span><br></pre></td></tr></table></figure>

<hr>
<p><code>Array.asList(Object[] array)</code>:</p>
<p>e.g. convert array to list</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] a = <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;D&quot;</span> &#125;;</span><br><span class="line">List&lt;String&gt; list = Arrays.asList(a);</span><br><span class="line"><span class="comment">//list: [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;]</span></span><br></pre></td></tr></table></figure>
<p>e.g. convert int[] to Integer list (in Java8)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List &lt;Integer&gt; list = Arrays.stream(arr).boxed().collect(Collectors.toList());</span><br></pre></td></tr></table></figure>

<hr>
<p><code>Arrays.toString(Object[] array)</code>: return a string representation of the contents of the specified array.<br>e.g. present array in the string format</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] array = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> Arrays.toString(array);</span><br><span class="line"><span class="comment">//str: &quot;[1, 2, 3, 4]&quot;</span></span><br></pre></td></tr></table></figure>

<hr>
<p><code>&lt;Object[] array&gt;.clone()</code>:  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] array = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span>[] copy = array.clone();</span><br></pre></td></tr></table></figure>
<p>OR</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.arraycopy(<span class="type">int</span>[] array, <span class="type">int</span> srcPos, <span class="type">int</span>[] copy, <span class="type">int</span> desPos, <span class="type">int</span> length);</span><br></pre></td></tr></table></figure>

<hr>
<p>e.g. get the sum of numbers in int[] array</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> Arrays.stream(A).sum();</span><br></pre></td></tr></table></figure>

<h3 id="2-Character"><a href="#2-Character" class="headerlink" title="2. Character"></a>2. Character</h3><p>e.g.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="string">&#x27;b&#x27;</span> - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">d</span> <span class="operator">=</span> c++;  </span><br></pre></td></tr></table></figure>

<hr>
<p>e.g. char -&gt; int</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="string">&#x27;7&#x27;</span> - <span class="string">&#x27;0&#x27;</span></span><br><span class="line"><span class="comment">//num: 7</span></span><br></pre></td></tr></table></figure>
<p>e.g. int -&gt; char  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> (<span class="type">char</span>)(<span class="string">&#x27;a&#x27;</span> + <span class="number">1</span>);</span><br><span class="line"><span class="comment">//c: &#x27;b&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="Built-in-methods-1"><a href="#Built-in-methods-1" class="headerlink" title="Built-in methods"></a>Built-in methods</h4><p><code>Character.toLowerCase(char c)</code><br><code>Character.isLetterOrDigit(char c)</code>: returns true if the character is a letter or digit; false otherwise.<br><code>Character.getNumericValue(char c)</code>: returns the int value that the specified Unicode character represents<br><code>Character.isLetter(char c)</code>: returns true if the character is a letter, false otherwise<br><code>Character.isDigit(char c)</code>: returns true if the character is a digit, false otherwise  </p>
<h3 id="3-Deque"><a href="#3-Deque" class="headerlink" title="3. Deque"></a>3. Deque</h3><blockquote>
<p> Deque, which is a “double-ended” queue that supports adding, querying, and removing elements from either end of the queue (the head or the tail).</p>
</blockquote>
<p>Deque has versions of the queue methods—offer, poll, and peek—that operate on the first or last element: <code>offerFirst()</code>, <code>pollFirst()</code>, <code>peekFirst()</code>, <code>offerLast()</code>, <code>pollLast()</code>, <code>peek Last()</code>. Note that Deque extends Queue and so is still a type of Queue.  </p>
<p>Deque is generally better and should serve as a general replacement for Stack. Simply use <code>addFirst()</code> for “push” and <code>pollFirst()</code> for “pop”</p>
<h3 id="4-HashMap"><a href="#4-HashMap" class="headerlink" title="4. HashMap"></a>4. HashMap</h3><p>e.g.  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashMap &lt;Integer, Double&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br></pre></td></tr></table></figure>

<h4 id="Built-in-methods-2"><a href="#Built-in-methods-2" class="headerlink" title="Built-in methods"></a>Built-in methods</h4><p><code>map.keySet()</code>,  </p>
<p><code>map.values()</code>,  </p>
<p><code>map.containsKey(Object key)</code>,  </p>
<p><code>map.get(Object key)</code>,  </p>
<p><code>map.remove(Object key)</code>  </p>
<p><code>map.clear()</code>: clear and remove all of the elements or mappings from a specified Map collection  </p>
<p><code>map.put(Object key, Object value)</code>, <code>map.putIfAbsent(Object key, Object value)</code>:<br>returns the previous value associated with the specified key, or null if there was no mapping for the key.  </p>
<hr>
<p>e.g. for loop in map</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; entry: map.entrySet())&#123;</span><br><span class="line">            entry.getValue();</span><br><span class="line">            entry.getKey();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-Integer"><a href="#5-Integer" class="headerlink" title="5. Integer"></a>5. Integer</h3><p>range: -2^{31} ~ 2^{31} - 1</p>
<h4 id="MAX-x2F-MIN"><a href="#MAX-x2F-MIN" class="headerlink" title="MAX&#x2F;MIN"></a>MAX&#x2F;MIN</h4><p><code>Integer.MAX_VALUE</code>, <code>Integer.MIN_VALUE</code></p>
<h4 id="Built-in-methods-3"><a href="#Built-in-methods-3" class="headerlink" title="Built-in methods"></a>Built-in methods</h4><p><code>Integer.bitCount(int num)</code>: returns the number of one-bits in the two’s complement binary representation of the specified int value. (number of digits in decimal)<br><code>Integer.parseInt(String s)</code>: Parses the string argument as a signed decimal integer<br><code>Integer.toString(int num)</code>: Returns the string object of the particular Integer value  </p>
<h3 id="6-Math"><a href="#6-Math" class="headerlink" title="6. Math"></a>6. Math</h3><h4 id="Built-in-methods-4"><a href="#Built-in-methods-4" class="headerlink" title="Built-in methods"></a>Built-in methods</h4><p><code>Math.pow(double base, double exponent)</code>: Returns double<br><code>Math.sqrt(double num)</code>: Returns the correctly rounded positive square root of a double value.</p>
<h3 id="7-List"><a href="#7-List" class="headerlink" title="7. List"></a>7. List</h3><p>e.g.  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList &lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LinkedList &lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br></pre></td></tr></table></figure>
<p>e.g. create ArrayList of ArrayList  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;(sub_arraylist));</span><br></pre></td></tr></table></figure>
<p>e.g. set -&gt; list  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set &lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">List &lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(set);</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="Differences-between-ArrayList-and-LinkedList"><a href="#Differences-between-ArrayList-and-LinkedList" class="headerlink" title="Differences between ArrayList and LinkedList:"></a><a href="https://www.javatpoint.com/difference-between-arraylist-and-linkedlist">Differences between ArrayList and LinkedList</a>:</h4><table>
<thead>
<tr>
<th>ArrayList</th>
<th>LinkedList</th>
</tr>
</thead>
<tbody><tr>
<td>ArrayList internally uses a <strong>dynamic array</strong> to store the elements.</td>
<td>LinkedList internally uses a <strong>doubly linked list</strong> to store the elements.</td>
</tr>
<tr>
<td>Manipulation with ArrayList is <strong>slow</strong> because it internally uses an array. If any element is removed from the array, all the bits are shifted in memory.</td>
<td>Manipulation with LinkedList is <strong>faster</strong> than ArrayList because it uses a doubly linked list, so no bit shifting is required in memory.</td>
</tr>
<tr>
<td>An ArrayList class can <strong>act as a list</strong> only because it implements List only.</td>
<td>LinkedList class can <strong>act as a list and queue</strong> both because it implements List and Deque interfaces.</td>
</tr>
<tr>
<td>ArrayList is <strong>better for storing and accessing</strong> data.</td>
<td>LinkedList is <strong>better for manipulating</strong> data.</td>
</tr>
</tbody></table>
<hr>
<h4 id="Built-in-methods-5"><a href="#Built-in-methods-5" class="headerlink" title="Built-in methods"></a>Built-in methods</h4><p><code>list.add(Object e)</code>,  </p>
<p><code>list.remove(Object e)</code>,  </p>
<p><code>list.get(int index)</code>,  </p>
<p><code>list.indexOf(Object e)</code>,    </p>
<p><code>list.add(int index, Object e)</code>,   </p>
<p><code>list.set(int index, Object e)</code>,   </p>
<p><code>list.size()</code>,   </p>
<p><code>list.contains(Object e)</code>,   </p>
<p><code>list.isEmpty()</code>  </p>
<p><code>list.remove(int index)</code>: Returns the element previously at the specified position  </p>
<p><code>list.clear()</code>: remove all of the elements from the list  </p>
<p>For LinkedList:  </p>
<p><code>linkedlist.peek()</code>: returns the head of this list, or null if this list is empty  </p>
<p><code>linkedlist.pollLast()</code>: Retrieves and removes the last element of this list, or returns null if this list is empty.  </p>
<p><code>linkedlist.getLast()</code>: Returns the last element in this list.</p>
<p><code>linkedlist.addFirst()</code>: Inserts the specified element at the beginning of this list.  </p>
<hr>
<p><code>list.toArray(T[] a)</code>:  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] array = list.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[list.size()]);</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;<span class="type">int</span>[]&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="type">int</span>[][] array = list.toArray(<span class="keyword">new</span> <span class="title class_">int</span>[list.size()][<span class="number">2</span>]);</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LinkedList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"><span class="type">int</span>[] array = list.stream().mapToInt(i -&gt; i).toArray();</span><br></pre></td></tr></table></figure>

<hr>
<p>e.g. print list</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> Arrays.toString(list.toArray());</span><br><span class="line">System.out.println(str);</span><br></pre></td></tr></table></figure>

<hr>
<p>e.g. sort list</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collections.sort(list);</span><br></pre></td></tr></table></figure>

<hr>
<p>e.g. convert set to list</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>(set);</span><br></pre></td></tr></table></figure>

<hr>
<p>Use <code>binarySearch()</code> to get the count of integers greater than the specified integer</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// list is arraylist, num is the specified integer</span></span><br><span class="line"><span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> Collections.binarySearch(list, num);</span><br><span class="line"><span class="keyword">if</span> (idx &gt;= <span class="number">0</span> &amp;&amp; idx &lt; list.size()) &#123;</span><br><span class="line">    sum += list.size() - idx - <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (idx &lt; <span class="number">0</span> &amp;&amp; -idx - <span class="number">1</span> &lt; list.size()) &#123;</span><br><span class="line">    sum += list.size() - (-idx - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8-Long"><a href="#8-Long" class="headerlink" title="8. Long"></a>8. Long</h3><h4 id="Built-in-methods-6"><a href="#Built-in-methods-6" class="headerlink" title="Built-in methods"></a>Built-in methods</h4><p>e.g. convert string to long type:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">val</span> <span class="operator">=</span> Long.parseLong(<span class="string">&quot;1234&quot;</span>);</span><br><span class="line"><span class="comment">//val: 1234</span></span><br></pre></td></tr></table></figure>
<p>e.g. cast long to int:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> Math.toIntExact(val);</span><br></pre></td></tr></table></figure>
<p>OR</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> (<span class="type">int</span>)val;</span><br></pre></td></tr></table></figure>

<h3 id="9-Priority-Queue"><a href="#9-Priority-Queue" class="headerlink" title="9. Priority Queue"></a>9. Priority Queue</h3><p>e.g.  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PriorityQueue &lt;Integer&gt; heap = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span> &lt;Integer&gt;();</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ListNode[] lists = <span class="keyword">new</span> <span class="title class_">ListNode</span>[]&#123;&lt;ListNode&gt;, &lt;ListNode&gt;, ...&#125;</span><br><span class="line">PriorityQueue &lt;ListNode&gt; heap = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;ListNode&gt;(lists.length, (a, b) -&gt; a.val - b.val);</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PriorityQueue &lt;Integer&gt; heap = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(Collections.reverseOrder());</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;List&lt;Integer&gt;&gt; nums = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">PriorityQueue&lt;<span class="type">int</span>[]&gt; heap = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(Comparator.comparingInt(o -&gt; nums.get(o[<span class="number">0</span>]).get(o[<span class="number">1</span>])));</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PriorityQueue&lt;Integer&gt; pq =<span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((x, y) -&gt; Integer.compare(x, y));</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PriorityQueue &lt;<span class="type">int</span>[]&gt; heap = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span> &lt;<span class="type">int</span>[]&gt; ((a, b) -&gt; (a[<span class="number">0</span>] - b[<span class="number">0</span>]));</span><br></pre></td></tr></table></figure>

<h4 id="Built-in-methods-7"><a href="#Built-in-methods-7" class="headerlink" title="Built-in methods"></a>Built-in methods</h4><p><code>heap.isEmpty()</code><br><code>heap.offer(Object e)</code>&#x2F;<code>heap.add(Object e)</code>: Inserts the specified element into this priority queue.<br><code>heap.poll()</code>: Retrieves and removes the head of this queue, or returns null if this queue is empty.</p>
<hr>
<p>e.g. add int[] array to Integer priority queue</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PriorityQueue &lt;Integer&gt; heap = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(Collections.reverseOrder());</span><br><span class="line">List &lt;Integer&gt; list = Arrays.stream(arr).boxed().collect(Collectors.toList());</span><br><span class="line">heap.addAll(list);</span><br></pre></td></tr></table></figure>
<p>or by for loop adding int to priority queue</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PriorityQueue&lt;Integer&gt; heap = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;Integer&gt;(Collections.reverseOrder());</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> num : arr)&#123;</span><br><span class="line">    heap.offer(num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="10-Queue"><a href="#10-Queue" class="headerlink" title="10. Queue"></a>10. Queue</h3><p>e.g.  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Queue &lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Integer&gt;();</span><br></pre></td></tr></table></figure>

<h4 id="Built-in-methods-8"><a href="#Built-in-methods-8" class="headerlink" title="Built-in methods"></a>Built-in methods</h4><p><code>queue.add(Object e)</code>,   </p>
<p><code>queue.isEmpty()</code>,   </p>
<p><code>queue.size()</code>  </p>
<p> <code>queue.poll()</code>: Retrieves and removes the head of this queue, or returns null if this queue is empty.  </p>
<p> <code>queue.remove()</code>: Retrieves and removes the head of this queue. This method differs from poll only in that it throws an exception if this queue is empty.  </p>
<p> <code>queue.peek()</code>: Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.  </p>
<p> <code>queue.addAll(Queue q)</code>: Appends all of the elements in q to the end of queue.    </p>
<p> <code>queue.clear()</code>: Removes all of the elements from this queue</p>
<h3 id="11-Random"><a href="#11-Random" class="headerlink" title="11. Random"></a>11. Random</h3><p>e.g.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br></pre></td></tr></table></figure>

<h4 id="Built-in-methods-9"><a href="#Built-in-methods-9" class="headerlink" title="Built-in methods"></a>Built-in methods</h4><p><code>Random.nextInt(int n)</code>: get a random number between 0(inclusive) and the number passed in this argument(n), exclusive.</p>
<h3 id="12-Set"><a href="#12-Set" class="headerlink" title="12. Set"></a>12. Set</h3><p>e.g.  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashSet &lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TreeSet &lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">TreeSet</span>();</span><br></pre></td></tr></table></figure>
<p>e.g. list -&gt; set:  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">Set&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>(list);</span><br></pre></td></tr></table></figure>
<p>e.g. loop over set:  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Iterator</span> <span class="variable">value</span> <span class="operator">=</span> set.iterator();</span><br><span class="line"><span class="keyword">while</span> (value.hasNext()) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> value.next();<span class="comment">//begin from first element in set</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="13-SortedMap"><a href="#13-SortedMap" class="headerlink" title="13. SortedMap"></a>13. SortedMap</h3><blockquote>
<p>A SortedMap maintains its key&#x2F;value pairs sorted in a particular order according to the key values</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SortedMap &lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">TreeMap</span>();</span><br></pre></td></tr></table></figure>

<p>It provides the <code>subMap()</code>, <code>headMap()</code>, and <code>tailMap()</code> methods for retrieving sorted map subsets. Like SortedSet, it also provides a <code>comparator()</code> method, which returns an object that determines how the map keys are sorted.</p>
<h3 id="14-SortedSet"><a href="#14-SortedSet" class="headerlink" title="14. SortedSet"></a>14. SortedSet</h3><blockquote>
<p>SortedSet maintains elements in a prescribed order; like a sorted list that can contain no duplicates.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SortedSet &lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">TreeSet</span>();</span><br></pre></td></tr></table></figure>
<p>Retrieve subsets (which are also sorted) using the <code>subSet()</code>, <code>headSet()</code>, and <code>tailSet()</code> methods.<br>The <code>first()</code>, <code>last()</code>, and <code>comparator()</code> methods provide access to the first element, the last element, and the object used to compare elements</p>
<h4 id="Built-in-methods-10"><a href="#Built-in-methods-10" class="headerlink" title="Built-in methods"></a>Built-in methods</h4><p><code>set.add(Object e)</code>,   </p>
<p><code>set.contains(Object e)</code>,   </p>
<p><code>set.remove(Object e)</code>,   </p>
<p><code>set.size()</code>  </p>
<p>For TreeSet - O(logn):  </p>
<p><code>treeset.floor(Object e)</code>: returns the greatest element less than or equal to e, or null if there is no such element.   </p>
<p><code>treeset.ceiling(Object e)</code>: returns the least element greater than or equal to e, or null if there is no such element.  </p>
<p><code>treeset.last()</code>: returns the highest member of the set. If the elements are of string type then they are checked in alphabetical order irrespective of length and if the elements are of integer types then the largest integer is returned. The string of alphabet types is given higher priority.</p>
<h3 id="15-Stack"><a href="#15-Stack" class="headerlink" title="15. Stack"></a>15. Stack</h3><p>e.g.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stack &lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>();</span><br></pre></td></tr></table></figure>

<h4 id="Built-in-methods-11"><a href="#Built-in-methods-11" class="headerlink" title="Built-in methods"></a>Built-in methods</h4><p><code>stack.peek()</code>,  </p>
<p><code>stack.push(Object e)</code>,  </p>
<p><code>stack.pop()</code>,  </p>
<p><code>stack.empty()</code>&#x2F;<code>stack.isEmpty()</code>,</p>
<p><code>stack.size()</code>,  </p>
<p><code>stack1.equals(stack2)</code></p>
<h3 id="16-String"><a href="#16-String" class="headerlink" title="16. String"></a>16. String</h3><h4 id="Built-in-methods-12"><a href="#Built-in-methods-12" class="headerlink" title="Built-in methods"></a>Built-in methods</h4><p><code>&lt;String&gt;.substring(int start, int end)</code>,   </p>
<p><code>&lt;String&gt;.startsWith(String prefix)</code>,   </p>
<p><code>&lt;String&gt;.isEmpty()</code>,   </p>
<p><code>&lt;String A&gt;.equals(&lt;String B&gt;)</code>,   </p>
<p><code>&lt;String&gt;.charAt(int index)</code>,   </p>
<p><code>&lt;String&gt;.toLowerCase()</code>,  </p>
<p><code>&lt;String1&gt; + &lt;String2&gt;</code>,   </p>
<p><code>&lt;String&gt;.replace(char old, char new)</code>,   </p>
<p><code>&lt;String&gt;.indexOf(String str)</code>&#x2F;<code>&lt;String&gt;.indexOf(int char)</code>  </p>
<p><code>&lt;String&gt;.contains(CharSequence s)</code>: Returns true if and only if this string contains the specified sequence of char values.</p>
<hr>
<p><code>&lt;String&gt;.toCharArray()</code>:  </p>
<p>e.g.  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;String&quot;</span>;</span><br><span class="line"><span class="type">char</span>[] array= str.toCharArray();</span><br><span class="line"><span class="comment">//array: &#123;&#x27;S&#x27;, &#x27;t&#x27;, &#x27;r&#x27;, &#x27;i&#x27;, &#x27;n&#x27;, &#x27;g&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<hr>
<p><code>new String(char[] array)</code>,   </p>
<p><code>new String(char[] array, int start, int length)</code>,  </p>
<p> <code>String.valueOf(char[] array)</code>  </p>
<p>e.g. convert char[] array back to String</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">str = <span class="keyword">new</span> <span class="title class_">String</span>(array);</span><br><span class="line"><span class="comment">//str: &quot;String&quot;</span></span><br><span class="line">str = <span class="keyword">new</span> <span class="title class_">String</span>(array, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">//str: &quot;Str&quot;</span></span><br></pre></td></tr></table></figure>
<p>OR</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">str = String.valueOf(array);</span><br></pre></td></tr></table></figure>

<hr>
<p><code>&lt;String A&gt;.compareTo(&lt;String B&gt;)</code>:  </p>
<p>returns 0 if A equal to B;<br>returns &lt; 0 if A is lexicographically less than B;<br>returns &gt; 0 if A is lexicographically greater than B;  </p>
<hr>
<p><code>&lt;String&gt;.split()</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;we will we will rock you&quot;</span>;</span><br><span class="line">String[] words = text.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line"><span class="comment">//words: &#123;&quot;we&quot;, &quot;will&quot;, &quot;we&quot;, &quot;will&quot;, &quot;rock&quot;, &quot;you&quot;&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="17-StringBuilder-x2F-StringBuffer"><a href="#17-StringBuilder-x2F-StringBuffer" class="headerlink" title="17. StringBuilder&#x2F;StringBuffer"></a>17. StringBuilder&#x2F;StringBuffer</h3><p>e.g.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br></pre></td></tr></table></figure>

<p>create array of StringBuffer:  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringBuilder[] rows = <span class="keyword">new</span> <span class="title class_">StringBuilder</span>[numRows];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numRows; i++) rows[i] = <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br></pre></td></tr></table></figure>
<p>create StringBuilder from String:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;String&quot;</span>;</span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(s);</span><br><span class="line"><span class="comment">//sb is similar to one deep-copy of s, but in StringBuilder type. They are independent.</span></span><br></pre></td></tr></table></figure>

<h4 id="Built-in-methods-13"><a href="#Built-in-methods-13" class="headerlink" title="Built-in methods"></a>Built-in methods</h4><p><code>sb.append(char c)</code>,   </p>
<p><code>sb.append(int n)</code>,   </p>
<p><code>sb.append(String s)</code>,  </p>
<p><code>sb.insert(int index, String/int/char c)</code>,   </p>
<p><code>sb.reverse()</code>,   </p>
<p><code>sb.length()</code>,   </p>
<p><code>sb.setCharAt(int index, char c)</code>  </p>
<p><code>sb.toString()</code>: Returns a string representing the data in this sequence.  </p>
<p><code>sb.setLength(int newlength)</code>: setting newlength to 0 will empty SB  </p>
<p><code>sb.substring(int start, int end)</code>  </p>
<p><code>sb.delete(int start, int end)</code>  </p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://docs.oracle.com/javase/8/docs/api/">Java Platform SE 8 - Oracle Help Center</a><br><a href="https://www.oreilly.com/library/view/learning-java-4th/9781449372477/">Learning Java - O’Reilly</a></p>
]]></content>
      <categories>
        <category>Summary</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Build a Decentralized App - Museum Pass Card Promotions</title>
    <url>/2020/09/09/Tutorial-on-DApp/</url>
    <content><![CDATA[<p><strong>Note</strong>: This tutorial imitates <a href="https://www.dappuniversity.com/articles/the-ultimate-ethereum-dapp-tutorial">The Ultimate Ethereum Dapp Tutorial</a> but creates a different app.</p>
<h3 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h3><p>In this tutorial, We can learn how to build a web application where customers can get&#x2F;remove museums’ pass cards. Pass cards from different museums have different expiration date, and every museum has a limitation on the number of pass cards they released.  </p>
<p>If we were to build our application on the centralized web, we’d run into a few problems:  </p>
<span id="more"></span>
<ol>
<li>The data on the database could be changed: expiration date of pass cards could be changed, so one pass card could be used forever in this case; the number limitation of museums’ pass cards could be changed, unlimited free pass cards would cause a huge loss for museums.  </li>
<li>The source code on the web server could also be changed at any time.</li>
</ol>
<blockquote>
<p>Instead of a centralized database, all the transaction data that is shared across the nodes in the blockchain is contained in bundles of records called blocks, which are chained together to create the public ledger. This public ledger represents all the data in the blockchain. All the data in the public ledger is secured by cryptographic hashing, and validated by a consensus algorithm. Nodes on the network participate to ensure that all copies of the data distributed across the network are the same.  </p>
</blockquote>
<p>For these reasons, we can build it on the blockchain to ensure that the information of pass cards and its number limitation cannot be changed, and people cannot get the duplicate pass cards from the same museums if they’ve already got one.  </p>
<p>For users of this application, they needs an account with a wallet address with some Ether. Once they connect to the network, they can get and remove their pass cards and pay “gas” to write their transactions to the blockchain.  </p>
<p>We’ll build the front-end client written in HTML, CSS, and Javascript. This client will connect to Ganache, a local Ethereum blockchain. And we’ll code all the business logic about our DApp in the smart contract written in the Solidity. We’ll develop our DApp in the Truffle framework. MetaMask needs to be pre-installed on chrome with the private account imported from Ganache to connect to the local Ethereum blockchain, and interact with the smart contract deployed on the blockchain. Other dependencies are listed in the <a href="#dependencies">last section</a> of this tutorial.  </p>
<p><em>Complete code of this tutorial can be found in the github repo <a href="https://github.com/zhqyvvn/Tutorial-on-DApp">zhqyvvn&#x2F;Tutorial-on-DApp</a></em></p>
<h3 id="Install-Framework-and-Softwares"><a href="#Install-Framework-and-Softwares" class="headerlink" title="Install Framework and Softwares"></a>Install Framework and Softwares</h3><ul>
<li>Install Truffle with NPM<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install -g truffle</span></span><br></pre></td></tr></table></figure></li>
<li><a href="https://www.trufflesuite.com/ganache">Install Ganache</a></li>
<li><a href="https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn?hl=en">Get Metamask extension for Google Chrome</a></li>
</ul>
<h3 id="Step1-Model-Museums"><a href="#Step1-Model-Museums" class="headerlink" title="Step1 - Model Museums"></a>Step1 - Model Museums</h3><p>Open Ganache and have a local blockchain running. Ganache gave us 10 accounts preloaded with 100 fake Ether. Each account has a unique address and a private key. Each account address will serve as a unique identifier for each user in our DApp.  </p>
<p><img data-src="/images/tut_img/ganache.png"></p>
<p>Now let’s create a project directory for our DApp in the command line like this:</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> museum</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> museum</span></span><br></pre></td></tr></table></figure>

<p>Inside our newly created directory, Get up and run fast with a fundamental Truffle box:</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">truffle unbox pet-shop</span></span><br></pre></td></tr></table></figure>

<p>From the root of our project, create a new contract file in the contracts directory like this:</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">touch</span> contracts/Passcard.sol</span></span><br></pre></td></tr></table></figure>
<p>Or we can create it manually. Also in this contracts directory, delete <code>Migrations.sol</code>.</p>
<p>We need a way to store multiple museums, and store multiple attributes about each museum. We want to keep track of a museum’s id, name, description, address, open hours, avatar image source path, the expiration date of pass cards and to count the number of remaining pass cards of a museum. Here is how we will model the museum - Open the <code>Passcard.sol</code> file and start with the following code:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pragma solidity 0.5.16;</span><br><span class="line"></span><br><span class="line">contract Passcard &#123;</span><br><span class="line"></span><br><span class="line">  //Model a Museum</span><br><span class="line">  struct Museum &#123;</span><br><span class="line">    uint id;</span><br><span class="line">    string name;</span><br><span class="line">    string description;</span><br><span class="line">    string addr;</span><br><span class="line">    string hour;</span><br><span class="line">    string imgsrc;</span><br><span class="line">    string expire_date;</span><br><span class="line">    uint count_remain;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>We have modeled the museum with a Solidity Struct. We specified that this struct has an id of unsigned integer type, name of string type, description of string type, address of string type, open hours of string type, image path of string type, expiration date of string type, and remaining number of pass cards of unsigned integer type.  </p>
<p>We need a place to store the <code>Museum</code> structure type that we’ve just created. We can do this with a Solidity mapping.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pragma solidity 0.5.16;</span><br><span class="line"></span><br><span class="line">contract Passcard &#123;</span><br><span class="line"></span><br><span class="line">  //Model a Museum</span><br><span class="line">  struct Museum &#123;</span><br><span class="line">    uint id;</span><br><span class="line">    string name;</span><br><span class="line">    string description;</span><br><span class="line">    string addr;</span><br><span class="line">    string hour;</span><br><span class="line">    string imgsrc;</span><br><span class="line">    string expire_date;</span><br><span class="line">    uint count_remain;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  //Read/Write museums&#x27; information</span><br><span class="line">  mapping(uint =&gt; Museum) public museums;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>In this case, the key to the mapping is an unsigned integer, and the value is a Museum structure type that we just defined. This essentially gives us an id-based look up for each museum.   </p>
<p>Next, we keep track of how many museums exist in the contract with a counter cache state variable  <code>museumsCount</code> like this:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pragma solidity 0.5.16;</span><br><span class="line"></span><br><span class="line">contract Passcard &#123;</span><br><span class="line"></span><br><span class="line">  //Model a Museum</span><br><span class="line">  struct Museum &#123;</span><br><span class="line">    uint id;</span><br><span class="line">    string name;</span><br><span class="line">    string description;</span><br><span class="line">    string addr;</span><br><span class="line">    string hour;</span><br><span class="line">    string imgsrc;</span><br><span class="line">    string expire_date;</span><br><span class="line">    uint count_remain;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  //Read/Write museums&#x27; information</span><br><span class="line">  mapping(uint =&gt; Museum) public museums;</span><br><span class="line"></span><br><span class="line">  //keep track of museum counts</span><br><span class="line">  uint public museumsCount;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>In Solidity, there is no way to determine the size of a mapping, and no way to iterate over it, either. Therefore, we should use a counter cache.  </p>
<p>Next, let’s create a function to add museums to the mapping we’ve created like this:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">contract Passcard &#123;</span><br><span class="line">  // ...</span><br><span class="line"></span><br><span class="line">  //function for adding museum</span><br><span class="line">  function addMuseum (string memory _name, string memory _description,</span><br><span class="line">    string memory _addr, string memory _hours, string memory _imgsrc,</span><br><span class="line">    string memory _date, uint _count) private &#123;</span><br><span class="line">      museumsCount += 1;</span><br><span class="line">      museums[museumsCount] = Museum(museumsCount, _name, _description, _addr, _hours,</span><br><span class="line">        _imgsrc, _date, _count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Inside the function, we increment the <code>museumsCount</code> counter cache to denote that a new museum has been added. Then we update the mapping with a new Museum struct, using the current <code>museumsCount</code> count as the key. The initialized museum id is also the current <code>museumsCount</code> count.  </p>
<p>Now we can add four museums with mock data to our contract by calling the <code>addMuseum</code> function four times inside the constructor function like this:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">contract Passcard &#123;</span><br><span class="line">  // ...</span><br><span class="line"></span><br><span class="line">  //Constructor</span><br><span class="line">  constructor() public &#123;</span><br><span class="line">    //add mock data</span><br><span class="line">    addMuseum(&quot;Royal Ontario Museum&quot;,</span><br><span class="line">    &quot;It is one of the largest museums in North America and the largest in Canada.&quot;,</span><br><span class="line">    &quot;100 Queens Park, Toronto, ON&quot;, &quot;Mon-Fri, 10a.m.-5:30p.m.&quot;, &quot;./images/on_royal.jpg&quot;, &quot;2020-09-15&quot;, 10);</span><br><span class="line"></span><br><span class="line">    addMuseum(&quot;Gardiner Museum&quot;,</span><br><span class="line">    &quot;The collection is made up of two types of ceramics, earthenware, and porcelain.&quot;,</span><br><span class="line">    &quot;111 Queens Park, Toronto, ON&quot;, &quot;Mon-Fri, 10a.m.-6:00p.m.&quot;, &quot;./images/gardiner.jpg&quot;, &quot;2020-10-08&quot;, 30);</span><br><span class="line"></span><br><span class="line">    addMuseum(&quot;Art Gallery of Ontario&quot;,</span><br><span class="line">    &quot;Its permanent collection represents many artistic movements and eras of art history.&quot;,</span><br><span class="line">    &quot;317 Dundas St W, Toronto, ON&quot;, &quot;Mon-Fri, 10:30a.m.-5p.m.&quot;, &quot;./images/ago.jpg&quot;, &quot;2020-11-20&quot;, 25);</span><br><span class="line"></span><br><span class="line">    addMuseum(&quot;Textile Museum of Canada&quot;,</span><br><span class="line">    &quot;It is a museum dedicated to the collection, exhibition, and documentation of textiles.&quot;,</span><br><span class="line">    &quot;55 Centre Ave, Toronto, ON&quot;, &quot;Mon-Sun, 11a.m.-5p.m.&quot;, &quot;./images/textile.jpg&quot;, &quot;2020-12-16&quot;, 1);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>At this point, your contract code should look like this:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pragma solidity 0.5.16;</span><br><span class="line"></span><br><span class="line">contract Passcard &#123;</span><br><span class="line"></span><br><span class="line">  //Model a Museum</span><br><span class="line">  struct Museum &#123;</span><br><span class="line">    uint id;</span><br><span class="line">    string name;</span><br><span class="line">    string description;</span><br><span class="line">    string addr;</span><br><span class="line">    string hour;</span><br><span class="line">    string imgsrc;</span><br><span class="line">    string expire_date;</span><br><span class="line">    uint count_remain;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  //Read/Write museums&#x27; information</span><br><span class="line">  mapping(uint =&gt; Museum) public museums;</span><br><span class="line"></span><br><span class="line">  //keep track of museum counts</span><br><span class="line">  uint public museumsCount;</span><br><span class="line"></span><br><span class="line">  //Constructor</span><br><span class="line">  constructor() public &#123;</span><br><span class="line">    //add mock data</span><br><span class="line">    addMuseum(&quot;Royal Ontario Museum&quot;,</span><br><span class="line">    &quot;It is one of the largest museums in North America and the largest in Canada.&quot;,</span><br><span class="line">    &quot;100 Queens Park, Toronto, ON&quot;, &quot;Mon-Fri, 10a.m.-5:30p.m.&quot;, &quot;./images/on_royal.jpg&quot;, &quot;2020-09-15&quot;, 10);</span><br><span class="line"></span><br><span class="line">    addMuseum(&quot;Gardiner Museum&quot;,</span><br><span class="line">    &quot;The collection is made up of two types of ceramics, earthenware, and porcelain.&quot;,</span><br><span class="line">    &quot;111 Queens Park, Toronto, ON&quot;, &quot;Mon-Fri, 10a.m.-6:00p.m.&quot;, &quot;./images/gardiner.jpg&quot;, &quot;2020-10-08&quot;, 30);</span><br><span class="line"></span><br><span class="line">    addMuseum(&quot;Art Gallery of Ontario&quot;,</span><br><span class="line">    &quot;Its permanent collection represents many artistic movements and eras of art history.&quot;,</span><br><span class="line">    &quot;317 Dundas St W, Toronto, ON&quot;, &quot;Mon-Fri, 10:30a.m.-5p.m.&quot;, &quot;./images/ago.jpg&quot;, &quot;2020-11-20&quot;, 25);</span><br><span class="line"></span><br><span class="line">    addMuseum(&quot;Textile Museum of Canada&quot;,</span><br><span class="line">    &quot;It is a museum dedicated to the collection, exhibition, and documentation of textiles.&quot;,</span><br><span class="line">    &quot;55 Centre Ave, Toronto, ON&quot;, &quot;Mon-Sun, 11a.m.-5p.m.&quot;, &quot;./images/textile.jpg&quot;, &quot;2020-12-16&quot;, 1);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  //function for adding museum</span><br><span class="line">  function addMuseum (string memory _name, string memory _description,</span><br><span class="line">    string memory _addr, string memory _hours, string memory _imgsrc,</span><br><span class="line">    string memory _date, uint _count) private &#123;</span><br><span class="line">      museumsCount += 1;</span><br><span class="line">      museums[museumsCount] = Museum(museumsCount, _name, _description, _addr, _hours,</span><br><span class="line">        _imgsrc, _date, _count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Next we’ll need to create a new file in the “migrations” directory. From our project root, create a new file from the command line like this:</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">touch</span> migrations/1_museum_passcard.js</span></span><br></pre></td></tr></table></figure>
<p>Or we can create it manually. Also we need to delete <code>1_initial_migration.js</code> there.</p>
<p>Let’s create a new migration to deploy the contract like this:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">Passcard</span> = artifacts.<span class="built_in">require</span>(<span class="string">&quot;./Passcard.sol&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span>(<span class="params">deployer</span>) &#123;</span><br><span class="line">  deployer.<span class="title function_">deploy</span>(<span class="title class_">Passcard</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>Now let’s run our migrations from the command line like this:</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">truffle migrate</span></span><br></pre></td></tr></table></figure>
<p>Make sure the Ganache is running at the same time.</p>
<p>Now that we have successfully migrated our smart contract to the local Ethereum blockchain, let’s open the console to interact with the smart contract. You can open the truffle console from the command line like this:</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">truffle console</span></span><br></pre></td></tr></table></figure>

<p>Now that we’re inside the console, let’s get an instance of our deployed smart contract and see if we can read the museum’s information from the contract.  </p>
<p>From the console, run this code:</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">Passcard.deployed().then(function(instance) &#123; app = instance &#125;)</span><br></pre></td></tr></table></figure>
<p>Now we can get information of our museums, for instance, to get our first museum, we can write code in truffle console like this:</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">app.museums(1).then(function(i) &#123;museum = i&#125;)</span><br></pre></td></tr></table></figure>
<p>And read its information like this:</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">museum[0].toNumber()    //read the id of the museum</span><br><span class="line">museum[1]    //read the name of the museum</span><br><span class="line">museum[2]    //read the description of the museum</span><br><span class="line">museum[3]    //read the address of the museum</span><br><span class="line">museum[4]    //read the open hours of the museum</span><br><span class="line">museum[5]    //read where the avatar image of the museum stored</span><br><span class="line">museum[6]    //read the expiration date of the museums&#x27; pass cards</span><br><span class="line">museum[7].toNumber()  //read the number of remaining pass cards users can get from this museum</span><br></pre></td></tr></table></figure>

<p>Congratulations! You’ve just written your first smart contract, deployed to the blockchain, and retrieved some of its data.</p>
<p>Note: For images of the four museums in our contract, we can download their images from websites and store them in the <code>src/images</code> directory, and name it with <code>on_royal.jpg</code>, <code>gardiner.jpg</code>, <code>ago.jpg</code>, <code>textile.jpg</code> separately. And we can delete images <code>golden-retriever.jpeg</code>, <code>boxer.jpeg</code>, <code>french-bulldog.jpeg</code>, <code>scottish-terrier.jpeg</code> in that directory.</p>
<h3 id="Step2-Test-Museum-Model"><a href="#Step2-Test-Museum-Model" class="headerlink" title="Step2 - Test Museum Model"></a>Step2 - Test Museum Model</h3><p>Now let’s write some tests. Make sure you have Ganache running first. Then, create a new test file in the command line from the root of our project like this:</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">touch</span> <span class="built_in">test</span>/passcard.js</span></span><br></pre></td></tr></table></figure>
<p>Or we can create it manually.  </p>
<p>We’ll write some tests in Javascript to simulate client-side interaction with our smart contract, much like we did in the console.  </p>
<p>Here is the code for the tests:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">Passcard</span> = artifacts.<span class="built_in">require</span>(<span class="string">&quot;./Passcard.sol&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">contract</span>(<span class="string">&quot;Passcard&quot;</span>, <span class="keyword">function</span>(<span class="params">accounts</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> passcardInstance;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&quot;initializes with four museums&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Passcard</span>.<span class="title function_">deployed</span>().<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">instance</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> instance.<span class="title function_">museumsCount</span>();</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">count</span>) &#123;</span><br><span class="line">      assert.<span class="title function_">equal</span>(count, <span class="number">4</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&quot;it initializes the museums with the correct values&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Passcard</span>.<span class="title function_">deployed</span>().<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">instance</span>) &#123;</span><br><span class="line">      passcardInstance = instance;</span><br><span class="line">      <span class="keyword">return</span> passcardInstance.<span class="title function_">museums</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">museum</span>) &#123;</span><br><span class="line"></span><br><span class="line">      assert.<span class="title function_">equal</span>(museum[<span class="number">0</span>], <span class="number">1</span>, <span class="string">&quot;contains the correct id&quot;</span>);</span><br><span class="line">      assert.<span class="title function_">equal</span>(museum[<span class="number">1</span>], <span class="string">&quot;Royal Ontario Museum&quot;</span>, <span class="string">&quot;contains the correct name&quot;</span>);</span><br><span class="line">      assert.<span class="title function_">equal</span>(museum[<span class="number">2</span>], <span class="string">&quot;It is one of the largest museums in North America and the largest in Canada.&quot;</span>, <span class="string">&quot;contains the correct description&quot;</span>);</span><br><span class="line">      assert.<span class="title function_">equal</span>(museum[<span class="number">3</span>], <span class="string">&quot;100 Queens Park, Toronto, ON&quot;</span>, <span class="string">&quot;contains the correct address&quot;</span>);</span><br><span class="line">      assert.<span class="title function_">equal</span>(museum[<span class="number">4</span>], <span class="string">&quot;Mon-Fri, 10a.m.-5:30p.m.&quot;</span>, <span class="string">&quot;contains the correct hours&quot;</span>);</span><br><span class="line">      assert.<span class="title function_">equal</span>(museum[<span class="number">5</span>], <span class="string">&quot;./images/on_royal.jpg&quot;</span>, <span class="string">&quot;contains the correct img path&quot;</span>);</span><br><span class="line">      assert.<span class="title function_">equal</span>(museum[<span class="number">6</span>], <span class="string">&quot;2020-09-15&quot;</span>, <span class="string">&quot;contains the correct expiration date&quot;</span>);</span><br><span class="line">      assert.<span class="title function_">equal</span>(museum[<span class="number">7</span>], <span class="number">10</span>, <span class="string">&quot;contains the correct number of pass cards&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> passcardInstance.<span class="title function_">museums</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">museum</span>) &#123;</span><br><span class="line"></span><br><span class="line">      assert.<span class="title function_">equal</span>(museum[<span class="number">0</span>], <span class="number">2</span>, <span class="string">&quot;contains the correct id&quot;</span>);</span><br><span class="line">      assert.<span class="title function_">equal</span>(museum[<span class="number">1</span>], <span class="string">&quot;Gardiner Museum&quot;</span>, <span class="string">&quot;contains the correct name&quot;</span>);</span><br><span class="line">      assert.<span class="title function_">equal</span>(museum[<span class="number">2</span>], <span class="string">&quot;The collection is made up of two types of ceramics, earthenware, and porcelain.&quot;</span>, <span class="string">&quot;contains the correct description&quot;</span>);</span><br><span class="line">      assert.<span class="title function_">equal</span>(museum[<span class="number">3</span>], <span class="string">&quot;111 Queens Park, Toronto, ON&quot;</span>, <span class="string">&quot;contains the correct address&quot;</span>);</span><br><span class="line">      assert.<span class="title function_">equal</span>(museum[<span class="number">4</span>], <span class="string">&quot;Mon-Fri, 10a.m.-6:00p.m.&quot;</span>, <span class="string">&quot;contains the correct hours&quot;</span>);</span><br><span class="line">      assert.<span class="title function_">equal</span>(museum[<span class="number">5</span>], <span class="string">&quot;./images/gardiner.jpg&quot;</span>, <span class="string">&quot;contains the correct img path&quot;</span>);</span><br><span class="line">      assert.<span class="title function_">equal</span>(museum[<span class="number">6</span>], <span class="string">&quot;2020-10-08&quot;</span>, <span class="string">&quot;contains the correct expiration date&quot;</span>);</span><br><span class="line">      assert.<span class="title function_">equal</span>(museum[<span class="number">7</span>], <span class="number">30</span>, <span class="string">&quot;contains the correct number of pass cards&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> passcardInstance.<span class="title function_">museums</span>(<span class="number">3</span>);</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">museum</span>) &#123;</span><br><span class="line"></span><br><span class="line">      assert.<span class="title function_">equal</span>(museum[<span class="number">0</span>], <span class="number">3</span>, <span class="string">&quot;contains the correct id&quot;</span>);</span><br><span class="line">      assert.<span class="title function_">equal</span>(museum[<span class="number">1</span>], <span class="string">&quot;Art Gallery of Ontario&quot;</span>, <span class="string">&quot;contains the correct name&quot;</span>);</span><br><span class="line">      assert.<span class="title function_">equal</span>(museum[<span class="number">2</span>], <span class="string">&quot;Its permanent collection represents many artistic movements and eras of art history.&quot;</span>, <span class="string">&quot;contains the correct description&quot;</span>);</span><br><span class="line">      assert.<span class="title function_">equal</span>(museum[<span class="number">3</span>], <span class="string">&quot;317 Dundas St W, Toronto, ON&quot;</span>, <span class="string">&quot;contains the correct address&quot;</span>);</span><br><span class="line">      assert.<span class="title function_">equal</span>(museum[<span class="number">4</span>], <span class="string">&quot;Mon-Fri, 10:30a.m.-5p.m.&quot;</span>, <span class="string">&quot;contains the correct hours&quot;</span>);</span><br><span class="line">      assert.<span class="title function_">equal</span>(museum[<span class="number">5</span>], <span class="string">&quot;./images/ago.jpg&quot;</span>, <span class="string">&quot;contains the correct img path&quot;</span>);</span><br><span class="line">      assert.<span class="title function_">equal</span>(museum[<span class="number">6</span>], <span class="string">&quot;2020-11-20&quot;</span>, <span class="string">&quot;contains the correct expiration date&quot;</span>);</span><br><span class="line">      assert.<span class="title function_">equal</span>(museum[<span class="number">7</span>], <span class="number">25</span>, <span class="string">&quot;contains the correct number of pass cards&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> passcardInstance.<span class="title function_">museums</span>(<span class="number">4</span>);</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">museum</span>) &#123;</span><br><span class="line"></span><br><span class="line">      assert.<span class="title function_">equal</span>(museum[<span class="number">0</span>], <span class="number">4</span>, <span class="string">&quot;contains the correct id&quot;</span>);</span><br><span class="line">      assert.<span class="title function_">equal</span>(museum[<span class="number">1</span>], <span class="string">&quot;Textile Museum of Canada&quot;</span>, <span class="string">&quot;contains the correct name&quot;</span>);</span><br><span class="line">      assert.<span class="title function_">equal</span>(museum[<span class="number">2</span>], <span class="string">&quot;It is a museum dedicated to the collection, exhibition, and documentation of textiles.&quot;</span>, <span class="string">&quot;contains the correct description&quot;</span>);</span><br><span class="line">      assert.<span class="title function_">equal</span>(museum[<span class="number">3</span>], <span class="string">&quot;55 Centre Ave, Toronto, ON&quot;</span>, <span class="string">&quot;contains the correct address&quot;</span>);</span><br><span class="line">      assert.<span class="title function_">equal</span>(museum[<span class="number">4</span>], <span class="string">&quot;Mon-Sun, 11a.m.-5p.m.&quot;</span>, <span class="string">&quot;contains the correct hours&quot;</span>);</span><br><span class="line">      assert.<span class="title function_">equal</span>(museum[<span class="number">5</span>], <span class="string">&quot;./images/textile.jpg&quot;</span>, <span class="string">&quot;contains the correct img path&quot;</span>);</span><br><span class="line">      assert.<span class="title function_">equal</span>(museum[<span class="number">6</span>], <span class="string">&quot;2020-12-16&quot;</span>, <span class="string">&quot;contains the correct expiration date&quot;</span>);</span><br><span class="line">      assert.<span class="title function_">equal</span>(museum[<span class="number">7</span>], <span class="number">1</span>, <span class="string">&quot;contains the correct number of pass cards&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>The first test checks that the contract was initialized with the correct number of museums by checking the museum count is equal to 4. The next test inspects the values of each museum, ensuring that each museum has the correct id, name, description, address, open hours, image path, expiration date, and the number of pass cards.  </p>
<p>Now let’s run the tests from the command line like this:</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">truffle <span class="built_in">test</span></span></span><br></pre></td></tr></table></figure>
<p>Please notice that you need to exit truffle console and type the above command in the normal console.  </p>
<p>Congratulations! You have passed all the tests so far.</p>
<h3 id="Step3-Model-User-Information-and-Add-Functions"><a href="#Step3-Model-User-Information-and-Add-Functions" class="headerlink" title="Step3 - Model User Information and Add Functions"></a>Step3 - Model User Information and Add Functions</h3><p>We need a way to count the number of pass cards that a user already got, and also keep track of their pass cards information. We can use a mapping to record whether the user got the pass card from a museum with a specified id. Here is how we will model the user information in <code>Passcard.sol</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">contract Passcard &#123;</span><br><span class="line">    // ...</span><br><span class="line"></span><br><span class="line">    // Model the user information</span><br><span class="line">    struct UserInfo &#123;</span><br><span class="line">      uint passcardsCount;</span><br><span class="line">      mapping(uint =&gt; bool) passcardsValid;</span><br><span class="line">      bool exist;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>We specified that this struct has a <code>passcardsCount</code> of unsigned integer type to count the number of pass cards the user got, and a Solidity mapping <code>passcardsValid</code> to record whether the user got the pass card from the specified museum - the museum has an id of unsigned integer type. Besides, we set a boolean variable <code>exist</code> to help check whether the user exists in the global <code>users</code> mapping, which we will introduce next.  </p>
<p>We need a place to store the <code>UserInfo</code> structure type that we’ve just created. We can do this with a Solidity mapping <code>users</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">contract Passcard &#123;</span><br><span class="line">    // ...</span><br><span class="line"></span><br><span class="line">    // Model the user information</span><br><span class="line">    struct UserInfo &#123;</span><br><span class="line">      uint passcardsCount;</span><br><span class="line">      mapping(uint =&gt; bool) passcardsValid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // ...</span><br><span class="line"></span><br><span class="line">    // Read/Write users&#x27; information</span><br><span class="line">    mapping(address =&gt; UserInfo) public users;</span><br><span class="line"></span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>In this case, the key to the mapping is the account address of the user, and the value is a <code>UserInfo</code> structure type that we just defined. This essentially gives us an address-based look up for each user.</p>
<p>Now let’s add the ability to get pass cards for users by adding a “get passcard” function:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">contract Passcard &#123;</span><br><span class="line">  // ...</span><br><span class="line"></span><br><span class="line">  function getPasscard (uint _museumId) public &#123;</span><br><span class="line"></span><br><span class="line">    if (!users[msg.sender].exist) &#123;</span><br><span class="line">      // initialize user information</span><br><span class="line">      users[msg.sender] = UserInfo(&#123;passcardsCount: 0, exist: true&#125;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      // require that the user can&#x27;t get the same pass card twice</span><br><span class="line">      require(!users[msg.sender].passcardsValid[_museumId]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // require a valid museumId</span><br><span class="line">    require(_museumId &gt; 0 &amp;&amp; _museumId &lt;= museumsCount);</span><br><span class="line"></span><br><span class="line">    //require the number of remaining pass cards for the museum is larger than zero</span><br><span class="line">    require(museums[_museumId].count_remain &gt; 0);</span><br><span class="line"></span><br><span class="line">    // record that user got the pass card</span><br><span class="line">    users[msg.sender].passcardsValid[_museumId] = true;</span><br><span class="line"></span><br><span class="line">    // update count of pass cards for that user</span><br><span class="line">    users[msg.sender].passcardsCount += 1;</span><br><span class="line"></span><br><span class="line">    //update the number of remaining pass cards for the museum</span><br><span class="line">    museums[_museumId].count_remain -= 1;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>In this <code>getPasscard</code> function, if the user’s account address doesn’t exist in the <code>users</code> mapping, it will initialize the user information by setting <code>passcardsCount</code> to 0 and <code>exist</code> to <code>true</code>.  </p>
<p>The core functionality is as follows: set the boolean for the specified museum id in the mapping <code>passcardsValid</code> to <code>true</code>; increase <code>passcardsCount</code> by 1; decrease the museum’s number of remaining pass cards by 1.  </p>
<p>It also implements require statements that will stop execution if the conditions are not met: first require that the user can’t get the passcard if he&#x2F;she’ve already got a same one; second require that the museum id is valid; third require that the number of the museum’s remaining pass cards is larger than zero.</p>
<p>Next let’s add the ability for users to remove pass cards by adding a “remove passcard” function:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">contract Passcard &#123;</span><br><span class="line">  // ...</span><br><span class="line"></span><br><span class="line">  function removePasscard (uint _museumId) public &#123;</span><br><span class="line">    // require the user exists in mapping and got passcards before</span><br><span class="line">    require(users[msg.sender].exist);</span><br><span class="line"></span><br><span class="line">    // require that the user has the passcard with id _museumId</span><br><span class="line">    require(users[msg.sender].passcardsValid[_museumId]);</span><br><span class="line"></span><br><span class="line">    // require a valid museumId</span><br><span class="line">    require(_museumId &gt; 0 &amp;&amp; _museumId &lt;= museumsCount);</span><br><span class="line"></span><br><span class="line">    // record that user removes the passcard</span><br><span class="line">    users[msg.sender].passcardsValid[_museumId] = false;</span><br><span class="line"></span><br><span class="line">    // update count of passcards for that user</span><br><span class="line">    users[msg.sender].passcardsCount -= 1;</span><br><span class="line"></span><br><span class="line">    //update the number of remaining pass cards for the museum</span><br><span class="line">    museums[_museumId].count_remain += 1;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The core functionality of this <code>removePasscard</code> function is as follows: set the boolean for the specified museum id in the mapping <code>passcardsValid</code> to be <code>false</code>, decrease <code>passcardsCount</code> by 1, and increase the museum’s number of remaining pass cards by 1.  </p>
<p>It also implements require statements that will stop execution if the conditions are not met: first require that the user exists in <code>users</code> mapping and got passcards before; second require that the user has the pass card with the specified museum id; third require that the museum id is valid.  </p>
<p>Now let’s add the function to help check whether the user has the pass card of a specified museum:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">contract Passcard &#123;</span><br><span class="line">  // ...</span><br><span class="line"></span><br><span class="line">  //check if the user has the pass card of the museum with id _museumId</span><br><span class="line">  function getPcValid (uint _museumId) public returns (bool) &#123;</span><br><span class="line">    return (users[msg.sender].passcardsValid[_museumId]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>We set this function to be public since it’s helpful to call it outside the contract.</p>
<p>At this point, your contract code should look like this:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pragma solidity 0.5.16;</span><br><span class="line"></span><br><span class="line">contract Passcard &#123;</span><br><span class="line"></span><br><span class="line">  //Model a Museum</span><br><span class="line">  struct Museum &#123;</span><br><span class="line">    uint id;</span><br><span class="line">    string name;</span><br><span class="line">    string description;</span><br><span class="line">    string addr;</span><br><span class="line">    string hour;</span><br><span class="line">    string imgsrc;</span><br><span class="line">    string expire_date;</span><br><span class="line">    uint count_remain;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // Model the user information</span><br><span class="line">  struct UserInfo &#123;</span><br><span class="line">    uint passcardsCount;</span><br><span class="line">    mapping(uint =&gt; bool) passcardsValid;</span><br><span class="line">    bool exist;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  //Read/Write museums&#x27; information</span><br><span class="line">  mapping(uint =&gt; Museum) public museums;</span><br><span class="line"></span><br><span class="line">  //keep track of museum counts</span><br><span class="line">  uint public museumsCount;</span><br><span class="line"></span><br><span class="line">  // Read/Write users&#x27; information</span><br><span class="line">  mapping(address =&gt; UserInfo) public users;</span><br><span class="line"></span><br><span class="line">  //Constructor</span><br><span class="line">  constructor() public &#123;</span><br><span class="line">    //add mock data</span><br><span class="line">    addMuseum(&quot;Royal Ontario Museum&quot;,</span><br><span class="line">    &quot;It is one of the largest museums in North America and the largest in Canada.&quot;,</span><br><span class="line">    &quot;100 Queens Park, Toronto, ON&quot;, &quot;Mon-Fri, 10a.m.-5:30p.m.&quot;, &quot;./images/on_royal.jpg&quot;, &quot;2020-09-15&quot;, 10);</span><br><span class="line"></span><br><span class="line">    addMuseum(&quot;Gardiner Museum&quot;,</span><br><span class="line">    &quot;The collection is made up of two types of ceramics, earthenware, and porcelain.&quot;,</span><br><span class="line">    &quot;111 Queens Park, Toronto, ON&quot;, &quot;Mon-Fri, 10a.m.-6:00p.m.&quot;, &quot;./images/gardiner.jpg&quot;, &quot;2020-10-08&quot;, 30);</span><br><span class="line"></span><br><span class="line">    addMuseum(&quot;Art Gallery of Ontario&quot;,</span><br><span class="line">    &quot;Its permanent collection represents many artistic movements and eras of art history.&quot;,</span><br><span class="line">    &quot;317 Dundas St W, Toronto, ON&quot;, &quot;Mon-Fri, 10:30a.m.-5p.m.&quot;, &quot;./images/ago.jpg&quot;, &quot;2020-11-20&quot;, 25);</span><br><span class="line"></span><br><span class="line">    addMuseum(&quot;Textile Museum of Canada&quot;,</span><br><span class="line">    &quot;It is a museum dedicated to the collection, exhibition, and documentation of textiles.&quot;,</span><br><span class="line">    &quot;55 Centre Ave, Toronto, ON&quot;, &quot;Mon-Sun, 11a.m.-5p.m.&quot;, &quot;./images/textile.jpg&quot;, &quot;2020-12-16&quot;, 1);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  //function for adding museum</span><br><span class="line">  function addMuseum (string memory _name, string memory _description,</span><br><span class="line">    string memory _addr, string memory _hours, string memory _imgsrc,</span><br><span class="line">    string memory _date, uint _count) private &#123;</span><br><span class="line">      museumsCount += 1;</span><br><span class="line">      museums[museumsCount] = Museum(museumsCount, _name, _description, _addr, _hours,</span><br><span class="line">        _imgsrc, _date, _count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  function getPasscard (uint _museumId) public &#123;</span><br><span class="line"></span><br><span class="line">    if (!users[msg.sender].exist) &#123;</span><br><span class="line">      // initialize user information</span><br><span class="line">      users[msg.sender] = UserInfo(&#123;passcardsCount: 0, exist: true&#125;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      // require that the user can&#x27;t get the same pass card twice</span><br><span class="line">      require(!users[msg.sender].passcardsValid[_museumId]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // require a valid museumId</span><br><span class="line">    require(_museumId &gt; 0 &amp;&amp; _museumId &lt;= museumsCount);</span><br><span class="line"></span><br><span class="line">    //require the number of remaining pass cards for the museum is larger than zero</span><br><span class="line">    require(museums[_museumId].count_remain &gt; 0);</span><br><span class="line"></span><br><span class="line">    // record that user got the pass card</span><br><span class="line">    users[msg.sender].passcardsValid[_museumId] = true;</span><br><span class="line"></span><br><span class="line">    // update count of pass cards for that user</span><br><span class="line">    users[msg.sender].passcardsCount += 1;</span><br><span class="line"></span><br><span class="line">    //update the number of remaining pass cards for the museum</span><br><span class="line">    museums[_museumId].count_remain -= 1;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function removePasscard (uint _museumId) public &#123;</span><br><span class="line">    // require the user exists in mapping and got passcards before</span><br><span class="line">    require(users[msg.sender].exist);</span><br><span class="line"></span><br><span class="line">    // require that the user has the passcard with id _museumId</span><br><span class="line">    require(users[msg.sender].passcardsValid[_museumId]);</span><br><span class="line"></span><br><span class="line">    // require a valid museumId</span><br><span class="line">    require(_museumId &gt; 0 &amp;&amp; _museumId &lt;= museumsCount);</span><br><span class="line"></span><br><span class="line">    // record that user removes the passcard</span><br><span class="line">    users[msg.sender].passcardsValid[_museumId] = false;</span><br><span class="line"></span><br><span class="line">    // update count of passcards for that user</span><br><span class="line">    users[msg.sender].passcardsCount -= 1;</span><br><span class="line"></span><br><span class="line">    //update the number of remaining pass cards for the museum</span><br><span class="line">    museums[_museumId].count_remain += 1;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  //check if the user has the pass card of the museum with id _museumId</span><br><span class="line">  function getPcValid (uint _museumId) public returns (bool) &#123;</span><br><span class="line">    return (users[msg.sender].passcardsValid[_museumId]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Now let’s migrate our contract like this:</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">truffle migrate --reset</span></span><br></pre></td></tr></table></figure>

<h3 id="Step4-Test-User-Model-and-Functions"><a href="#Step4-Test-User-Model-and-Functions" class="headerlink" title="Step4 - Test User Model and Functions"></a>Step4 - Test User Model and Functions</h3><p>Now let’s add some tests to our <code>passcard.js</code> test file:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">contract</span>(<span class="string">&quot;Passcard&quot;</span>, <span class="keyword">function</span>(<span class="params">accounts</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&quot;allows a user to get and remove a pass card&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Passcard</span>.<span class="title function_">deployed</span>().<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">instance</span>) &#123;</span><br><span class="line">      passcardInstance = instance;</span><br><span class="line">      museumId = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">return</span> passcardInstance.<span class="title function_">getPasscard</span>(museumId, &#123; <span class="attr">from</span>: accounts[<span class="number">0</span>] &#125;);</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">receipt</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> passcardInstance.<span class="title function_">users</span>(accounts[<span class="number">0</span>]);</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">userinfo</span>) &#123;</span><br><span class="line">      assert.<span class="title function_">equal</span>(userinfo.<span class="property">passcardsCount</span>, <span class="number">1</span>, <span class="string">&quot;increments the user&#x27;s pass card count&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> passcardInstance.<span class="property">getPcValid</span>.<span class="title function_">call</span>(museumId, &#123; <span class="attr">from</span>: accounts[<span class="number">0</span>] &#125;);</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">valid_status</span>)&#123;</span><br><span class="line">      assert.<span class="title function_">equal</span>(valid_status, <span class="literal">true</span>, <span class="string">&quot;the user got the pass card of museum1&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> passcardInstance.<span class="title function_">removePasscard</span>(museumId, &#123; <span class="attr">from</span>: accounts[<span class="number">0</span>] &#125;);</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">receipt</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> passcardInstance.<span class="title function_">users</span>(accounts[<span class="number">0</span>]);</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">userinfo</span>) &#123;</span><br><span class="line">      assert.<span class="title function_">equal</span>(userinfo.<span class="property">passcardsCount</span>, <span class="number">0</span>, <span class="string">&quot;deducts the user&#x27;s pass card count&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> passcardInstance.<span class="property">getPcValid</span>.<span class="title function_">call</span>(museumId, &#123; <span class="attr">from</span>: accounts[<span class="number">0</span>] &#125;);</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">valid_status</span>) &#123;</span><br><span class="line">      assert.<span class="title function_">equal</span>(valid_status, <span class="literal">false</span>, <span class="string">&quot;the user removed the pass card of museum1&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Here we test several things: the <code>getPasscard</code> function increments the number of pass cards for the user, and sets value for “museumId” in the user’s <code>passcardsValid</code> mapping to be <code>true</code>; the <code>removePasscard</code> function decreases the number of pass cards for the user, and sets corresponding value in the <code>passcardsValid</code> mapping to be <code>false</code>. Also it tests the user is added to the <code>users</code> mapping.</p>
<p>Now let’s write a test to ensure the count of remaining pass cards of a museum varies when the user gets one from the museum or removes the one he&#x2F;she had:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&quot;the number of remaining pass cards for museums varies when the user gets one or removes one&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Passcard</span>.<span class="title function_">deployed</span>().<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">instance</span>) &#123;</span><br><span class="line">    passcardInstance = instance;</span><br><span class="line">    museumId = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> passcardInstance.<span class="title function_">getPasscard</span>(museumId, &#123; <span class="attr">from</span>: accounts[<span class="number">0</span>] &#125;);</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">receipt</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> passcardInstance.<span class="title function_">museums</span>(museumId);</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">museum</span>) &#123;</span><br><span class="line">    assert.<span class="title function_">equal</span>(museum[<span class="number">7</span>], <span class="number">9</span>, <span class="string">&quot;decrease the count of pass cards left for museum1&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> passcardInstance.<span class="title function_">removePasscard</span>(museumId, &#123; <span class="attr">from</span>: accounts[<span class="number">0</span>] &#125;);</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">receipt</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> passcardInstance.<span class="title function_">museums</span>(museumId);</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">museum</span>) &#123;</span><br><span class="line">    assert.<span class="title function_">equal</span>(museum[<span class="number">7</span>], <span class="number">10</span>, <span class="string">&quot;increment the count of pass cards left for museum1&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>Let’s write a test to ensure that our <code>getPasscard</code> function throws an exception for invalid museum id:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// write a test to ensure that our getPasscard function throws an exception for invalid museum id:</span></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&quot;throws an exception for invalid museum id in getPasscard&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Passcard</span>.<span class="title function_">deployed</span>().<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">instance</span>) &#123;</span><br><span class="line">    passcardInstance = instance;</span><br><span class="line">    <span class="keyword">return</span> passcardInstance.<span class="title function_">getPasscard</span>(<span class="number">99</span>, &#123; <span class="attr">from</span>: accounts[<span class="number">1</span>] &#125;)</span><br><span class="line">  &#125;).<span class="title function_">then</span>(assert.<span class="property">fail</span>).<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="title function_">assert</span>(error.<span class="property">message</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;revert&#x27;</span>) &gt;= <span class="number">0</span>, <span class="string">&quot;error message must contain revert&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>Also let’s write a test to ensure that our <code>getPasscard</code> function throws an exception for getting a passcard if the user already has a same one:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&quot;throws an exception for getting same passcard twice&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Passcard</span>.<span class="title function_">deployed</span>().<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">instance</span>) &#123;</span><br><span class="line">    passcardInstance = instance;</span><br><span class="line">    museumId = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> passcardInstance.<span class="title function_">getPasscard</span>(museumId, &#123; <span class="attr">from</span>: accounts[<span class="number">1</span>] &#125;);</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">receipt</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> passcardInstance.<span class="title function_">users</span>(accounts[<span class="number">1</span>]);</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">userinfo</span>) &#123;</span><br><span class="line">    assert.<span class="title function_">equal</span>(userinfo.<span class="property">passcardsCount</span>, <span class="number">1</span>, <span class="string">&quot;gets first passcard&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> passcardInstance.<span class="property">getPcValid</span>.<span class="title function_">call</span>(museumId, &#123; <span class="attr">from</span>: accounts[<span class="number">1</span>] &#125;);</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">valid_status</span>)&#123;</span><br><span class="line">    assert.<span class="title function_">equal</span>(valid_status, <span class="literal">true</span>, <span class="string">&quot;passcard of museum2 is valid&quot;</span>);</span><br><span class="line">    <span class="comment">// Try to get same passcard again</span></span><br><span class="line">    <span class="keyword">return</span> passcardInstance.<span class="title function_">getPasscard</span>(museumId, &#123; <span class="attr">from</span>: accounts[<span class="number">1</span>] &#125;);</span><br><span class="line">  &#125;).<span class="title function_">then</span>(assert.<span class="property">fail</span>).<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="title function_">assert</span>(error.<span class="property">message</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;revert&#x27;</span>) &gt;= <span class="number">0</span>, <span class="string">&quot;error message must contain revert&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>Let’s write a test to ensure that our <code>getPasscard</code> function throws an exception when the  count of remaining pass cards is zero for a museum but the user still tries to get one:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&quot;throws an exception when the count of remaining pass cards is zero for a museum but the user still tries to get one&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Passcard</span>.<span class="title function_">deployed</span>().<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">instance</span>) &#123;</span><br><span class="line">    passcardInstance = instance;</span><br><span class="line">    museumId = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">return</span> passcardInstance.<span class="title function_">getPasscard</span>(museumId, &#123; <span class="attr">from</span>: accounts[<span class="number">1</span>] &#125;);</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">receipt</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> passcardInstance.<span class="title function_">getPasscard</span>(museumId, &#123; <span class="attr">from</span>: accounts[<span class="number">1</span>] &#125;);</span><br><span class="line">  &#125;).<span class="title function_">then</span>(assert.<span class="property">fail</span>).<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="title function_">assert</span>(error.<span class="property">message</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;revert&#x27;</span>) &gt;= <span class="number">0</span>, <span class="string">&quot;error message must contain revert&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Then let’s write a test to ensure that our <code>removePasscard</code> function throws an exception for invalid museum id:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&quot;throws an exception for invalid museum id in removePasscard&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Passcard</span>.<span class="title function_">deployed</span>().<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">instance</span>) &#123;</span><br><span class="line">    passcardInstance = instance;</span><br><span class="line">    <span class="keyword">return</span> passcardInstance.<span class="title function_">removePasscard</span>(<span class="number">99</span>, &#123; <span class="attr">from</span>: accounts[<span class="number">1</span>] &#125;)</span><br><span class="line">  &#125;).<span class="title function_">then</span>(assert.<span class="property">fail</span>).<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="title function_">assert</span>(error.<span class="property">message</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;revert&#x27;</span>) &gt;= <span class="number">0</span>, <span class="string">&quot;error message must contain revert&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>Also let’s write a test to ensure that our <code>removePasscard</code> function throws an exception when a user tries to remove a pass card that he&#x2F;she doesn’t have:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&quot;throws an exception for users removing invalid pass cards&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Passcard</span>.<span class="title function_">deployed</span>().<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">instance</span>) &#123;</span><br><span class="line">    passcardInstance = instance;</span><br><span class="line">    museumId = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> passcardInstance.<span class="title function_">removePasscard</span>(museumId, &#123; <span class="attr">from</span>: accounts[<span class="number">2</span>] &#125;);</span><br><span class="line">  &#125;).<span class="title function_">then</span>(assert.<span class="property">fail</span>).<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="title function_">assert</span>(error.<span class="property">message</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;revert&#x27;</span>) &gt;= <span class="number">0</span>, <span class="string">&quot;error message must contain revert&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>Now let’s run the tests from the command line like this:</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">truffle <span class="built_in">test</span></span></span><br></pre></td></tr></table></figure>

<p>Congratulations! You have passed all the 9 tests so far and we are ready to move on to the client-side.</p>
<h3 id="Step5-Client-Side-Application"><a href="#Step5-Client-Side-Application" class="headerlink" title="Step5 - Client-Side Application"></a>Step5 - Client-Side Application</h3><p>Now let’s start building the client-side application that will talk to our smart contract.  </p>
<p>Go ahead and replace all of the content of your <code>index.html</code> file inside <code>src</code> directory with these lines of code:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Museum Pass Card<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Bootstrap --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;css/bootstrap.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- customize --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;css/museum.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;web_title&quot;</span>&gt;</span>Museum Pass Card Promotions<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;web_note&quot;</span>&gt;</span>Get the pass card and enjoy one-day free trip!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;loader&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-center&quot;</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row_museum&quot;</span> <span class="attr">id</span>=<span class="string">&quot;card_museums&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;get_museum&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;count_title&quot;</span>&gt;</span>Your pass cards: <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;count&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span> so far<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;accountAddress&quot;</span> <span class="attr">class</span>=<span class="string">&quot;text-center&quot;</span>&gt;</span>12345<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row_museum&quot;</span> <span class="attr">id</span>=<span class="string">&quot;user_cards&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- jQuery (necessary for Bootstrap&#x27;s JavaScript plugins) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Include all compiled plugins (below), or include individual files as needed --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/web3.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/truffle-contract.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/app.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Now let’s create a new CSS file named with <code>museum.css</code> in our <code>src/css</code> directory, and add these lines of code:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.web_title</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.web_note</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hr &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">5px</span> <span class="number">0px</span> <span class="number">10px</span> <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.row_museum</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-around;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card_museum</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">49%</span>;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">220px</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#3399ff</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card_museum</span> <span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">38%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">99%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left</span> <span class="selector-class">.image</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">95%</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#cce6ff</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">16px</span> <span class="number">0px</span> <span class="number">0px</span> <span class="number">16px</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.image</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: auto;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">16px</span> <span class="number">0px</span> <span class="number">0px</span> <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card_museum</span> <span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">62%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> <span class="selector-class">.card-title</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> <span class="selector-class">.card-button</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-end;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#1a8cff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card-button</span> <span class="selector-id">#amount</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0px</span> <span class="number">3px</span> <span class="number">0px</span> <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card-button</span> <span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">4%</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">20%</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> <span class="selector-class">.card-note</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#1a8cff</span>;</span><br><span class="line">  <span class="attribute">font-style</span>: italic;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card-note</span> <span class="selector-id">#date</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.count_title</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.user_card</span> &#123;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#33cc33</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.user_card</span> <span class="selector-class">.left</span> <span class="selector-class">.image</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#c2f0c2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.user_card</span> <span class="selector-class">.right</span> <span class="selector-class">.card-note</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#29a329</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.user_card</span> <span class="selector-class">.right</span> <span class="selector-class">.card-button</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-end;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">font-weight</span>: bolder;</span><br><span class="line">  <span class="attribute">font-size</span>: large;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#29a329</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0px</span> <span class="number">30px</span> <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Next, replace all of the content of your <code>app.js</code> file in the <code>src/js</code> directory with these lines of code:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">App</span> = &#123;</span><br><span class="line">  <span class="attr">web3Provider</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">contracts</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">account</span>: <span class="string">&#x27;0x0&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">init</span>: <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="title class_">App</span>.<span class="title function_">initWeb3</span>();</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">initWeb3</span>: <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">ethereum</span>) &#123;</span><br><span class="line">      <span class="title class_">App</span>.<span class="property">web3Provider</span> = <span class="variable language_">window</span>.<span class="property">ethereum</span>;</span><br><span class="line">      <span class="keyword">await</span> <span class="variable language_">window</span>.<span class="property">ethereum</span>.<span class="title function_">enable</span>();</span><br><span class="line">      web3 = <span class="keyword">new</span> <span class="title class_">Web3</span>(<span class="title class_">App</span>.<span class="property">web3Provider</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">App</span>.<span class="title function_">initContract</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title class_">App</span>.<span class="property">web3Provider</span> = <span class="keyword">new</span> <span class="title class_">Web3</span>.<span class="property">providers</span>.<span class="title class_">HttpProvider</span>(<span class="string">&#x27;http://localhost:7545&#x27;</span>);</span><br><span class="line">      web3 = <span class="keyword">new</span> <span class="title class_">Web3</span>(<span class="title class_">App</span>.<span class="property">web3Provider</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">App</span>.<span class="title function_">initContract</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">initContract</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $.<span class="title function_">getJSON</span>(<span class="string">&quot;Passcard.json&quot;</span>, <span class="keyword">function</span>(<span class="params">passcard</span>) &#123;</span><br><span class="line">      <span class="comment">// Instantiate a new truffle contract from the artifact</span></span><br><span class="line">      <span class="title class_">App</span>.<span class="property">contracts</span>.<span class="property">Passcard</span> = <span class="title class_">TruffleContract</span>(passcard);</span><br><span class="line">      <span class="comment">// Connect provider to interact with contract</span></span><br><span class="line">      <span class="title class_">App</span>.<span class="property">contracts</span>.<span class="property">Passcard</span>.<span class="title function_">setProvider</span>(<span class="title class_">App</span>.<span class="property">web3Provider</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">App</span>.<span class="title function_">render</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">getPasscard</span>: <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> museumId = <span class="built_in">parseInt</span>(e.<span class="property">target</span>.<span class="property">id</span>.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">2</span>));</span><br><span class="line">    <span class="title class_">App</span>.<span class="property">contracts</span>.<span class="property">Passcard</span>.<span class="title function_">deployed</span>().<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">instance</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> instance.<span class="title function_">getPasscard</span>(museumId, &#123; <span class="attr">from</span>: <span class="title class_">App</span>.<span class="property">account</span> &#125;);</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">result</span>) &#123;</span><br><span class="line">      <span class="comment">// Wait for votes to update</span></span><br><span class="line">      $(<span class="string">&quot;#content&quot;</span>).<span class="title function_">hide</span>();</span><br><span class="line">      $(<span class="string">&quot;#loader&quot;</span>).<span class="title function_">show</span>();</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">removePasscard</span>: <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> museumId = <span class="built_in">parseInt</span>(e.<span class="property">target</span>.<span class="property">id</span>.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">2</span>));</span><br><span class="line">    <span class="title class_">App</span>.<span class="property">contracts</span>.<span class="property">Passcard</span>.<span class="title function_">deployed</span>().<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">instance</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> instance.<span class="title function_">removePasscard</span>(museumId, &#123; <span class="attr">from</span>: <span class="title class_">App</span>.<span class="property">account</span> &#125;);</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">result</span>) &#123;</span><br><span class="line">      <span class="comment">// Wait for votes to update</span></span><br><span class="line">      $(<span class="string">&quot;#content&quot;</span>).<span class="title function_">hide</span>();</span><br><span class="line">      $(<span class="string">&quot;#loader&quot;</span>).<span class="title function_">show</span>();</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">render</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> passcardInstance;</span><br><span class="line">    <span class="keyword">let</span> loader = $(<span class="string">&quot;#loader&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> content = $(<span class="string">&quot;#content&quot;</span>);</span><br><span class="line"></span><br><span class="line">    loader.<span class="title function_">show</span>();</span><br><span class="line">    content.<span class="title function_">hide</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Load account data</span></span><br><span class="line">    web3.<span class="property">eth</span>.<span class="title function_">getCoinbase</span>(<span class="keyword">function</span>(<span class="params">err, account</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (err === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="title class_">App</span>.<span class="property">account</span> = account;</span><br><span class="line">        $(<span class="string">&quot;#accountAddress&quot;</span>).<span class="title function_">html</span>(<span class="string">&quot;Your Account: &quot;</span> + account);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Load contract data</span></span><br><span class="line">    <span class="title class_">App</span>.<span class="property">contracts</span>.<span class="property">Passcard</span>.<span class="title function_">deployed</span>().<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">instance</span>) &#123;</span><br><span class="line">      passcardInstance = instance;</span><br><span class="line">      <span class="keyword">return</span> passcardInstance.<span class="title function_">museumsCount</span>();</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="keyword">async</span> <span class="keyword">function</span>(<span class="params">museumsCount</span>) &#123;</span><br><span class="line">      <span class="comment">// console.log(`museumsCount: $&#123;museumsCount&#125;`)</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> museums_promises = [];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= museumsCount; i++) &#123;</span><br><span class="line">        museums_promises.<span class="title function_">push</span>(passcardInstance.<span class="title function_">museums</span>(i));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> museums_array = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(museums_promises);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> museumsListing = $(<span class="string">&quot;#card_museums&quot;</span>);</span><br><span class="line">      museumsListing.<span class="title function_">empty</span>();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; museumsCount; i++) &#123;</span><br><span class="line">          <span class="keyword">let</span> museum = museums_array[i];</span><br><span class="line"></span><br><span class="line">          <span class="keyword">let</span> id = museum[<span class="number">0</span>];</span><br><span class="line">          <span class="keyword">let</span> name = museum[<span class="number">1</span>];</span><br><span class="line">          <span class="keyword">let</span> description = museum[<span class="number">2</span>];</span><br><span class="line">          <span class="keyword">let</span> addr = museum[<span class="number">3</span>];</span><br><span class="line">          <span class="keyword">let</span> hour = museum[<span class="number">4</span>];</span><br><span class="line">          <span class="keyword">let</span> imgsrc = museum[<span class="number">5</span>];</span><br><span class="line">          <span class="keyword">let</span> expire_date = museum[<span class="number">6</span>];</span><br><span class="line">          <span class="keyword">let</span> count_remain = museum[<span class="number">7</span>];</span><br><span class="line"></span><br><span class="line">          <span class="comment">// Render museums in DOM</span></span><br><span class="line">          <span class="keyword">let</span> card_museum = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">          card_museum.<span class="property">className</span> = <span class="string">&quot;card_museum&quot;</span>;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">let</span> leftcol = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">          leftcol.<span class="property">className</span> = <span class="string">&quot;left&quot;</span>;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">let</span> imgcontainer = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">          imgcontainer.<span class="property">className</span> = <span class="string">&quot;image&quot;</span>;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">let</span> img = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">          img.<span class="property">src</span> = imgsrc;</span><br><span class="line">          img.<span class="property">alt</span> = name;</span><br><span class="line"></span><br><span class="line">          imgcontainer.<span class="title function_">appendChild</span>(img);</span><br><span class="line">          leftcol.<span class="title function_">appendChild</span>(imgcontainer);</span><br><span class="line">          card_museum.<span class="title function_">appendChild</span>(leftcol);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">let</span> rightcol = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">          rightcol.<span class="property">className</span> = <span class="string">&quot;right&quot;</span>;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">let</span> card_title = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;h5&quot;</span>);</span><br><span class="line">          card_title.<span class="property">className</span> = <span class="string">&quot;card-title&quot;</span>;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">let</span> title_text = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;strong&quot;</span>);</span><br><span class="line">          title_text.<span class="title function_">appendChild</span>(<span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(name));</span><br><span class="line"></span><br><span class="line">          card_title.<span class="title function_">appendChild</span>(title_text);</span><br><span class="line">          rightcol.<span class="title function_">appendChild</span>(card_title);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">let</span> card_desc = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">          card_desc.<span class="property">className</span> = <span class="string">&quot;card-text&quot;</span>;</span><br><span class="line">          card_desc.<span class="title function_">appendChild</span>(<span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(description));</span><br><span class="line">          rightcol.<span class="title function_">appendChild</span>(card_desc);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">let</span> card_addr_hour = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">          card_addr_hour.<span class="property">className</span> = <span class="string">&quot;card-text&quot;</span>;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">let</span> card_addr = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;strong&quot;</span>);</span><br><span class="line">          card_addr.<span class="title function_">appendChild</span>(<span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&quot;Address: &quot;</span>));</span><br><span class="line">          <span class="keyword">let</span> addr_text = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(addr);</span><br><span class="line">          <span class="keyword">let</span> br = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;br&quot;</span>);</span><br><span class="line">          card_addr_hour.<span class="title function_">appendChild</span>(card_addr);</span><br><span class="line">          card_addr_hour.<span class="title function_">appendChild</span>(addr_text);</span><br><span class="line">          card_addr_hour.<span class="title function_">appendChild</span>(br);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">let</span> card_hour = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;strong&quot;</span>);</span><br><span class="line">          card_hour.<span class="title function_">appendChild</span>(<span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&quot;Hours: &quot;</span>));</span><br><span class="line">          <span class="keyword">let</span> hour_text = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(hour);</span><br><span class="line">          card_addr_hour.<span class="title function_">appendChild</span>(card_hour);</span><br><span class="line">          card_addr_hour.<span class="title function_">appendChild</span>(hour_text);</span><br><span class="line"></span><br><span class="line">          rightcol.<span class="title function_">appendChild</span>(card_addr_hour);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">let</span> card_note = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">          card_note.<span class="property">className</span> = <span class="string">&quot;card-text card-note&quot;</span>;</span><br><span class="line">          card_note.<span class="title function_">appendChild</span>(<span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&quot;Pass card will be expired by &quot;</span>));</span><br><span class="line">          <span class="keyword">let</span> date_text = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;span&quot;</span>);</span><br><span class="line">          date_text.<span class="title function_">setAttribute</span>(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;date&quot;</span>);</span><br><span class="line">          date_text.<span class="title function_">appendChild</span>(<span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(expire_date));</span><br><span class="line">          card_note.<span class="title function_">appendChild</span>(date_text);</span><br><span class="line"></span><br><span class="line">          rightcol.<span class="title function_">appendChild</span>(card_note);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">let</span> card_button = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">          card_button.<span class="property">className</span> = <span class="string">&quot;card-button&quot;</span>;</span><br><span class="line">          card_button.<span class="title function_">appendChild</span>(<span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&quot;only &quot;</span>));</span><br><span class="line"></span><br><span class="line">          <span class="keyword">let</span> amount = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;span&quot;</span>);</span><br><span class="line">          amount.<span class="title function_">setAttribute</span>(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;amount&quot;</span>);</span><br><span class="line">          amount.<span class="title function_">appendChild</span>(<span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(count_remain));</span><br><span class="line"></span><br><span class="line">          card_button.<span class="title function_">appendChild</span>(amount);</span><br><span class="line">          card_button.<span class="title function_">appendChild</span>(<span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&quot; pass cards left !&quot;</span>));</span><br><span class="line"></span><br><span class="line">          <span class="keyword">let</span> button_valid = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;button&quot;</span>);</span><br><span class="line">          button_valid.<span class="title function_">setAttribute</span>(<span class="string">&quot;id&quot;</span>, <span class="string">`<span class="subst">$&#123;id&#125;</span>-valid`</span>);</span><br><span class="line">          button_valid.<span class="property">type</span> = <span class="string">&quot;button&quot;</span>;</span><br><span class="line">          button_valid.<span class="property">className</span> = <span class="string">&quot;btn btn-primary&quot;</span>;</span><br><span class="line">          button_valid.<span class="property">onclick</span> = <span class="title class_">App</span>.<span class="property">getPasscard</span>;</span><br><span class="line">          <span class="keyword">if</span> (count_remain &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            button_valid.<span class="property">disabled</span> = <span class="literal">true</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            button_valid.<span class="property">disabled</span> = <span class="literal">false</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          button_valid.<span class="title function_">appendChild</span>(<span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&quot;Get !&quot;</span>));</span><br><span class="line"></span><br><span class="line">          card_button.<span class="title function_">appendChild</span>(button_valid);</span><br><span class="line"></span><br><span class="line">          rightcol.<span class="title function_">appendChild</span>(card_button);</span><br><span class="line"></span><br><span class="line">          card_museum.<span class="title function_">appendChild</span>(rightcol);</span><br><span class="line"></span><br><span class="line">          museumsListing.<span class="title function_">append</span>(card_museum);</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> passcardInstance.<span class="property">users</span>.<span class="title function_">call</span>(<span class="title class_">App</span>.<span class="property">account</span>);</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="keyword">async</span> <span class="keyword">function</span>(<span class="params">userinfo</span>)&#123;</span><br><span class="line">      <span class="keyword">let</span> passcardsCount = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;count&quot;</span>);</span><br><span class="line">      passcardsCount.<span class="property">innerHTML</span> = userinfo[<span class="number">0</span>];</span><br><span class="line">      <span class="comment">// console.log(`passcardsCount: $&#123;userinfo[0]&#125;`)</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> museumsCount = <span class="keyword">await</span> passcardInstance.<span class="title function_">museumsCount</span>();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> boolean_promises = [];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= museumsCount; i++) &#123;</span><br><span class="line">        boolean_promises.<span class="title function_">push</span>(passcardInstance.<span class="property">getPcValid</span>.<span class="title function_">call</span>(i, &#123;<span class="attr">from</span>: <span class="title class_">App</span>.<span class="property">account</span>&#125;));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> boolean_array = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(boolean_promises);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// console.log(boolean_array)</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> museum_promises = [];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= museumsCount; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (boolean_array[i - <span class="number">1</span>]) &#123;</span><br><span class="line">          museum_promises.<span class="title function_">push</span>(passcardInstance.<span class="title function_">museums</span>(i));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> museum_array = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(museum_promises);</span><br><span class="line">      <span class="keyword">let</span> museum_array_length = museum_array.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> userCardsListing = $(<span class="string">&quot;#user_cards&quot;</span>);</span><br><span class="line">      userCardsListing.<span class="title function_">empty</span>();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// console.log(museum_array)</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; museum_array_length; i++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> museum = museum_array[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> museumId = museum[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">let</span> name = museum[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">let</span> description = museum[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">let</span> addr = museum[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">let</span> hour = museum[<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">let</span> imgsrc = museum[<span class="number">5</span>]</span><br><span class="line">        <span class="keyword">let</span> expire_date = museum[<span class="number">6</span>];</span><br><span class="line">        <span class="keyword">let</span> count_remain = museum[<span class="number">7</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// disable buttons in museum cards if the user already got the pass card</span></span><br><span class="line">        <span class="keyword">let</span> button_will_disable = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">`<span class="subst">$&#123;museumId&#125;</span>-valid`</span>);</span><br><span class="line">        <span class="keyword">if</span> (button_will_disable) &#123;</span><br><span class="line">          button_will_disable.<span class="property">disabled</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Render museums in DOM</span></span><br><span class="line">        <span class="keyword">let</span> card_museum = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">        card_museum.<span class="property">className</span> = <span class="string">&quot;user_card card_museum&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> leftcol = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">        leftcol.<span class="property">className</span> = <span class="string">&quot;left&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> imgcontainer = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">        imgcontainer.<span class="property">className</span> = <span class="string">&quot;image&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> img = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">        img.<span class="property">src</span> = imgsrc;</span><br><span class="line">        img.<span class="property">alt</span> = name;</span><br><span class="line"></span><br><span class="line">        imgcontainer.<span class="title function_">appendChild</span>(img);</span><br><span class="line">        leftcol.<span class="title function_">appendChild</span>(imgcontainer);</span><br><span class="line">        card_museum.<span class="title function_">appendChild</span>(leftcol);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> rightcol = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">        rightcol.<span class="property">className</span> = <span class="string">&quot;right&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> card_title = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;h5&quot;</span>);</span><br><span class="line">        card_title.<span class="property">className</span> = <span class="string">&quot;card-title&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> title_text = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;strong&quot;</span>);</span><br><span class="line">        title_text.<span class="title function_">appendChild</span>(<span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(name));</span><br><span class="line"></span><br><span class="line">        card_title.<span class="title function_">appendChild</span>(title_text);</span><br><span class="line">        rightcol.<span class="title function_">appendChild</span>(card_title);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> card_desc = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">        card_desc.<span class="property">className</span> = <span class="string">&quot;card-text&quot;</span>;</span><br><span class="line">        card_desc.<span class="title function_">appendChild</span>(<span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(description));</span><br><span class="line">        rightcol.<span class="title function_">appendChild</span>(card_desc);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> card_addr_hour = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">        card_addr_hour.<span class="property">className</span> = <span class="string">&quot;card-text&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> card_addr = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;strong&quot;</span>);</span><br><span class="line">        card_addr.<span class="title function_">appendChild</span>(<span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&quot;Address: &quot;</span>));</span><br><span class="line">        <span class="keyword">let</span> addr_text = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(addr);</span><br><span class="line">        <span class="keyword">let</span> br = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;br&quot;</span>);</span><br><span class="line">        card_addr_hour.<span class="title function_">appendChild</span>(card_addr);</span><br><span class="line">        card_addr_hour.<span class="title function_">appendChild</span>(addr_text);</span><br><span class="line">        card_addr_hour.<span class="title function_">appendChild</span>(br);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> card_hour = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;strong&quot;</span>);</span><br><span class="line">        card_hour.<span class="title function_">appendChild</span>(<span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&quot;Hours: &quot;</span>));</span><br><span class="line">        <span class="keyword">let</span> hour_text = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(hour);</span><br><span class="line">        card_addr_hour.<span class="title function_">appendChild</span>(card_hour);</span><br><span class="line">        card_addr_hour.<span class="title function_">appendChild</span>(hour_text);</span><br><span class="line"></span><br><span class="line">        rightcol.<span class="title function_">appendChild</span>(card_addr_hour);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> card_note = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">        card_note.<span class="property">className</span> = <span class="string">&quot;card-text card-note&quot;</span>;</span><br><span class="line">        card_note.<span class="title function_">appendChild</span>(<span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&quot;Pass card will be expired by &quot;</span>));</span><br><span class="line">        <span class="keyword">let</span> date_text = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;span&quot;</span>);</span><br><span class="line">        date_text.<span class="title function_">setAttribute</span>(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;date&quot;</span>);</span><br><span class="line">        date_text.<span class="title function_">appendChild</span>(<span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(expire_date));</span><br><span class="line">        card_note.<span class="title function_">appendChild</span>(date_text);</span><br><span class="line"></span><br><span class="line">        rightcol.<span class="title function_">appendChild</span>(card_note);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> enjoy_text = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">        enjoy_text.<span class="property">className</span> = <span class="string">&quot;card-button&quot;</span>;</span><br><span class="line">        enjoy_text.<span class="title function_">appendChild</span>(<span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&quot;ENJOY !&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> button_remove = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;button&quot;</span>);</span><br><span class="line">        button_remove.<span class="title function_">setAttribute</span>(<span class="string">&quot;id&quot;</span>, <span class="string">`<span class="subst">$&#123;museumId&#125;</span>-remove`</span>);</span><br><span class="line">        button_remove.<span class="property">type</span> = <span class="string">&quot;button&quot;</span>;</span><br><span class="line">        button_remove.<span class="property">className</span> = <span class="string">&quot;btn btn-danger&quot;</span>;</span><br><span class="line">        button_remove.<span class="property">onclick</span> = <span class="title class_">App</span>.<span class="property">removePasscard</span>;</span><br><span class="line">        button_remove.<span class="title function_">appendChild</span>(<span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&quot;Remove&quot;</span>));</span><br><span class="line"></span><br><span class="line">        enjoy_text.<span class="title function_">appendChild</span>(button_remove);</span><br><span class="line"></span><br><span class="line">        rightcol.<span class="title function_">appendChild</span>(enjoy_text);</span><br><span class="line"></span><br><span class="line">        card_museum.<span class="title function_">appendChild</span>(rightcol);</span><br><span class="line"></span><br><span class="line">        userCardsListing.<span class="title function_">append</span>(card_museum);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      loader.<span class="title function_">hide</span>();</span><br><span class="line">      content.<span class="title function_">show</span>();</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">warn</span>(error);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  $(<span class="variable language_">window</span>).<span class="title function_">load</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">App</span>.<span class="title function_">init</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>web3.js</code> is a javascript library that allows our client-side application to talk to the blockchain. We configure web3 inside the <code>initWeb3</code> function.  </p>
<p>In the render function, we fetch the user’s account address, museums’ information, the number of users’ pass cards and detailed information of users’ pass cards from the smart contract to display them at the frontend, and also we add “Get !” and “Remove” buttons on pass cards to invoke functions: <code>getPasscard</code> will be invoked when users click “Get !” buttons, and <code>removePasscard</code> will be invoked when users click “Remove” buttons.  </p>
<p>Now let’s view the client-side application in the browser. First, make sure that you’ve migrated your contracts like this:</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">truffle migrate --reset</span></span><br></pre></td></tr></table></figure>

<p>Next, start your development server from the command line like this:</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm run dev</span></span><br></pre></td></tr></table></figure>

<p>This should automatically open a new browser window with your client-side application. Now your front-end application should look like this:</p>
<p><img data-src="/images/tut_img/metamask.png"></p>
<p>Notice that your application says “Loading…”. That’s because we’re not logged in to the blockchain yet. Please firstly enter your password to MetaMask and login MetaMask.  </p>
<p>In order to connect to the blockchain, we need to import one of the accounts from Ganache into Metamask:<br>In Metamask, select <code>Import Account</code>, copy the private key of the first account in Ganache and paste it in the corresponding area of Metamask.  </p>
<p><img data-src="/images/tut_img/import.png"></p>
<p>Make sure you are in <code>HTTP://127.0.0.1:7545</code> network.  </p>
<p>Then refresh the page and confirm the connection.  </p>
<p><img data-src="/images/tut_img/connect.png"></p>
<p>Once you’re connected with Metamask, you should see all of the contract and account data loaded.</p>
<p><img data-src="/images/tut_img/home.png"></p>
<p>Go ahead and try to get and remove pass cards. Once you do, you should see Metamask confirmations pop up like this:</p>
<p><img data-src="/images/tut_img/transaction.png"></p>
<p>Once you click “Confirm”, you’ve successfully completed a transaction in the local blockchain! You’ll still see a loading screen. For now, you’ll have to refresh the page to see the pass card you’ve got&#x2F;removed, the changed number of remaining pass cards for that museum, and the changed number of your pass cards. We’ll implement the functionality to update the webpage automatically in the next section.</p>
<h3 id="Step5-Watch-Events"><a href="#Step5-Watch-Events" class="headerlink" title="Step5 - Watch Events"></a>Step5 - Watch Events</h3><p>The very last step in this tutorial is to trigger an event whenever the user get or remove a pass card. This will allow us to update our client-side application automatically.  </p>
<p>Let’s start by declaring a “get passcard” event in our contract like this:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">contract Election &#123;</span><br><span class="line">    // ...</span><br><span class="line"></span><br><span class="line">    event getPcEvent (</span><br><span class="line">        uint indexed _museumId</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Now we can trigger this “get passcard” event inside our <code>getPasscard</code> function like this:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function getPasscard (uint _museumId) public &#123;</span><br><span class="line">  // ...</span><br><span class="line"></span><br><span class="line">  /*direct automatically after getting passcard*/</span><br><span class="line">  emit getPcEvent(_museumId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Also let’s declare a “remove passcard” event in our contract:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">contract Election &#123;</span><br><span class="line">    // ...</span><br><span class="line"></span><br><span class="line">    event removePcEvent (</span><br><span class="line">        uint indexed _museumId</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>And we can trigger this “remove passcard” event inside our <code>removePasscard</code> function like this:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function removePasscard (uint _museumId) public &#123;</span><br><span class="line">  // ...</span><br><span class="line"></span><br><span class="line">  /*direct automatically after getting passcard*/</span><br><span class="line">  emit removePcEvent(_museumId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Now that we’ve updated our contract, we should re-run our migrations:</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">truffle migrate --reset</span></span><br></pre></td></tr></table></figure>

<p>We can also add a test to our <code>passcard.js</code> test file to check for these events like this:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&quot;the getPcEvent and removePcEvent is triggered correcly&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Passcard</span>.<span class="title function_">deployed</span>().<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">instance</span>) &#123;</span><br><span class="line">    passcardInstance = instance;</span><br><span class="line">    museumId = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> passcardInstance.<span class="title function_">getPasscard</span>(museumId, &#123; <span class="attr">from</span>: accounts[<span class="number">0</span>] &#125;);</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">receipt</span>) &#123;</span><br><span class="line">    assert.<span class="title function_">equal</span>(receipt.<span class="property">logs</span>.<span class="property">length</span>, <span class="number">1</span>, <span class="string">&quot;an getPc event was triggered&quot;</span>);</span><br><span class="line">    assert.<span class="title function_">equal</span>(receipt.<span class="property">logs</span>[<span class="number">0</span>].<span class="property">event</span>, <span class="string">&quot;getPcEvent&quot;</span>, <span class="string">&quot;the getPc event type is correct&quot;</span>);</span><br><span class="line">    assert.<span class="title function_">equal</span>(receipt.<span class="property">logs</span>[<span class="number">0</span>].<span class="property">args</span>.<span class="property">_museumId</span>.<span class="title function_">toNumber</span>(), museumId, <span class="string">&quot;the museum id got is correct&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> passcardInstance.<span class="title function_">removePasscard</span>(museumId, &#123; <span class="attr">from</span>: accounts[<span class="number">0</span>] &#125;);</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">receipt</span>) &#123;</span><br><span class="line">    assert.<span class="title function_">equal</span>(receipt.<span class="property">logs</span>.<span class="property">length</span>, <span class="number">1</span>, <span class="string">&quot;an remove event was triggered&quot;</span>);</span><br><span class="line">    assert.<span class="title function_">equal</span>(receipt.<span class="property">logs</span>[<span class="number">0</span>].<span class="property">event</span>, <span class="string">&quot;removePcEvent&quot;</span>, <span class="string">&quot;the remove event type is correct&quot;</span>);</span><br><span class="line">    assert.<span class="title function_">equal</span>(receipt.<span class="property">logs</span>[<span class="number">0</span>].<span class="property">args</span>.<span class="property">_museumId</span>.<span class="title function_">toNumber</span>(), museumId, <span class="string">&quot;the museum id removed is correct&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>This test inspects the transaction receipt returned by the <code>getPasscard</code>&#x2F;<code>removePasscard</code> function to ensure that it has logs. These logs contain the event that was triggered. We check that the event is the correct type, and that it has the correct museum id.</p>
<p>Now let’s update the client-side application to listen for the “get passcard” and “remove passcard” events and fire a page refresh any time when they are triggered. We can do that with a <code>listenForEvents</code> function like this:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">App</span> = &#123;</span><br><span class="line">  <span class="comment">// ..</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">listenForEvents</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">App</span>.<span class="property">contracts</span>.<span class="property">Passcard</span>.<span class="title function_">deployed</span>().<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">instance</span>) &#123;</span><br><span class="line">      <span class="comment">// listen for all events from latest block</span></span><br><span class="line">      instance.<span class="title function_">allEvents</span>(&#123;<span class="attr">fromBlock</span>:<span class="string">&#x27;latest&#x27;</span>&#125;)</span><br><span class="line">        .<span class="title function_">watch</span>(<span class="keyword">function</span>(<span class="params">error, event</span>) &#123;</span><br><span class="line">        <span class="comment">// Reload when the user got new pass card or the user deleted a pass card</span></span><br><span class="line">        <span class="title class_">App</span>.<span class="title function_">render</span>();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ..</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Finally, we can call this function inside <code>initContract</code> whenever we initialize the contract:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">App</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">initContract</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $.<span class="title function_">getJSON</span>(<span class="string">&quot;Passcard.json&quot;</span>, <span class="keyword">function</span>(<span class="params">passcard</span>) &#123;</span><br><span class="line">      <span class="comment">// Instantiate a new truffle contract from the artifact</span></span><br><span class="line">      <span class="title class_">App</span>.<span class="property">contracts</span>.<span class="property">Passcard</span> = <span class="title class_">TruffleContract</span>(passcard);</span><br><span class="line">      <span class="comment">// Connect provider to interact with contract</span></span><br><span class="line">      <span class="title class_">App</span>.<span class="property">contracts</span>.<span class="property">Passcard</span>.<span class="title function_">setProvider</span>(<span class="title class_">App</span>.<span class="property">web3Provider</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/*direct automatically after users&#x27; operations*/</span></span><br><span class="line">      <span class="title class_">App</span>.<span class="title function_">listenForEvents</span>();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">App</span>.<span class="title function_">render</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Let’s run our tests first to check if all of them can pass:</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">truffle <span class="built_in">test</span></span></span><br></pre></td></tr></table></figure>

<p>Then start our development server again from the command line:</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm run dev</span></span><br></pre></td></tr></table></figure>

<p>Now, you can play with pass cards on your client-side application, and watch the transactions recorded in real time!  </p>
<p>Congratulations! 🎉 You have successfully built a full stack decentralized application on the Ethereum blockchain!</p>
<p><img data-src="/images/tut_img/img1.png"></p>
<p><img data-src="/images/tut_img/img2.png"></p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://www.dappuniversity.com/articles/the-ultimate-ethereum-dapp-tutorial">The Ultimate Ethereum Dapp Tutorial</a></p>
<h3 id="Dependencies"><a href="#Dependencies" class="headerlink" title="Dependencies"></a>Dependencies</h3><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Node</span> v12.<span class="number">18</span>.<span class="number">2</span>,  </span><br><span class="line"><span class="attribute">lite</span>-server v2.<span class="number">5</span>.<span class="number">4</span>,  </span><br><span class="line"><span class="attribute">Solidity</span> v0.<span class="number">5</span>.<span class="number">16</span>,  </span><br><span class="line"><span class="attribute">Web3</span> v1.<span class="number">2</span>.<span class="number">11</span>,  </span><br><span class="line"><span class="attribute">Truffle</span> v5.<span class="number">1</span>.<span class="number">10</span>,  </span><br><span class="line"><span class="attribute">Ganache</span> v2.<span class="number">4</span>.<span class="number">0</span>  </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>Blockchain</tag>
        <tag>Solidity</tag>
        <tag>Ethereum</tag>
      </tags>
  </entry>
</search>
